Description: CVE-2014-9680: unsafe handling of TZ environment variable
 The TZ environment variable was passed through unchecked.  Most libc
 tzset() implementations support passing an absolute pathname in the time
 zone to point to an arbitrary, user-controlled file.  This may be used
 to exploit bugs in the C library's TZ parser or open files the user
 would not otherwise have access to.  Arbitrary file access via TZ could
 also be used in a denial of service attack by reading from a file or
 fifo that will block.
Origin: backport, http://www.sudo.ws/repos/sudo/rev/650ac6938b59,
 http://www.sudo.ws/repos/sudo/rev/ac1467f71ac0
Bug-Debian: https://bugs.debian.org/772707
Forwarded: not-needed
Author: Todd C. Miller <Todd.Miller@courtesan.com>
Author: Salvatore Bonaccorso <carnil@debian.org>
Author: Ben Hutchings <ben@decadent.org.uk>
Last-Update: 2015-02-27
Applied-Upstream: 1.8.12

--- a/configure.in
+++ b/configure.in
@@ -723,6 +723,12 @@ AC_ARG_WITH(iologdir, [AS_HELP_STRING([-
     no)		;;
 esac])
 
+AC_ARG_WITH(tzdir, [AS_HELP_STRING([--with-tzdir=DIR], [path to the time zone data directory])],
+[case $with_tzdir in
+    yes)	AC_MSG_ERROR(["must give --with-tzdir an argument."])
+		;;
+esac])
+
 AC_ARG_WITH(sendmail, [AS_HELP_STRING([--with-sendmail], [set path to sendmail])
 AS_HELP_STRING([--without-sendmail], [do not send mail at all])],
 [case $with_sendmail in
@@ -2683,6 +2689,7 @@ dnl
 SUDO_LOGFILE
 SUDO_TIMEDIR
 SUDO_IO_LOGDIR
+SUDO_TZDIR
 
 dnl
 dnl If I/O logging is enabled, build sudoreplay and exec_pty get_pty.o iolog.o
--- a/pathnames.h.in
+++ b/pathnames.h.in
@@ -149,3 +149,7 @@
 #ifndef _PATH_NETSVC_CONF
 #undef	_PATH_NETSVC_CONF
 #endif /* _PATH_NETSVC_CONF */
+
+#ifndef _PATH_ZONEINFO
+# undef        _PATH_ZONEINFO
+#endif /* _PATH_ZONEINFO */
--- a/env.c
+++ b/env.c
@@ -189,6 +189,7 @@ static const char *initial_checkenv_tabl
     "LC_*",
     "LINGUAS",
     "TERM",
+    "TZ",
     NULL
 };
 
@@ -204,7 +205,6 @@ static const char *initial_keepenv_table
     "PATH",
     "PS1",
     "PS2",
-    "TZ",
     "XAUTHORITY",
     "XAUTHORIZATION",
     NULL
@@ -526,6 +526,53 @@ matches_env_delete(var)
 }
 
 /*
+ * Sanity-check the TZ environment variable.
+ * On many systems it is possible to set this to a pathname.
+ */
+static int
+tz_is_sane(const char *tzval)
+{
+    const char *cp;
+    char lastch;
+
+    /* tzcode treats a value beginning with a ':' as a path. */
+    if (tzval[0] == ':')
+	tzval++;
+
+    /* Reject fully-qualified TZ that doesn't being with the zoneinfo dir. */
+    if (tzval[0] == '/') {
+#ifdef _PATH_ZONEINFO
+	if (strncmp(tzval, _PATH_ZONEINFO, sizeof(_PATH_ZONEINFO) - 1) != 0 ||
+	    tzval[sizeof(_PATH_ZONEINFO) - 1] != '/')
+	    return FALSE;
+#else
+	/* Assume the worst. */
+	return FALSE;
+#endif
+    }
+
+    /*
+     * Make sure TZ only contains printable non-space characters
+     * and does not contain a '..' path element.
+     */
+    lastch = '/';
+    for (cp = tzval; *cp != '\0'; cp++) {
+	if (isspace((unsigned char)*cp) || !isprint((unsigned char)*cp))
+	    return FALSE;
+	if (lastch == '/' && cp[0] == '.' && cp[1] == '.' &&
+	    (cp[2] == '/' || cp[2] == '\0'))
+	    return FALSE;
+	lastch = *cp;
+    }
+
+    /* Reject extra long TZ values (even if not a path). */
+    if ((size_t)(cp - tzval) >= PATH_MAX)
+	return FALSE;
+
+    return TRUE;
+}
+
+/*
  * Apply the env_check list.
  * Returns TRUE if the variable is allowed, FALSE if denied
  * or -1 if no match.
@@ -548,7 +595,12 @@ matches_env_check(var)
 	    iswild = FALSE;
 	if (strncmp(cur->value, var, len) == 0 &&
 	    (iswild || var[len] == '=')) {
-	    keepit = !strpbrk(var, "/%");
+	    if (strncmp(var, "TZ=", 3) == 0) {
+	        /* Special case for TZ */
+	        keepit = tz_is_sane(var + 3);
+	    } else {
+	        keepit = !strpbrk(var, "/%");
+	    }
 	    break;
 	}
     }
--- a/sudoers.pod
+++ b/sudoers.pod
@@ -1294,10 +1294,35 @@ B<Lists that can be used in a boolean co
 
 =item env_check
 
-Environment variables to be removed from the user's environment if
-the variable's value contains C<%> or C</> characters.  This can
-be used to guard against printf-style format vulnerabilities in
-poorly-written programs.  The argument may be a double-quoted,
+Environment variables to be removed from the user's environment unless
+they are considered ``safe''.  For all variables except C<TZ>,
+``safe'' means that the variable's value does not contain any C<%> or
+C</> characters.  This can be used to guard against printf-style
+format vulnerabilities in poorly-written programs.  The C<TZ> variable
+is considered unsafe if any of the following are true:
+
+=over 4
+
+=item *
+
+It consists of a fully-qualified path name that does not match
+the location of the I<zoneinfo> directory.
+
+=item *
+
+It contains a I<..> path element.
+
+=item *
+
+It contains white space or non-printable characters.
+
+=item *
+
+It is longer than the value of C<PATH_MAX>.
+
+=back
+
+The argument may be a double-quoted,
 space-separated list or a single value without double-quotes.  The
 list can be replaced, added to, deleted from, or disabled by using
 the C<=>, C<+=>, C<-=>, and C<!> operators respectively.  Regardless
--- a/sudoers.man.in
+++ b/sudoers.man.in
@@ -1337,10 +1337,26 @@ The default value is \fIall\fR.
 \&\fBLists that can be used in a boolean context\fR:
 .IP "env_check" 16
 .IX Item "env_check"
-Environment variables to be removed from the user's environment if
-the variable's value contains \f(CW\*(C`%\*(C'\fR or \f(CW\*(C`/\*(C'\fR characters.  This can
-be used to guard against printf-style format vulnerabilities in
-poorly-written programs.  The argument may be a double-quoted,
+Environment variables to be removed from the user's environment unless
+they are considered ``safe''.  For all variables except \f(CW\*(C`TZ\*(C'\fR,
+``safe'' means that the variable's value does not contain any \f(CW\*(C`%\*(C'\fR or
+\&\f(CW\*(C`/\*(C'\fR characters.  This can be used to guard against printf-style
+format vulnerabilities in poorly-written programs.  The \f(CW\*(C`TZ\*(C'\fR variable
+is considered unsafe if any of the following are true:
+.RS 16
+.IP "\(bu" 4
+It consists of a fully-qualified path name that does not match
+the location of the \fIzoneinfo\fR directory.
+.IP "\(bu" 4
+It contains a \fI..\fR path element.
+.IP "\(bu" 4
+It contains white space or non-printable characters.
+.IP "\(bu" 4
+It is longer than the value of \f(CW\*(C`PATH_MAX\*(C'\fR.
+.RE
+.RS 16
+.Sp
+The argument may be a double-quoted,
 space-separated list or a single value without double-quotes.  The
 list can be replaced, added to, deleted from, or disabled by using
 the \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`+=\*(C'\fR, \f(CW\*(C`\-=\*(C'\fR, and \f(CW\*(C`!\*(C'\fR operators respectively.  Regardless
@@ -1349,6 +1365,7 @@ specified by \f(CW\*(C`env_check\*(C'\fR
 they pass the aforementioned check.  The default list of environment
 variables to check is displayed when \fBsudo\fR is run by root with
 the \fI\-V\fR option.
+.RE
 .IP "env_delete" 16
 .IX Item "env_delete"
 Not effective due to security issues: only variables listed in 
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -101,6 +101,26 @@ fi
 ])dnl
 
 dnl
+dnl Detect time zone file directory, if any.
+dnl
+AC_DEFUN([SUDO_TZDIR], [AC_MSG_CHECKING(time zone data directory)
+tzdir="$with_tzdir"
+if test -z "$tzdir"; then
+    tzdir=no
+    for d in /usr/share /usr/share/lib /usr/lib /etc; do
+	if test -d "$d/zoneinfo"; then
+	    tzdir="$d/zoneinfo"
+	    break
+	fi
+    done
+fi
+AC_MSG_RESULT([$tzdir])
+if test "${tzdir}" != "no"; then
+    SUDO_DEFINE_UNQUOTED(_PATH_ZONEINFO, "$tzdir")
+fi
+])dnl
+
+dnl
 dnl Where the timestamp files go.
 dnl
 AC_DEFUN(SUDO_TIMEDIR, [AC_MSG_CHECKING(for timestamp file location)
--- a/configure
+++ b/configure
@@ -942,6 +942,7 @@ with_badpass_message
 with_fqdn
 with_timedir
 with_iologdir
+with_tzdir
 with_sendmail
 with_sudoers_mode
 with_sudoers_uid
@@ -1701,6 +1702,7 @@ Optional Packages:
   --with-fqdn             expect fully qualified hosts in sudoers
   --with-timedir          path to the sudo timestamp dir
   --with-iologdir=DIR     directory to store sudo I/O log files in
+  --with-tzdir=DIR        path to the time zone data directory
   --with-sendmail         set path to sendmail
   --without-sendmail      do not send mail at all
   --with-sudoers-mode     mode of sudoers file (defaults to 0440)
@@ -4680,6 +4682,16 @@ fi
 
 
 
+# Check whether --with-tzdir was given.
+if test "${with_tzdir+set}" = set; then :
+  withval=$with_tzdir; case $with_tzdir in
+    yes)	as_fn_error $? "\"must give --with-tzdir an argument.\"" "$LINENO" 5
+		;;
+esac
+fi
+
+
+
 # Check whether --with-sendmail was given.
 if test "${with_sendmail+set}" = set; then :
   withval=$with_sendmail; case $with_sendmail in
@@ -18283,6 +18295,27 @@ EOF
     { $as_echo "$as_me:${as_lineno-$LINENO}: result: $with_iologdir" >&5
 $as_echo "$with_iologdir" >&6; }
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking time zone data directory" >&5
+$as_echo_n "checking time zone data directory... " >&6; }
+tzdir="$with_tzdir"
+if test -z "$tzdir"; then
+    tzdir=no
+    for d in /usr/share /usr/share/lib /usr/lib /etc; do
+	if test -d "$d/zoneinfo"; then
+	    tzdir="$d/zoneinfo"
+	    break
+	fi
+    done
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $tzdir" >&5
+$as_echo "$tzdir" >&6; }
+if test "${tzdir}" != "no"; then
+    cat >>confdefs.h <<EOF
+#define _PATH_ZONEINFO "$tzdir"
+EOF
+
+fi
+
 
 if test "${with_iologdir-yes}" != "no"; then
     # Require POSIX job control for I/O log support
