Description: CVE-2015-5602: sudoedit path restriction bypass using symlinks
 Files regenerated for changes in CVE-2015-5602-1.patch
Bug: https://bugzilla.sudo.ws/show_bug.cgi?id=707
Bug-Debian: https://bugs.debian.org/804149
Author: Ben Hutchings <ben@decadent.org.uk>
Forwarded: not-needed

--- a/plugins/sudoers/def_data.c
+++ b/plugins/sudoers/def_data.c
@@ -383,6 +383,10 @@ struct sudo_defs_types sudo_defs_table[]
 	N_("Enable sudoers netgroup support"),
 	NULL,
     }, {
+	"sudoedit_follow", T_FLAG,
+	N_("Follow symbolic links when editing files with sudoedit"),
+	NULL,
+    }, {
 	NULL, 0, NULL
     }
 };
--- a/plugins/sudoers/def_data.h
+++ b/plugins/sudoers/def_data.h
@@ -178,6 +178,8 @@
 #define I_MAXSEQ                88
 #define def_use_netgroups       (sudo_defs_table[89].sd_un.flag)
 #define I_USE_NETGROUPS         89
+#define def_sudoedit_follow     (sudo_defs_table[90].sd_un.flag)
+#define I_SUDOEDIT_FOLLOW       90
 
 enum def_tuple {
 	never,
--- a/plugins/sudoers/gram.c
+++ b/plugins/sudoers/gram.c
@@ -1,42 +1,78 @@
 #include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#define YYBYACC 1
-#define YYMAJOR 1
-#define YYMINOR 9
-#define YYLEX yylex()
-#define YYEMPTY -1
-#define yyclearin (yychar=(YYEMPTY))
-#define yyerrok (yyerrflag=0)
-#define YYRECOVERING() (yyerrflag!=0)
-#define yyparse sudoersparse
-#define yylex sudoerslex
-#define yyerror sudoerserror
-#define yychar sudoerschar
-#define yyval sudoersval
-#define yylval sudoerslval
-#define yydebug sudoersdebug
-#define yynerrs sudoersnerrs
-#define yyerrflag sudoerserrflag
-#define yyss sudoersss
-#define yysslim sudoerssslim
-#define yyssp sudoersssp
-#define yyvs sudoersvs
-#define yyvsp sudoersvsp
-#define yystacksize sudoersstacksize
-#define yylhs sudoerslhs
-#define yylen sudoerslen
-#define yydefred sudoersdefred
-#define yydgoto sudoersdgoto
-#define yysindex sudoerssindex
-#define yyrindex sudoersrindex
-#define yygindex sudoersgindex
-#define yytable sudoerstable
-#define yycheck sudoerscheck
-#define yyname sudoersname
-#define yyrule sudoersrule
-#define YYPREFIX "sudoers"
-#line 2 "gram.y"
+/* A Bison parser, made by GNU Bison 3.0.2.  */
+
+/* Bison implementation for Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "3.0.2"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+
+/* Substitute the variable and function names.  */
+#define yyparse         sudoersparse
+#define yylex           sudoerslex
+#define yyerror         sudoerserror
+#define yydebug         sudoersdebug
+#define yynerrs         sudoersnerrs
+
+#define yylval          sudoerslval
+#define yychar          sudoerschar
+
+/* Copy the first part of user declarations.  */
+#line 1 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:339  */
+
 /*
  * Copyright (c) 1996, 1998-2005, 2007-2013
  *	Todd C. Miller <Todd.Miller@courtesan.com>
@@ -125,10 +161,135 @@ static void  add_userspec(struct member
 static struct defaults *new_default(char *, char *, int);
 static struct member *new_member(char *, int);
 static struct sudo_digest *new_digest(int, const char *);
-#line 92 "gram.y"
-#ifndef YYSTYPE_DEFINED
-#define YYSTYPE_DEFINED
-typedef union {
+
+#line 165 "gram.c" /* yacc.c:339  */
+
+# ifndef YY_NULLPTR
+#  if defined __cplusplus && 201103L <= __cplusplus
+#   define YY_NULLPTR nullptr
+#  else
+#   define YY_NULLPTR 0
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* In a future release of Bison, this section will be replaced
+   by #include "y.tab.h".  */
+#ifndef YY_SUDOERS_Y_TAB_H_INCLUDED
+# define YY_SUDOERS_Y_TAB_H_INCLUDED
+/* Debug traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int sudoersdebug;
+#endif
+
+/* Token type.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+  enum yytokentype
+  {
+    COMMAND = 258,
+    ALIAS = 259,
+    DEFVAR = 260,
+    NTWKADDR = 261,
+    NETGROUP = 262,
+    USERGROUP = 263,
+    WORD = 264,
+    DIGEST = 265,
+    DEFAULTS = 266,
+    DEFAULTS_HOST = 267,
+    DEFAULTS_USER = 268,
+    DEFAULTS_RUNAS = 269,
+    DEFAULTS_CMND = 270,
+    NOPASSWD = 271,
+    PASSWD = 272,
+    NOEXEC = 273,
+    EXEC = 274,
+    SETENV = 275,
+    NOSETENV = 276,
+    LOG_INPUT = 277,
+    NOLOG_INPUT = 278,
+    LOG_OUTPUT = 279,
+    NOLOG_OUTPUT = 280,
+    FOLLOW = 281,
+    NOFOLLOW = 282,
+    ALL = 283,
+    COMMENT = 284,
+    HOSTALIAS = 285,
+    CMNDALIAS = 286,
+    USERALIAS = 287,
+    RUNASALIAS = 288,
+    ERROR = 289,
+    TYPE = 290,
+    ROLE = 291,
+    PRIVS = 292,
+    LIMITPRIVS = 293,
+    MYSELF = 294,
+    SHA224 = 295,
+    SHA256 = 296,
+    SHA384 = 297,
+    SHA512 = 298
+  };
+#endif
+/* Tokens.  */
+#define COMMAND 258
+#define ALIAS 259
+#define DEFVAR 260
+#define NTWKADDR 261
+#define NETGROUP 262
+#define USERGROUP 263
+#define WORD 264
+#define DIGEST 265
+#define DEFAULTS 266
+#define DEFAULTS_HOST 267
+#define DEFAULTS_USER 268
+#define DEFAULTS_RUNAS 269
+#define DEFAULTS_CMND 270
+#define NOPASSWD 271
+#define PASSWD 272
+#define NOEXEC 273
+#define EXEC 274
+#define SETENV 275
+#define NOSETENV 276
+#define LOG_INPUT 277
+#define NOLOG_INPUT 278
+#define LOG_OUTPUT 279
+#define NOLOG_OUTPUT 280
+#define FOLLOW 281
+#define NOFOLLOW 282
+#define ALL 283
+#define COMMENT 284
+#define HOSTALIAS 285
+#define CMNDALIAS 286
+#define USERALIAS 287
+#define RUNASALIAS 288
+#define ERROR 289
+#define TYPE 290
+#define ROLE 291
+#define PRIVS 292
+#define LIMITPRIVS 293
+#define MYSELF 294
+#define SHA224 295
+#define SHA256 296
+#define SHA384 297
+#define SHA512 298
+
+/* Value type.  */
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE YYSTYPE;
+union YYSTYPE
+{
+#line 92 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:355  */
+
     struct cmndspec *cmndspec;
     struct defaults *defaults;
     struct member *member;
@@ -141,1780 +302,2616 @@ typedef union {
     struct solaris_privs_info privinfo;
     char *string;
     int tok;
-} YYSTYPE;
-#endif /* YYSTYPE_DEFINED */
-#line 146 "gram.c"
-#define COMMAND 257
-#define ALIAS 258
-#define DEFVAR 259
-#define NTWKADDR 260
-#define NETGROUP 261
-#define USERGROUP 262
-#define WORD 263
-#define DIGEST 264
-#define DEFAULTS 265
-#define DEFAULTS_HOST 266
-#define DEFAULTS_USER 267
-#define DEFAULTS_RUNAS 268
-#define DEFAULTS_CMND 269
-#define NOPASSWD 270
-#define PASSWD 271
-#define NOEXEC 272
-#define EXEC 273
-#define SETENV 274
-#define NOSETENV 275
-#define LOG_INPUT 276
-#define NOLOG_INPUT 277
-#define LOG_OUTPUT 278
-#define NOLOG_OUTPUT 279
-#define ALL 280
-#define COMMENT 281
-#define HOSTALIAS 282
-#define CMNDALIAS 283
-#define USERALIAS 284
-#define RUNASALIAS 285
-#define ERROR 286
-#define TYPE 287
-#define ROLE 288
-#define PRIVS 289
-#define LIMITPRIVS 290
-#define MYSELF 291
-#define SHA224 292
-#define SHA256 293
-#define SHA384 294
-#define SHA512 295
-#define YYERRCODE 256
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoerslhs[] =
-#else
-short sudoerslhs[] =
-#endif
-	{                                        -1,
-    0,    0,   30,   30,   31,   31,   31,   31,   31,   31,
-   31,   31,   31,   31,   31,   31,    4,    4,    3,    3,
-    3,    3,    3,   21,   21,   20,   11,   11,    9,    9,
-    9,    9,    9,    2,    2,    1,   29,   29,   29,   29,
-    7,    7,    6,    6,   24,   25,   23,   23,   23,   23,
-   23,   27,   28,   26,   26,   26,   26,   26,   18,   18,
-   19,   19,   19,   19,   19,   22,   22,   22,   22,   22,
-   22,   22,   22,   22,   22,   22,    5,    5,    5,   33,
-   33,   36,   10,   10,   34,   34,   37,    8,    8,   35,
-   35,   38,   32,   32,   39,   14,   14,   12,   12,   13,
-   13,   13,   13,   13,   17,   17,   15,   15,   16,   16,
-   16,
+
+#line 306 "gram.c" /* yacc.c:355  */
 };
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoerslen[] =
-#else
-short sudoerslen[] =
+# define YYSTYPE_IS_TRIVIAL 1
+# define YYSTYPE_IS_DECLARED 1
 #endif
-	{                                         2,
-    0,    1,    1,    2,    1,    2,    2,    2,    2,    2,
-    2,    2,    3,    3,    3,    3,    1,    3,    1,    2,
-    3,    3,    3,    1,    3,    3,    1,    2,    1,    1,
-    1,    1,    1,    1,    3,    5,    3,    3,    3,    3,
-    1,    2,    1,    2,    3,    3,    0,    1,    1,    2,
-    2,    3,    3,    0,    1,    1,    2,    2,    0,    3,
-    0,    1,    3,    2,    1,    0,    2,    2,    2,    2,
-    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,
-    3,    3,    1,    3,    1,    3,    3,    1,    3,    1,
-    3,    3,    1,    3,    3,    1,    3,    1,    2,    1,
-    1,    1,    1,    1,    1,    3,    1,    2,    1,    1,
-    1,
-};
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoersdefred[] =
-#else
-short sudoersdefred[] =
+
+
+extern YYSTYPE sudoerslval;
+
+int sudoersparse (void);
+
+#endif /* !YY_SUDOERS_Y_TAB_H_INCLUDED  */
+
+/* Copy the second part of user declarations.  */
+
+#line 321 "gram.c" /* yacc.c:358  */
+
+#ifdef short
+# undef short
 #endif
-	{                                      0,
-    0,  100,  102,  103,  104,    0,    0,    0,    0,    0,
-  101,    5,    0,    0,    0,    0,    0,    0,   96,   98,
-    0,    0,    3,    6,    0,    0,   17,    0,   29,   32,
-   31,   33,   30,    0,   27,    0,   83,    0,    0,   79,
-   78,   77,    0,    0,    0,    0,    0,   43,   41,   88,
-    0,    0,    0,    0,   80,    0,    0,   85,    0,    0,
-   93,    0,    0,   90,   99,    0,    0,   24,    0,    4,
-    0,    0,    0,   20,    0,   28,    0,    0,    0,    0,
-   44,    0,    0,    0,    0,    0,    0,   42,    0,    0,
-    0,    0,    0,    0,    0,    0,   97,    0,    0,   21,
-   22,   23,   18,   84,   37,   38,   39,   40,   89,    0,
-   81,    0,   86,    0,   94,    0,   91,    0,   34,    0,
-    0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,  109,  111,  110,    0,  105,  107,    0,    0,   60,
-   35,    0,    0,    0,    0,   66,    0,    0,   50,   51,
-  108,    0,    0,   46,   45,    0,    0,    0,   57,   58,
-  106,   52,   53,   67,   68,   69,   70,   71,   72,   73,
-   74,   75,   76,   36,
-};
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoersdgoto[] =
+
+#ifdef YYTYPE_UINT8
+typedef YYTYPE_UINT8 yytype_uint8;
 #else
-short sudoersdgoto[] =
+typedef unsigned char yytype_uint8;
 #endif
-	{                                      18,
-  119,  120,   27,   28,   48,   49,   50,   51,   35,   67,
-   37,   19,   20,   21,  136,  137,  138,  121,  125,   68,
-   69,  158,  129,  130,  131,  146,  147,  148,   52,   22,
-   23,   60,   54,   57,   63,   55,   58,   64,   61,
-};
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoerssindex[] =
+
+#ifdef YYTYPE_INT8
+typedef YYTYPE_INT8 yytype_int8;
 #else
-short sudoerssindex[] =
+typedef signed char yytype_int8;
 #endif
-	{                                    -33,
- -277,    0,    0,    0,    0,  -13,   75,  105,  105,  -15,
-    0,    0, -246, -241, -217, -210, -226,    0,    0,    0,
-   -5,  -33,    0,    0,   -3, -244,    0,    5,    0,    0,
-    0,    0,    0, -237,    0,  -28,    0,  -19,  -19,    0,
-    0,    0, -251,   -7,   -1,    4,    7,    0,    0,    0,
-  -14,  -20,   -2,    8,    0,    6,   11,    0,    9,   13,
-    0,   12,   14,    0,    0,  105,  -11,    0,   18,    0,
- -203, -200, -188,    0,  -13,    0,   75,    5,    5,    5,
-    0, -187, -185, -184, -183,  -15,    5,    0,   75, -246,
-  -15, -241,  105, -217,  105, -210,    0,   42,   75,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
-    0,   40,    0,   43,    0,   43,    0,   45,    0,   44,
- -279,    0,  135,   -6,   49,   42,   25,   32, -243, -195,
- -192,    0,    0,    0, -236,    0,    0,   54,  135,    0,
-    0, -164, -163,   41,   46,    0, -189, -180,    0,    0,
-    0,  135,   54,    0,    0, -159, -158,  585,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,};
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoersrindex[] =
+
+#ifdef YYTYPE_UINT16
+typedef YYTYPE_UINT16 yytype_uint16;
 #else
-short sudoersrindex[] =
+typedef unsigned short int yytype_uint16;
 #endif
-	{                                    106,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,  110,    0,    0,    1,    0,    0,  181,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,  211,    0,    0,  241,    0,    0,  271,
-    0,    0,  301,    0,    0,    0,    0,    0,  331,    0,
-    0,    0,    0,    0,    0,    0,    0,  361,  391,  421,
-    0,    0,    0,    0,    0,    0,  451,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,  467,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,   31,
-    0,   61,    0,   91,    0,  121,    0,   70,    0,  151,
-  495,    0,   71,   72,    0,  467,    0,    0,  615,  525,
-  555,    0,    0,    0,    0,    0,    0,   73,    0,    0,
-    0,    0,    0,    0,    0,    0,  645,  675,    0,    0,
-    0,    0,   74,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,};
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoersgindex[] =
+
+#ifdef YYTYPE_INT16
+typedef YYTYPE_INT16 yytype_int16;
 #else
-short sudoersgindex[] =
+typedef short int yytype_int16;
 #endif
-	{                                      0,
-  -10,    0,   47,   17,   80,   65,  -84,   27,   92,   -4,
-   48,   62,  112,    2,  -25,   10,   -9,    0,    0,   33,
-    0,    0,    0,    3,   16,    0,  -17,  -12,    0,    0,
-  111,    0,    0,    0,    0,   50,   51,   52,   53,
-};
-#define YYTABLESIZE 970
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoerstable[] =
-#else
-short sudoerstable[] =
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif ! defined YYSIZE_T
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned int
+# endif
 #endif
-	{                                      17,
-   19,  109,   36,   24,   26,   40,   41,  127,  128,   38,
-   39,   53,   43,   26,   74,   77,   56,   43,   26,   26,
-   29,  132,   30,   31,   66,   32,  133,   34,   42,   86,
-   82,    2,   77,   19,    3,    4,    5,   66,   66,   72,
-   59,   73,   33,  134,   19,  144,  145,   62,   75,   98,
-   82,  139,   78,   11,   79,   80,   83,   71,   89,  100,
-   87,   84,  101,   82,   85,   90,   91,   87,   92,   93,
-   94,   96,   95,  174,  102,   99,  105,   17,  106,  107,
-  108,  118,   77,   86,  110,  142,   66,  126,   82,  140,
-   95,  127,  143,   87,  114,  128,  116,  152,  154,  155,
-  145,  156,  123,  162,  163,    1,  157,   34,  144,    2,
-   61,   65,   62,   64,   63,  141,   88,  112,   87,  124,
-   92,  103,   81,   95,  104,   76,  161,   97,   65,  153,
-  160,  122,   70,  150,  159,    0,    0,   17,    0,  111,
-    0,    0,  113,    0,  151,  149,  115,  117,   95,    0,
-   26,    0,    0,   92,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,  135,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,   92,    0,
-   12,    0,    0,   26,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
-    9,    0,    0,   12,    0,    0,    0,    0,    0,    0,
-    0,    0,    1,    0,    2,    0,    0,    3,    4,    5,
-   25,    6,    7,    8,    9,   10,   40,   41,    0,   25,
-   10,   40,   41,    9,   25,   25,   11,   12,   13,   14,
-   15,   16,   29,    0,   30,   31,   19,   32,   19,   42,
-    0,   19,   19,   19,   42,   19,   19,   19,   19,   19,
-    8,    0,    0,   10,   33,    0,   44,   45,   46,   47,
-   19,   19,   19,   19,   19,   19,   82,    0,   82,    0,
-    0,   82,   82,   82,    0,   82,   82,   82,   82,   82,
-   11,    0,    2,    8,    0,    3,    4,    5,    0,    0,
-   82,   82,   82,   82,   82,   82,   87,    0,   87,    0,
-    0,   87,   87,   87,   11,   87,   87,   87,   87,   87,
-    7,    0,   29,   11,   30,   31,    0,   32,    0,    0,
-   87,   87,   87,   87,   87,   87,   95,    0,   95,    0,
-    0,   95,   95,   95,   33,   95,   95,   95,   95,   95,
-   15,    0,    2,    7,    0,    3,    4,    5,    0,    0,
-   95,   95,   95,   95,   95,   95,   92,    0,   92,    0,
-    0,   92,   92,   92,   11,   92,   92,   92,   92,   92,
-   13,    0,  132,   15,    0,    0,    0,  133,    0,    0,
-   92,   92,   92,   92,   92,   92,   26,    0,   26,    0,
-    0,   26,   26,   26,  134,   26,   26,   26,   26,   26,
-   14,    0,    0,   13,    0,    0,    0,    0,    0,    0,
-   26,   26,   26,   26,   26,   26,   12,    0,   12,    0,
-    0,   12,   12,   12,    0,   12,   12,   12,   12,   12,
-   16,    0,    0,   14,    0,    0,    0,    0,    0,    0,
-   12,   12,   12,   12,   12,   12,    9,    0,    9,    0,
-    0,    9,    9,    9,    0,    9,    9,    9,    9,    9,
-    0,    0,    0,   16,    0,    0,    0,    0,    0,    0,
-    9,    9,    9,    9,    9,    9,   10,    0,   10,   59,
-    0,   10,   10,   10,    0,   10,   10,   10,   10,   10,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-   10,   10,   10,   10,   10,   10,    8,   47,    8,    0,
-    0,    8,    8,    8,    0,    8,    8,    8,    8,    8,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    8,    8,    8,    8,    8,    8,   11,   48,   11,    0,
-    0,   11,   11,   11,    0,   11,   11,   11,   11,   11,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-   11,   11,   11,   11,   11,   11,    7,   49,    7,    0,
-    0,    7,    7,    7,    0,    7,    7,    7,    7,    7,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-    7,    7,    7,    7,    7,    7,   15,   43,   15,    0,
-    0,   15,   15,   15,    0,   15,   15,   15,   15,   15,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-   15,   15,   15,   15,   15,   15,   13,   54,   13,    0,
-    0,   13,   13,   13,    0,   13,   13,   13,   13,   13,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-   13,   13,   13,   13,   13,   13,   14,   55,   14,    0,
-    0,   14,   14,   14,    0,   14,   14,   14,   14,   14,
-    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-   14,   14,   14,   14,   14,   14,   16,   56,   16,    0,
-    0,   16,   16,   16,    0,   16,   16,   16,   16,   16,
-    0,    0,    0,   59,   59,    0,    0,    0,    0,    0,
-   16,   16,   16,   16,   16,   16,   59,   59,   59,   59,
-   59,   59,   59,   59,   59,   59,   59,    0,    0,    0,
-    0,   47,   47,   59,   59,   59,   59,    0,   59,   59,
-   59,   59,    0,    0,   47,   47,   47,   47,   47,   47,
-   47,   47,   47,   47,   47,    0,    0,    0,    0,    0,
-    0,   48,   48,   47,   47,    0,   47,   47,   47,   47,
-    0,    0,    0,    0,   48,   48,   48,   48,   48,   48,
-   48,   48,   48,   48,   48,    0,    0,    0,    0,    0,
-    0,   49,   49,   48,   48,    0,   48,   48,   48,   48,
-    0,    0,    0,    0,   49,   49,   49,   49,   49,   49,
-   49,   49,   49,   49,   49,    0,    0,    0,    0,    0,
-    0,   40,   41,   49,   49,    0,   49,   49,   49,   49,
-    0,    0,    0,    0,  164,  165,  166,  167,  168,  169,
-  170,  171,  172,  173,   42,    0,    0,    0,    0,    0,
-    0,   54,   54,    0,    0,    0,   44,   45,   46,   47,
-    0,    0,    0,    0,   54,   54,   54,   54,   54,   54,
-   54,   54,   54,   54,   54,    0,    0,    0,    0,    0,
-    0,   55,   55,    0,    0,    0,   54,   54,   54,   54,
-    0,    0,    0,    0,   55,   55,   55,   55,   55,   55,
-   55,   55,   55,   55,   55,    0,    0,    0,    0,    0,
-    0,   56,   56,    0,    0,    0,   55,   55,   55,   55,
-    0,    0,    0,    0,   56,   56,   56,   56,   56,   56,
-   56,   56,   56,   56,   56,    0,    0,    0,    0,    0,
-    0,    0,    0,    0,    0,    0,   56,   56,   56,   56,
-};
-#if defined(__cplusplus) || defined(__STDC__)
-const short sudoerscheck[] =
-#else
-short sudoerscheck[] =
+
+#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
 #endif
-	{                                      33,
-    0,   86,    7,  281,   33,  257,  258,  287,  288,    8,
-    9,  258,   33,   33,  259,   44,  258,   33,   33,   33,
-  258,  258,  260,  261,   44,  263,  263,   33,  280,   44,
-    0,  258,   44,   33,  261,  262,  263,   44,   44,   43,
-  258,   45,  280,  280,   44,  289,  290,  258,   44,   61,
-   58,   58,   36,  280,   38,   39,   58,   61,   61,  263,
-    0,   58,  263,   33,   58,   58,   61,   51,   58,   61,
-   58,   58,   61,  158,  263,   58,  264,   33,  264,  264,
-  264,   40,   44,   44,   89,   61,   44,   44,   58,   41,
-    0,  287,   61,   33,   93,  288,   95,   44,  263,  263,
-  290,   61,   58,  263,  263,    0,   61,   33,  289,    0,
-   41,   41,   41,   41,   41,  126,   52,   91,   58,  118,
-    0,   75,   43,   33,   77,   34,  152,   66,   17,  139,
-  148,   99,   22,  131,  147,   -1,   -1,   33,   -1,   90,
-   -1,   -1,   92,   -1,  135,  130,   94,   96,   58,   -1,
-    0,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
-    0,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
-    0,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
-   -1,   -1,  256,   -1,  258,   -1,   -1,  261,  262,  263,
-  259,  265,  266,  267,  268,  269,  257,  258,   -1,  259,
-    0,  257,  258,   33,  259,  259,  280,  281,  282,  283,
-  284,  285,  258,   -1,  260,  261,  256,  263,  258,  280,
-   -1,  261,  262,  263,  280,  265,  266,  267,  268,  269,
-    0,   -1,   -1,   33,  280,   -1,  292,  293,  294,  295,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-    0,   -1,  258,   33,   -1,  261,  262,  263,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,  280,  265,  266,  267,  268,  269,
-    0,   -1,  258,   33,  260,  261,   -1,  263,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,  280,  265,  266,  267,  268,  269,
-    0,   -1,  258,   33,   -1,  261,  262,  263,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,  280,  265,  266,  267,  268,  269,
-    0,   -1,  258,   33,   -1,   -1,   -1,  263,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,  280,  265,  266,  267,  268,  269,
-    0,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-    0,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   -1,  258,   33,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  256,   33,  258,   -1,
-   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
-   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,   -1,
-  280,  281,  282,  283,  284,  285,  270,  271,  272,  273,
-  274,  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,
-   -1,  257,  258,  287,  288,  289,  290,   -1,  292,  293,
-  294,  295,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,  257,  258,  289,  290,   -1,  292,  293,  294,  295,
-   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,  257,  258,  289,  290,   -1,  292,  293,  294,  295,
-   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,  257,  258,  289,  290,   -1,  292,  293,  294,  295,
-   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,  257,  258,   -1,   -1,   -1,  292,  293,  294,  295,
-   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,  257,  258,   -1,   -1,   -1,  292,  293,  294,  295,
-   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,  257,  258,   -1,   -1,   -1,  292,  293,  294,  295,
-   -1,   -1,   -1,   -1,  270,  271,  272,  273,  274,  275,
-  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
-   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,  294,  295,
-};
-#define YYFINAL 18
-#ifndef YYDEBUG
-#define YYDEBUG 0
+
+#ifndef YY_ATTRIBUTE
+# if (defined __GNUC__                                               \
+      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
+     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
+#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
+# else
+#  define YY_ATTRIBUTE(Spec) /* empty */
+# endif
 #endif
-#define YYMAXTOKEN 295
-#if YYDEBUG
-#if defined(__cplusplus) || defined(__STDC__)
-const char * const sudoersname[] =
-#else
-char *sudoersname[] =
+
+#ifndef YY_ATTRIBUTE_PURE
+# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
 #endif
-	{
-"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-"'!'",0,0,0,0,0,0,"'('","')'",0,"'+'","','","'-'",0,0,0,0,0,0,0,0,0,0,0,0,"':'",
-0,0,"'='",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
-"COMMAND","ALIAS","DEFVAR","NTWKADDR","NETGROUP","USERGROUP","WORD","DIGEST",
-"DEFAULTS","DEFAULTS_HOST","DEFAULTS_USER","DEFAULTS_RUNAS","DEFAULTS_CMND",
-"NOPASSWD","PASSWD","NOEXEC","EXEC","SETENV","NOSETENV","LOG_INPUT",
-"NOLOG_INPUT","LOG_OUTPUT","NOLOG_OUTPUT","ALL","COMMENT","HOSTALIAS",
-"CMNDALIAS","USERALIAS","RUNASALIAS","ERROR","TYPE","ROLE","PRIVS","LIMITPRIVS",
-"MYSELF","SHA224","SHA256","SHA384","SHA512",
-};
-#if defined(__cplusplus) || defined(__STDC__)
-const char * const sudoersrule[] =
-#else
-char *sudoersrule[] =
+
+#ifndef YY_ATTRIBUTE_UNUSED
+# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
 #endif
-	{"$accept : file",
-"file :",
-"file : line",
-"line : entry",
-"line : line entry",
-"entry : COMMENT",
-"entry : error COMMENT",
-"entry : userlist privileges",
-"entry : USERALIAS useraliases",
-"entry : HOSTALIAS hostaliases",
-"entry : CMNDALIAS cmndaliases",
-"entry : RUNASALIAS runasaliases",
-"entry : DEFAULTS defaults_list",
-"entry : DEFAULTS_USER userlist defaults_list",
-"entry : DEFAULTS_RUNAS userlist defaults_list",
-"entry : DEFAULTS_HOST hostlist defaults_list",
-"entry : DEFAULTS_CMND cmndlist defaults_list",
-"defaults_list : defaults_entry",
-"defaults_list : defaults_list ',' defaults_entry",
-"defaults_entry : DEFVAR",
-"defaults_entry : '!' DEFVAR",
-"defaults_entry : DEFVAR '=' WORD",
-"defaults_entry : DEFVAR '+' WORD",
-"defaults_entry : DEFVAR '-' WORD",
-"privileges : privilege",
-"privileges : privileges ':' privilege",
-"privilege : hostlist '=' cmndspeclist",
-"ophost : host",
-"ophost : '!' host",
-"host : ALIAS",
-"host : ALL",
-"host : NETGROUP",
-"host : NTWKADDR",
-"host : WORD",
-"cmndspeclist : cmndspec",
-"cmndspeclist : cmndspeclist ',' cmndspec",
-"cmndspec : runasspec selinux solarisprivs cmndtag digcmnd",
-"digest : SHA224 ':' DIGEST",
-"digest : SHA256 ':' DIGEST",
-"digest : SHA384 ':' DIGEST",
-"digest : SHA512 ':' DIGEST",
-"digcmnd : opcmnd",
-"digcmnd : digest opcmnd",
-"opcmnd : cmnd",
-"opcmnd : '!' cmnd",
-"rolespec : ROLE '=' WORD",
-"typespec : TYPE '=' WORD",
-"selinux :",
-"selinux : rolespec",
-"selinux : typespec",
-"selinux : rolespec typespec",
-"selinux : typespec rolespec",
-"privsspec : PRIVS '=' WORD",
-"limitprivsspec : LIMITPRIVS '=' WORD",
-"solarisprivs :",
-"solarisprivs : privsspec",
-"solarisprivs : limitprivsspec",
-"solarisprivs : privsspec limitprivsspec",
-"solarisprivs : limitprivsspec privsspec",
-"runasspec :",
-"runasspec : '(' runaslist ')'",
-"runaslist :",
-"runaslist : userlist",
-"runaslist : userlist ':' grouplist",
-"runaslist : ':' grouplist",
-"runaslist : ':'",
-"cmndtag :",
-"cmndtag : cmndtag NOPASSWD",
-"cmndtag : cmndtag PASSWD",
-"cmndtag : cmndtag NOEXEC",
-"cmndtag : cmndtag EXEC",
-"cmndtag : cmndtag SETENV",
-"cmndtag : cmndtag NOSETENV",
-"cmndtag : cmndtag LOG_INPUT",
-"cmndtag : cmndtag NOLOG_INPUT",
-"cmndtag : cmndtag LOG_OUTPUT",
-"cmndtag : cmndtag NOLOG_OUTPUT",
-"cmnd : ALL",
-"cmnd : ALIAS",
-"cmnd : COMMAND",
-"hostaliases : hostalias",
-"hostaliases : hostaliases ':' hostalias",
-"hostalias : ALIAS '=' hostlist",
-"hostlist : ophost",
-"hostlist : hostlist ',' ophost",
-"cmndaliases : cmndalias",
-"cmndaliases : cmndaliases ':' cmndalias",
-"cmndalias : ALIAS '=' cmndlist",
-"cmndlist : digcmnd",
-"cmndlist : cmndlist ',' digcmnd",
-"runasaliases : runasalias",
-"runasaliases : runasaliases ':' runasalias",
-"runasalias : ALIAS '=' userlist",
-"useraliases : useralias",
-"useraliases : useraliases ':' useralias",
-"useralias : ALIAS '=' userlist",
-"userlist : opuser",
-"userlist : userlist ',' opuser",
-"opuser : user",
-"opuser : '!' user",
-"user : ALIAS",
-"user : ALL",
-"user : NETGROUP",
-"user : USERGROUP",
-"user : WORD",
-"grouplist : opgroup",
-"grouplist : grouplist ',' opgroup",
-"opgroup : group",
-"opgroup : '!' group",
-"group : ALIAS",
-"group : ALL",
-"group : WORD",
-};
+
+#if !defined _Noreturn \
+     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
+# if defined _MSC_VER && 1200 <= _MSC_VER
+#  define _Noreturn __declspec (noreturn)
+# else
+#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
+# endif
 #endif
-#ifdef YYSTACKSIZE
-#undef YYMAXDEPTH
-#define YYMAXDEPTH YYSTACKSIZE
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
 #else
-#ifdef YYMAXDEPTH
-#define YYSTACKSIZE YYMAXDEPTH
+# define YYUSE(E) /* empty */
+#endif
+
+#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
+/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
+    _Pragma ("GCC diagnostic push") \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
+    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
+    _Pragma ("GCC diagnostic pop")
 #else
-#define YYSTACKSIZE 10000
-#define YYMAXDEPTH 10000
+# define YY_INITIAL_VALUE(Value) Value
 #endif
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
+#endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
 #endif
-#define YYINITSTACKSIZE 200
-/* LINTUSED */
-int yydebug;
-int yynerrs;
-int yyerrflag;
-int yychar;
-short *yyssp;
-YYSTYPE *yyvsp;
-YYSTYPE yyval;
-YYSTYPE yylval;
-short *yyss;
-short *yysslim;
-YYSTYPE *yyvs;
-unsigned int yystacksize;
-#line 685 "gram.y"
-void
-sudoerserror(const char *s)
+
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's 'empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+             && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
 {
-    debug_decl(sudoerserror, SUDO_DEBUG_PARSER)
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
 
-    /* If we last saw a newline the error is on the preceding line. */
-    if (last_token == COMMENT)
-	sudolineno--;
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
 
-    /* Save the line the first error occurred on. */
-    if (errorlineno == -1) {
-	errorlineno = sudolineno;
-	errorfile = estrdup(sudoers);
-    }
-    if (sudoers_warnings && s != NULL) {
-	LEXTRACE("<*> ");
-#ifndef TRACELEXER
-	if (trace_print == NULL || trace_print == sudoers_trace_print) {
-	    const char fmt[] = ">>> %s: %s near line %d <<<\n";
-	    int oldlocale;
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
+    do                                                                  \
+      {                                                                 \
+        YYSIZE_T yynewbytes;                                            \
+        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
+        Stack = &yyptr->Stack_alloc;                                    \
+        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+        yyptr += yynewbytes / sizeof (*yyptr);                          \
+      }                                                                 \
+    while (0)
 
-	    /* Warnings are displayed in the user's locale. */
-	    sudoers_setlocale(SUDOERS_LOCALE_USER, &oldlocale);
-	    sudo_printf(SUDO_CONV_ERROR_MSG, _(fmt), sudoers, _(s), sudolineno);
-	    sudoers_setlocale(oldlocale, NULL);
-	}
 #endif
-    }
-    parse_error = true;
-    debug_return;
-}
 
-static struct defaults *
-new_default(char *var, char *val, int op)
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYSIZE_T yyi;                         \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (0)
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  66
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   222
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  52
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  41
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  114
+/* YYNSTATES -- Number of states.  */
+#define YYNSTATES  178
+
+/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
+   by yylex, with out-of-bounds checking.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   298
+
+#define YYTRANSLATE(YYX)                                                \
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex, without out-of-bounds checking.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    37,     2,     2,     2,     2,     2,     2,
+      40,    41,     2,    38,    36,    39,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    34,     2,
+       2,    35,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51
+};
+
+#if YYDEBUG
+  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
+static const yytype_uint16 yyrline[] =
 {
-    struct defaults *d;
-    debug_decl(new_default, SUDO_DEBUG_PARSER)
+       0,   184,   184,   185,   188,   189,   192,   195,   198,   201,
+     204,   207,   210,   213,   216,   219,   222,   225,   230,   231,
+     237,   240,   243,   246,   249,   254,   255,   261,   270,   274,
+     280,   283,   286,   289,   292,   297,   298,   341,   377,   380,
+     383,   386,   391,   394,   402,   406,   412,   417,   422,   426,
+     430,   434,   438,   444,   448,   453,   457,   461,   465,   469,
+     475,   478,   483,   488,   493,   498,   503,   510,   513,   516,
+     519,   522,   525,   528,   531,   534,   537,   540,   543,   546,
+     551,   554,   557,   565,   566,   569,   578,   579,   585,   586,
+     589,   598,   599,   605,   606,   609,   618,   619,   622,   631,
+     632,   638,   642,   648,   651,   654,   657,   660,   665,   666,
+     672,   676,   682,   685,   688
+};
+#endif
 
-    d = ecalloc(1, sizeof(struct defaults));
-    d->var = var;
-    d->val = val;
-    /* d->type = 0; */
-    d->op = op;
-    /* d->binding = NULL */
-    HLTQ_INIT(d, entries);
+#if YYDEBUG || YYERROR_VERBOSE || 0
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "COMMAND", "ALIAS", "DEFVAR", "NTWKADDR",
+  "NETGROUP", "USERGROUP", "WORD", "DIGEST", "DEFAULTS", "DEFAULTS_HOST",
+  "DEFAULTS_USER", "DEFAULTS_RUNAS", "DEFAULTS_CMND", "NOPASSWD", "PASSWD",
+  "NOEXEC", "EXEC", "SETENV", "NOSETENV", "LOG_INPUT", "NOLOG_INPUT",
+  "LOG_OUTPUT", "NOLOG_OUTPUT", "FOLLOW", "NOFOLLOW", "ALL", "COMMENT",
+  "HOSTALIAS", "CMNDALIAS", "USERALIAS", "RUNASALIAS", "':'", "'='", "','",
+  "'!'", "'+'", "'-'", "'('", "')'", "ERROR", "TYPE", "ROLE", "PRIVS",
+  "LIMITPRIVS", "MYSELF", "SHA224", "SHA256", "SHA384", "SHA512",
+  "$accept", "file", "line", "entry", "defaults_list", "defaults_entry",
+  "privileges", "privilege", "ophost", "host", "cmndspeclist", "cmndspec",
+  "digest", "digcmnd", "opcmnd", "rolespec", "typespec", "selinux",
+  "privsspec", "limitprivsspec", "solarisprivs", "runasspec", "runaslist",
+  "cmndtag", "cmnd", "hostaliases", "hostalias", "hostlist", "cmndaliases",
+  "cmndalias", "cmndlist", "runasaliases", "runasalias", "useraliases",
+  "useralias", "userlist", "opuser", "user", "grouplist", "opgroup",
+  "group", YY_NULLPTR
+};
+#endif
 
-    debug_return_ptr(d);
-}
+# ifdef YYPRINT
+/* YYTOKNUM[NUM] -- (External) token number corresponding to the
+   (internal) symbol number NUM (which must be that of a token).  */
+static const yytype_uint16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,    58,    61,    44,    33,    43,    45,
+      40,    41,   289,   290,   291,   292,   293,   294,   295,   296,
+     297,   298
+};
+# endif
 
-static struct member *
-new_member(char *name, int type)
+#define YYPACT_NINF -86
+
+#define yypact_value_is_default(Yystate) \
+  (!!((Yystate) == (-86)))
+
+#define YYTABLE_NINF -4
+
+#define yytable_value_is_error(Yytable_value) \
+  0
+
+  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+     STATE-NUM.  */
+static const yytype_int16 yypact[] =
+{
+      66,     8,   -86,   -86,   -86,   -86,    34,   118,   122,   122,
+       5,   -86,   -86,    26,    28,    30,    41,   140,    48,   106,
+     -86,     7,   -86,   -86,   -86,    52,    56,    29,   -86,   -86,
+     -86,   -86,   -86,   -86,   147,   -86,   -86,    10,    96,    96,
+     -86,   -86,   -86,    54,    38,    50,    59,    68,     3,   -86,
+     -86,   -86,   104,    33,    74,   -86,    65,    77,   -86,    81,
+      89,   -86,    93,   108,   -86,   -86,   -86,   -86,   122,   111,
+     -86,    69,   149,   158,   160,   -86,    34,   -86,   118,    29,
+      29,    29,   -86,   161,   162,   163,   164,   -86,     5,    29,
+     118,    26,     5,    28,   122,    30,   122,    41,   -86,   118,
+     130,   -86,   -86,   -86,   -86,   -86,   -86,   -86,   -86,   -86,
+     -86,   142,   -86,   143,   -86,   144,   -86,   144,   -86,   -86,
+      55,   145,   -86,   117,    32,   141,   -24,   130,   150,   151,
+     146,   139,   120,   -86,   -86,   -86,   148,   152,   -86,   -86,
+     -86,    32,   -86,   175,   178,   -86,   -86,   155,   156,   153,
+     157,   -86,   -86,    32,   152,   -86,   -86,   183,   184,   -86,
+     -86,     1,   -86,   -86,   -86,   -86,   -86,   -86,   -86,   -86,
+     -86,   -86,   -86,   -86,   -86,   -86,   -86,   -86
+};
+
+  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
+     Performed when YYTABLE does not specify something else to do.  Zero
+     means the default is an error.  */
+static const yytype_uint8 yydefact[] =
+{
+       0,     0,   103,   105,   106,   107,     0,     0,     0,     0,
+       0,   104,     6,     0,     0,     0,     0,     0,     0,     0,
+       4,     0,    99,   101,     7,    20,     0,    13,    18,    30,
+      33,    32,    34,    31,     0,    86,    28,     0,     0,     0,
+      82,    81,    80,     0,     0,     0,     0,     0,     0,    91,
+      42,    44,     0,     0,    10,    83,     0,    11,    88,     0,
+       9,    96,     0,    12,    93,   102,     1,     5,     0,     8,
+      25,     0,     0,     0,     0,    21,     0,    29,     0,    16,
+      14,    15,    45,     0,     0,     0,     0,    43,     0,    17,
+       0,     0,     0,     0,     0,     0,     0,     0,   100,     0,
+      60,    22,    23,    24,    19,    87,    38,    39,    40,    41,
+      92,    85,    84,    90,    89,    98,    97,    95,    94,    26,
+      62,    27,    35,    48,    66,     0,    63,    60,     0,     0,
+      49,    50,    55,   112,   114,   113,     0,    65,   108,   110,
+      61,     0,    36,     0,     0,    51,    52,     0,     0,    56,
+      57,    67,   111,     0,    64,    47,    46,     0,     0,    58,
+      59,     0,   109,    53,    54,    68,    69,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    37
+};
+
+  /* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
 {
-    struct member *m;
-    debug_decl(new_member, SUDO_DEBUG_PARSER)
+     -86,   -86,   -86,   176,   125,   121,   -86,    95,   123,   166,
+     -86,    71,   -86,   -85,   159,    72,    75,   -86,    46,    57,
+     -86,   -86,   -86,   -86,   165,   -86,   113,    -5,   -86,   116,
+     119,   -86,   115,   -86,   124,    -8,   154,   193,    73,    60,
+      79
+};
 
-    m = ecalloc(1, sizeof(struct member));
-    m->name = name;
-    m->type = type;
-    HLTQ_INIT(m, entries);
+  /* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,    18,    19,    20,    27,    28,    69,    70,    35,    36,
+     121,   122,    48,    49,    50,   130,   131,   132,   149,   150,
+     151,   123,   125,   161,    51,    54,    55,    71,    57,    58,
+      52,    63,    64,    60,    61,    21,    22,    23,   137,   138,
+     139
+};
 
-    debug_return_ptr(m);
-}
+  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
+     positive, shift that token.  If negative, reduce the rule whose
+     number is the opposite.  If YYTABLE_NINF, syntax error.  */
+static const yytype_int16 yytable[] =
+{
+      38,    39,    37,   110,    40,    41,    40,    41,    40,    41,
+     141,    29,    68,    30,    31,    25,    32,   165,   166,   167,
+     168,   169,   170,   171,   172,   173,   174,   175,   176,    42,
+      53,    42,    56,    42,    59,    33,   133,    24,    43,    25,
+      43,   134,    43,    68,    34,    62,    78,    26,    66,    44,
+      45,    46,    47,    44,    45,    46,    47,    40,    41,     2,
+     135,    75,     3,     4,     5,    76,    -2,     1,    90,   136,
+       2,    26,    83,     3,     4,     5,   177,     6,     7,     8,
+       9,    10,    42,    11,    84,   111,   115,    72,   117,   124,
+      73,    74,    17,    85,    11,    12,    13,    14,    15,    16,
+      92,    25,    86,    17,   100,    78,    -3,     1,    91,    25,
+       2,    93,   126,     3,     4,     5,    94,     6,     7,     8,
+       9,    10,    29,    95,    30,    31,     2,    32,    96,     3,
+       4,     5,    68,    26,    11,    12,    13,    14,    15,    16,
+      88,    26,    97,    17,     2,    99,    33,     3,     4,     5,
+      11,    29,   133,    30,    31,    34,    32,   134,   101,    17,
+     128,   129,    79,    80,    81,   147,   148,   102,    11,   103,
+     120,   106,   107,   108,   109,    33,   135,    89,    78,    88,
+      68,   127,   140,   129,   155,   143,   144,   156,   153,   128,
+     157,   158,   163,   164,   119,    67,   160,   104,   142,   148,
+      77,   105,   147,   146,   112,   145,   159,    87,    82,   114,
+      65,   113,   118,   162,   154,   152,     0,     0,     0,   116,
+       0,     0,    98
+};
 
-struct sudo_digest *
-new_digest(int digest_type, const char *digest_str)
+static const yytype_int16 yycheck[] =
 {
-    struct sudo_digest *dig;
-    debug_decl(new_digest, SUDO_DEBUG_PARSER)
+       8,     9,     7,    88,     3,     4,     3,     4,     3,     4,
+      34,     4,    36,     6,     7,     5,     9,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+       4,    28,     4,    28,     4,    28,     4,    29,    37,     5,
+      37,     9,    37,    36,    37,     4,    36,    37,     0,    48,
+      49,    50,    51,    48,    49,    50,    51,     3,     4,     4,
+      28,     5,     7,     8,     9,    36,     0,     1,    35,    37,
+       4,    37,    34,     7,     8,     9,   161,    11,    12,    13,
+      14,    15,    28,    28,    34,    90,    94,    35,    96,    34,
+      38,    39,    37,    34,    28,    29,    30,    31,    32,    33,
+      35,     5,    34,    37,    35,    36,     0,     1,    34,     5,
+       4,    34,   120,     7,     8,     9,    35,    11,    12,    13,
+      14,    15,     4,    34,     6,     7,     4,     9,    35,     7,
+       8,     9,    36,    37,    28,    29,    30,    31,    32,    33,
+      36,    37,    34,    37,     4,    34,    28,     7,     8,     9,
+      28,     4,     4,     6,     7,    37,     9,     9,     9,    37,
+      43,    44,    37,    38,    39,    45,    46,     9,    28,     9,
+      40,    10,    10,    10,    10,    28,    28,    52,    36,    36,
+      36,    36,    41,    44,     9,    35,    35,     9,    36,    43,
+      35,    35,     9,     9,    99,    19,   150,    76,   127,    46,
+      34,    78,    45,   131,    91,   130,   149,    48,    43,    93,
+      17,    92,    97,   153,   141,   136,    -1,    -1,    -1,    95,
+      -1,    -1,    68
+};
 
-    dig = emalloc(sizeof(*dig));
-    dig->digest_type = digest_type;
-    dig->digest_str = estrdup(digest_str);
+  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+     symbol of state STATE-NUM.  */
+static const yytype_uint8 yystos[] =
+{
+       0,     1,     4,     7,     8,     9,    11,    12,    13,    14,
+      15,    28,    29,    30,    31,    32,    33,    37,    53,    54,
+      55,    87,    88,    89,    29,     5,    37,    56,    57,     4,
+       6,     7,     9,    28,    37,    60,    61,    79,    87,    87,
+       3,     4,    28,    37,    48,    49,    50,    51,    64,    65,
+      66,    76,    82,     4,    77,    78,     4,    80,    81,     4,
+      85,    86,     4,    83,    84,    89,     0,    55,    36,    58,
+      59,    79,    35,    38,    39,     5,    36,    61,    36,    56,
+      56,    56,    76,    34,    34,    34,    34,    66,    36,    56,
+      35,    34,    35,    34,    35,    34,    35,    34,    88,    34,
+      35,     9,     9,     9,    57,    60,    10,    10,    10,    10,
+      65,    79,    78,    82,    81,    87,    86,    87,    84,    59,
+      40,    62,    63,    73,    34,    74,    87,    36,    43,    44,
+      67,    68,    69,     4,     9,    28,    37,    90,    91,    92,
+      41,    34,    63,    35,    35,    68,    67,    45,    46,    70,
+      71,    72,    92,    36,    90,     9,     9,    35,    35,    71,
+      70,    75,    91,     9,     9,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    65
+};
 
-    debug_return_ptr(dig);
-}
+  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_uint8 yyr1[] =
+{
+       0,    52,    53,    53,    54,    54,    55,    55,    55,    55,
+      55,    55,    55,    55,    55,    55,    55,    55,    56,    56,
+      57,    57,    57,    57,    57,    58,    58,    59,    60,    60,
+      61,    61,    61,    61,    61,    62,    62,    63,    64,    64,
+      64,    64,    65,    65,    66,    66,    67,    68,    69,    69,
+      69,    69,    69,    70,    71,    72,    72,    72,    72,    72,
+      73,    73,    74,    74,    74,    74,    74,    75,    75,    75,
+      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
+      76,    76,    76,    77,    77,    78,    79,    79,    80,    80,
+      81,    82,    82,    83,    83,    84,    85,    85,    86,    87,
+      87,    88,    88,    89,    89,    89,    89,    89,    90,    90,
+      91,    91,    92,    92,    92
+};
 
-/*
- * Add a list of defaults structures to the defaults list.
- * The binding, if non-NULL, specifies a list of hosts, users, or
- * runas users the entries apply to (specified by the type).
- */
-static void
-add_defaults(int type, struct member *bmem, struct defaults *defs)
+  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
+static const yytype_uint8 yyr2[] =
 {
-    struct defaults *d;
-    struct member_list *binding;
-    debug_decl(add_defaults, SUDO_DEBUG_PARSER)
+       0,     2,     0,     1,     1,     2,     1,     2,     2,     2,
+       2,     2,     2,     2,     3,     3,     3,     3,     1,     3,
+       1,     2,     3,     3,     3,     1,     3,     3,     1,     2,
+       1,     1,     1,     1,     1,     1,     3,     5,     3,     3,
+       3,     3,     1,     2,     1,     2,     3,     3,     0,     1,
+       1,     2,     2,     3,     3,     0,     1,     1,     2,     2,
+       0,     3,     0,     1,     3,     2,     1,     0,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       1,     1,     1,     1,     3,     3,     1,     3,     1,     3,
+       3,     1,     3,     1,     3,     3,     1,     3,     3,     1,
+       3,     1,     2,     1,     1,     1,     1,     1,     1,     3,
+       1,     2,     1,     1,     1
+};
 
-    if (defs != NULL) {
-	/*
-	 * We use a single binding for each entry in defs.
-	 */
-	binding = emalloc(sizeof(*binding));
-	if (bmem != NULL)
-	    HLTQ_TO_TAILQ(binding, bmem, entries);
-	else
-	    TAILQ_INIT(binding);
 
-	/*
-	 * Set type and binding (who it applies to) for new entries.
-	 * Then add to the global defaults list.
-	 */
-	HLTQ_FOREACH(d, defs, entries) {
-	    d->type = type;
-	    d->binding = binding;
-	}
-	TAILQ_CONCAT_HLTQ(&defaults, defs, entries);
-    }
+#define yyerrok         (yyerrstatus = 0)
+#define yyclearin       (yychar = YYEMPTY)
+#define YYEMPTY         (-2)
+#define YYEOF           0
+
+#define YYACCEPT        goto yyacceptlab
+#define YYABORT         goto yyabortlab
+#define YYERROR         goto yyerrorlab
+
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)                                  \
+do                                                              \
+  if (yychar == YYEMPTY)                                        \
+    {                                                           \
+      yychar = (Token);                                         \
+      yylval = (Value);                                         \
+      YYPOPSTACK (yylen);                                       \
+      yystate = *yyssp;                                         \
+      goto yybackup;                                            \
+    }                                                           \
+  else                                                          \
+    {                                                           \
+      yyerror (YY_("syntax error: cannot back up")); \
+      YYERROR;                                                  \
+    }                                                           \
+while (0)
+
+/* Error token number */
+#define YYTERROR        1
+#define YYERRCODE       256
 
-    debug_return;
-}
 
-/*
- * Allocate a new struct userspec, populate it, and insert it at the
- * end of the userspecs list.
- */
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)                        \
+do {                                            \
+  if (yydebug)                                  \
+    YYFPRINTF Args;                             \
+} while (0)
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
+do {                                                                      \
+  if (yydebug)                                                            \
+    {                                                                     \
+      YYFPRINTF (stderr, "%s ", Title);                                   \
+      yy_symbol_print (stderr,                                            \
+                  Type, Value); \
+      YYFPRINTF (stderr, "\n");                                           \
+    }                                                                     \
+} while (0)
+
+
+/*----------------------------------------.
+| Print this symbol's value on YYOUTPUT.  |
+`----------------------------------------*/
+
 static void
-add_userspec(struct member *members, struct privilege *privs)
+yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
 {
-    struct userspec *u;
-    debug_decl(add_userspec, SUDO_DEBUG_PARSER)
+  FILE *yyo = yyoutput;
+  YYUSE (yyo);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# endif
+  YYUSE (yytype);
+}
 
-    u = ecalloc(1, sizeof(*u));
-    HLTQ_TO_TAILQ(&u->users, members, entries);
-    HLTQ_TO_TAILQ(&u->privileges, privs, entries);
-    TAILQ_INSERT_TAIL(&userspecs, u, entries);
 
-    debug_return;
-}
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
 
-/*
- * Free up space used by data structures from a previous parser run and sets
- * the current sudoers file to path.
- */
-void
-init_parser(const char *path, bool quiet)
+static void
+yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
 {
-    struct member_list *binding;
-    struct defaults *d, *d_next;
-    struct userspec *us, *us_next;
-    debug_decl(init_parser, SUDO_DEBUG_PARSER)
+  YYFPRINTF (yyoutput, "%s %s (",
+             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
 
-    TAILQ_FOREACH_SAFE(us, &userspecs, entries, us_next) {
-	struct member *m, *m_next;
-	struct privilege *priv, *priv_next;
+  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
+  YYFPRINTF (yyoutput, ")");
+}
 
-	TAILQ_FOREACH_SAFE(m, &us->users, entries, m_next) {
-	    efree(m->name);
-	    efree(m);
-	}
-	TAILQ_FOREACH_SAFE(priv, &us->privileges, entries, priv_next) {
-	    struct member_list *runasuserlist = NULL, *runasgrouplist = NULL;
-	    struct cmndspec *cs, *cs_next;
-#ifdef HAVE_SELINUX
-	    char *role = NULL, *type = NULL;
-#endif /* HAVE_SELINUX */
-#ifdef HAVE_PRIV_SET
-	    char *privs = NULL, *limitprivs = NULL;
-#endif /* HAVE_PRIV_SET */
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
 
-	    TAILQ_FOREACH_SAFE(m, &priv->hostlist, entries, m_next) {
-		efree(m->name);
-		efree(m);
-	    }
-	    TAILQ_FOREACH_SAFE(cs, &priv->cmndlist, entries, cs_next) {
-#ifdef HAVE_SELINUX
-		/* Only free the first instance of a role/type. */
-		if (cs->role != role) {
-		    role = cs->role;
-		    efree(cs->role);
-		}
-		if (cs->type != type) {
-		    type = cs->type;
-		    efree(cs->type);
-		}
-#endif /* HAVE_SELINUX */
-#ifdef HAVE_PRIV_SET
-		/* Only free the first instance of privs/limitprivs. */
-		if (cs->privs != privs) {
-		    privs = cs->privs;
-		    efree(cs->privs);
-		}
-		if (cs->limitprivs != limitprivs) {
-		    limitprivs = cs->limitprivs;
-		    efree(cs->limitprivs);
-		}
-#endif /* HAVE_PRIV_SET */
-		/* Only free the first instance of runas user/group lists. */
-		if (cs->runasuserlist && cs->runasuserlist != runasuserlist) {
-		    runasuserlist = cs->runasuserlist;
-		    TAILQ_FOREACH_SAFE(m, runasuserlist, entries, m_next) {
-			efree(m->name);
-			efree(m);
-		    }
-		    efree(runasuserlist);
-		}
-		if (cs->runasgrouplist && cs->runasgrouplist != runasgrouplist) {
-		    runasgrouplist = cs->runasgrouplist;
-		    TAILQ_FOREACH_SAFE(m, runasgrouplist, entries, m_next) {
-			efree(m->name);
-			efree(m);
-		    }
-		    efree(runasgrouplist);
-		}
-		if (cs->cmnd->type == COMMAND) {
-			struct sudo_command *c =
-			    (struct sudo_command *) cs->cmnd->name;
-			efree(c->cmnd);
-			efree(c->args);
-		}
-		efree(cs->cmnd->name);
-		efree(cs->cmnd);
-		efree(cs);
-	    }
-	    efree(priv);
-	}
-	efree(us);
+static void
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
     }
-    TAILQ_INIT(&userspecs);
+  YYFPRINTF (stderr, "\n");
+}
 
-    binding = NULL;
-    TAILQ_FOREACH_SAFE(d, &defaults, entries, d_next) {
-	if (d->binding != binding) {
-	    struct member *m, *m_next;
+# define YY_STACK_PRINT(Bottom, Top)                            \
+do {                                                            \
+  if (yydebug)                                                  \
+    yy_stack_print ((Bottom), (Top));                           \
+} while (0)
 
-	    binding = d->binding;
-	    TAILQ_FOREACH_SAFE(m, d->binding, entries, m_next) {
-		if (m->type == COMMAND) {
-			struct sudo_command *c =
-			    (struct sudo_command *) m->name;
-			efree(c->cmnd);
-			efree(c->args);
-		}
-		efree(m->name);
-		efree(m);
-	    }
-	    efree(d->binding);
-	}
-	efree(d->var);
-	efree(d->val);
-	efree(d);
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+static void
+yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)
+{
+  unsigned long int yylno = yyrline[yyrule];
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+             yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr,
+                       yystos[yyssp[yyi + 1 - yynrhs]],
+                       &(yyvsp[(yyi + 1) - (yynrhs)])
+                                              );
+      YYFPRINTF (stderr, "\n");
     }
-    TAILQ_INIT(&defaults);
+}
 
-    init_aliases();
+# define YY_REDUCE_PRINT(Rule)          \
+do {                                    \
+  if (yydebug)                          \
+    yy_reduce_print (yyssp, yyvsp, Rule); \
+} while (0)
 
-    init_lexer();
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
 
-    efree(sudoers);
-    sudoers = path ? estrdup(path) : NULL;
 
-    parse_error = false;
-    errorlineno = -1;
-    errorfile = sudoers;
-    sudoers_warnings = !quiet;
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
 
-    debug_return;
-}
-#line 906 "gram.c"
-/* allocate initial stack or double stack size, up to YYMAXDEPTH */
-#if defined(__cplusplus) || defined(__STDC__)
-static int yygrowstack(void)
-#else
-static int yygrowstack()
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
 #endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+static YYSIZE_T
+yystrlen (const char *yystr)
 {
-    unsigned int newsize;
-    long sslen;
-    short *newss;
-    YYSTYPE *newvs;
-
-    if ((newsize = yystacksize) == 0)
-        newsize = YYINITSTACKSIZE;
-    else if (newsize >= YYMAXDEPTH)
-        return -1;
-    else if ((newsize *= 2) > YYMAXDEPTH)
-        newsize = YYMAXDEPTH;
-#ifdef SIZE_MAX
-#define YY_SIZE_MAX SIZE_MAX
-#else
-#ifdef __STDC__
-#define YY_SIZE_MAX 0xffffffffU
-#else
-#define YY_SIZE_MAX (unsigned int)0xffffffff
-#endif
-#endif
-    if (YY_SIZE_MAX / newsize < sizeof *newss)
-        goto bail;
-    sslen = yyssp - yyss;
-    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
-      (short *)malloc(newsize * sizeof *newss); /* overflow check above */
-    if (newss == NULL)
-        goto bail;
-    yyss = newss;
-    yyssp = newss + sslen;
-    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
-      (YYSTYPE *)malloc(newsize * sizeof *newvs); /* overflow check above */
-    if (newvs == NULL)
-        goto bail;
-    yyvs = newvs;
-    yyvsp = newvs + sslen;
-    yystacksize = newsize;
-    yysslim = yyss + newsize - 1;
-    return 0;
-bail:
-    if (yyss)
-            free(yyss);
-    if (yyvs)
-            free(yyvs);
-    yyss = yyssp = NULL;
-    yyvs = yyvsp = NULL;
-    yystacksize = 0;
-    return -1;
+  YYSIZE_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
 }
+#  endif
+# endif
 
-#define YYABORT goto yyabort
-#define YYREJECT goto yyabort
-#define YYACCEPT goto yyaccept
-#define YYERROR goto yyerrlab
-int
-#if defined(__cplusplus) || defined(__STDC__)
-yyparse(void)
-#else
-yyparse()
-#endif
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+yystpcpy (char *yydest, const char *yysrc)
 {
-    int yym, yyn, yystate;
-#if YYDEBUG
-#if defined(__cplusplus) || defined(__STDC__)
-    const char *yys;
-#else /* !(defined(__cplusplus) || defined(__STDC__)) */
-    char *yys;
-#endif /* !(defined(__cplusplus) || defined(__STDC__)) */
-
-    if ((yys = getenv("YYDEBUG")))
-    {
-        yyn = *yys;
-        if (yyn >= '0' && yyn <= '9')
-            yydebug = yyn - '0';
-    }
-#endif /* YYDEBUG */
-
-    yynerrs = 0;
-    yyerrflag = 0;
-    yychar = (-1);
-
-    if (yyss == NULL && yygrowstack()) goto yyoverflow;
-    yyssp = yyss;
-    yyvsp = yyvs;
-    *yyssp = yystate = 0;
-
-yyloop:
-    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
-    if (yychar < 0)
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYSIZE_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
     {
-        if ((yychar = yylex()) < 0) yychar = 0;
-#if YYDEBUG
-        if (yydebug)
-        {
-            yys = 0;
-            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
-            if (!yys) yys = "illegal-symbol";
-            printf("%sdebug: state %d, reading %d (%s)\n",
-                    YYPREFIX, yystate, yychar, yys);
-        }
-#endif
+      YYSIZE_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+        switch (*++yyp)
+          {
+          case '\'':
+          case ',':
+            goto do_not_strip_quotes;
+
+          case '\\':
+            if (*++yyp != '\\')
+              goto do_not_strip_quotes;
+            /* Fall through.  */
+          default:
+            if (yyres)
+              yyres[yyn] = *yyp;
+            yyn++;
+            break;
+
+          case '"':
+            if (yyres)
+              yyres[yyn] = '\0';
+            return yyn;
+          }
+    do_not_strip_quotes: ;
     }
-    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
-            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
-    {
-#if YYDEBUG
-        if (yydebug)
-            printf("%sdebug: state %d, shifting to state %d\n",
-                    YYPREFIX, yystate, yytable[yyn]);
-#endif
-        if (yyssp >= yysslim && yygrowstack())
-        {
-            goto yyoverflow;
-        }
-        *++yyssp = yystate = yytable[yyn];
-        *++yyvsp = yylval;
-        yychar = (-1);
-        if (yyerrflag > 0)  --yyerrflag;
-        goto yyloop;
-    }
-    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
-            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
-    {
-        yyn = yytable[yyn];
-        goto yyreduce;
-    }
-    if (yyerrflag) goto yyinrecovery;
-#if defined(lint) || defined(__GNUC__)
-    goto yynewerror;
-#endif
-yynewerror:
-    yyerror("syntax error");
-#if defined(lint) || defined(__GNUC__)
-    goto yyerrlab;
-#endif
-yyerrlab:
-    ++yynerrs;
-yyinrecovery:
-    if (yyerrflag < 3)
+
+  if (! yyres)
+    return yystrlen (yystr);
+
+  return yystpcpy (yyres, yystr) - yyres;
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
+{
+  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULLPTR;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
     {
-        yyerrflag = 3;
-        for (;;)
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
         {
-            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
-                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
-            {
-#if YYDEBUG
-                if (yydebug)
-                    printf("%sdebug: state %d, error recovery shifting\
- to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
-#endif
-                if (yyssp >= yysslim && yygrowstack())
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
                 {
-                    goto yyoverflow;
+                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
+                  if (! (yysize <= yysize1
+                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                    return 2;
+                  yysize = yysize1;
                 }
-                *++yyssp = yystate = yytable[yyn];
-                *++yyvsp = yylval;
-                goto yyloop;
-            }
-            else
-            {
-#if YYDEBUG
-                if (yydebug)
-                    printf("%sdebug: error recovery discarding state %d\n",
-                            YYPREFIX, *yyssp);
-#endif
-                if (yyssp <= yyss) goto yyabort;
-                --yyssp;
-                --yyvsp;
-            }
+              }
         }
     }
-    else
+
+  switch (yycount)
     {
-        if (yychar == 0) goto yyabort;
-#if YYDEBUG
-        if (yydebug)
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  {
+    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
+    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+      return 2;
+    yysize = yysize1;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
         {
-            yys = 0;
-            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
-            if (!yys) yys = "illegal-symbol";
-            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
-                    YYPREFIX, yystate, yychar, yys);
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
         }
-#endif
-        yychar = (-1);
-        goto yyloop;
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+{
+  YYUSE (yyvaluep);
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+
+
+/* The lookahead symbol.  */
+int yychar;
+
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval;
+/* Number of syntax errors so far.  */
+int yynerrs;
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+int
+yyparse (void)
+{
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       'yyss': related to states.
+       'yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
+
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+ yysetstate:
+  *yyssp = yystate;
+
+  if (yyss + yystacksize - 1 <= yyssp)
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYSIZE_T yysize = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      {
+        /* Give user a chance to reallocate the stack.  Use copies of
+           these so that the &'s don't force the real ones into
+           memory.  */
+        YYSTYPE *yyvs1 = yyvs;
+        yytype_int16 *yyss1 = yyss;
+
+        /* Each stack pointer address is followed by the size of the
+           data in use in that stack, in bytes.  This used to be a
+           conditional around just the two extra args, but that might
+           be undefined if yyoverflow is a macro.  */
+        yyoverflow (YY_("memory exhausted"),
+                    &yyss1, yysize * sizeof (*yyssp),
+                    &yyvs1, yysize * sizeof (*yyvsp),
+                    &yystacksize);
+
+        yyss = yyss1;
+        yyvs = yyvs1;
+      }
+#else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyexhaustedlab;
+# else
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+        goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+        yystacksize = YYMAXDEPTH;
+
+      {
+        yytype_int16 *yyss1 = yyss;
+        union yyalloc *yyptr =
+          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+        if (! yyptr)
+          goto yyexhaustedlab;
+        YYSTACK_RELOCATE (yyss_alloc, yyss);
+        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+#  undef YYSTACK_RELOCATE
+        if (yyss1 != yyssa)
+          YYSTACK_FREE (yyss1);
+      }
+# endif
+#endif /* no yyoverflow */
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+                  (unsigned long int) yystacksize));
+
+      if (yyss + yystacksize - 1 <= yyssp)
+        YYABORT;
+    }
+
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = yylex ();
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
 yyreduce:
-#if YYDEBUG
-    if (yydebug)
-        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
-                YYPREFIX, yystate, yyn, yyrule[yyn]);
-#endif
-    yym = yylen[yyn];
-    if (yym)
-        yyval = yyvsp[1-yym];
-    else
-        memset(&yyval, 0, sizeof yyval);
-    switch (yyn)
-    {
-case 1:
-#line 182 "gram.y"
-{ ; }
-break;
-case 5:
-#line 190 "gram.y"
-{
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     '$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 2:
+#line 184 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    { ; }
+#line 1545 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 6:
+#line 192 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    ;
 			}
-break;
-case 6:
-#line 193 "gram.y"
-{
+#line 1553 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 7:
+#line 195 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    yyerrok;
 			}
-break;
-case 7:
-#line 196 "gram.y"
-{
-			    add_userspec(yyvsp[-1].member, yyvsp[0].privilege);
-			}
-break;
-case 8:
-#line 199 "gram.y"
-{
+#line 1561 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 8:
+#line 198 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    add_userspec((yyvsp[-1].member), (yyvsp[0].privilege));
+			}
+#line 1569 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 9:
+#line 201 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    ;
 			}
-break;
-case 9:
-#line 202 "gram.y"
-{
+#line 1577 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 10:
+#line 204 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    ;
 			}
-break;
-case 10:
-#line 205 "gram.y"
-{
+#line 1585 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 11:
+#line 207 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    ;
 			}
-break;
-case 11:
-#line 208 "gram.y"
-{
+#line 1593 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 12:
+#line 210 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    ;
 			}
-break;
-case 12:
-#line 211 "gram.y"
-{
-			    add_defaults(DEFAULTS, NULL, yyvsp[0].defaults);
+#line 1601 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 13:
+#line 213 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    add_defaults(DEFAULTS, NULL, (yyvsp[0].defaults));
 			}
-break;
-case 13:
-#line 214 "gram.y"
-{
-			    add_defaults(DEFAULTS_USER, yyvsp[-1].member, yyvsp[0].defaults);
+#line 1609 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 14:
+#line 216 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    add_defaults(DEFAULTS_USER, (yyvsp[-1].member), (yyvsp[0].defaults));
 			}
-break;
-case 14:
-#line 217 "gram.y"
-{
-			    add_defaults(DEFAULTS_RUNAS, yyvsp[-1].member, yyvsp[0].defaults);
+#line 1617 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 15:
+#line 219 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    add_defaults(DEFAULTS_RUNAS, (yyvsp[-1].member), (yyvsp[0].defaults));
 			}
-break;
-case 15:
-#line 220 "gram.y"
-{
-			    add_defaults(DEFAULTS_HOST, yyvsp[-1].member, yyvsp[0].defaults);
+#line 1625 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 16:
+#line 222 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    add_defaults(DEFAULTS_HOST, (yyvsp[-1].member), (yyvsp[0].defaults));
 			}
-break;
-case 16:
-#line 223 "gram.y"
-{
-			    add_defaults(DEFAULTS_CMND, yyvsp[-1].member, yyvsp[0].defaults);
+#line 1633 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 17:
+#line 225 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    add_defaults(DEFAULTS_CMND, (yyvsp[-1].member), (yyvsp[0].defaults));
 			}
-break;
-case 18:
-#line 229 "gram.y"
-{
-			    HLTQ_CONCAT(yyvsp[-2].defaults, yyvsp[0].defaults, entries);
-			    yyval.defaults = yyvsp[-2].defaults;
+#line 1641 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 19:
+#line 231 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    HLTQ_CONCAT((yyvsp[-2].defaults), (yyvsp[0].defaults), entries);
+			    (yyval.defaults) = (yyvsp[-2].defaults);
 			}
-break;
-case 19:
-#line 235 "gram.y"
-{
-			    yyval.defaults = new_default(yyvsp[0].string, NULL, true);
+#line 1650 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 20:
+#line 237 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.defaults) = new_default((yyvsp[0].string), NULL, true);
 			}
-break;
-case 20:
-#line 238 "gram.y"
-{
-			    yyval.defaults = new_default(yyvsp[0].string, NULL, false);
+#line 1658 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 21:
+#line 240 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.defaults) = new_default((yyvsp[0].string), NULL, false);
 			}
-break;
-case 21:
-#line 241 "gram.y"
-{
-			    yyval.defaults = new_default(yyvsp[-2].string, yyvsp[0].string, true);
+#line 1666 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 22:
+#line 243 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.defaults) = new_default((yyvsp[-2].string), (yyvsp[0].string), true);
 			}
-break;
-case 22:
-#line 244 "gram.y"
-{
-			    yyval.defaults = new_default(yyvsp[-2].string, yyvsp[0].string, '+');
+#line 1674 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 23:
+#line 246 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.defaults) = new_default((yyvsp[-2].string), (yyvsp[0].string), '+');
 			}
-break;
-case 23:
-#line 247 "gram.y"
-{
-			    yyval.defaults = new_default(yyvsp[-2].string, yyvsp[0].string, '-');
+#line 1682 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 24:
+#line 249 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.defaults) = new_default((yyvsp[-2].string), (yyvsp[0].string), '-');
 			}
-break;
-case 25:
-#line 253 "gram.y"
-{
-			    HLTQ_CONCAT(yyvsp[-2].privilege, yyvsp[0].privilege, entries);
-			    yyval.privilege = yyvsp[-2].privilege;
+#line 1690 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 26:
+#line 255 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    HLTQ_CONCAT((yyvsp[-2].privilege), (yyvsp[0].privilege), entries);
+			    (yyval.privilege) = (yyvsp[-2].privilege);
 			}
-break;
-case 26:
-#line 259 "gram.y"
-{
+#line 1699 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 27:
+#line 261 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    struct privilege *p = ecalloc(1, sizeof(*p));
-			    HLTQ_TO_TAILQ(&p->hostlist, yyvsp[-2].member, entries);
-			    HLTQ_TO_TAILQ(&p->cmndlist, yyvsp[0].cmndspec, entries);
+			    HLTQ_TO_TAILQ(&p->hostlist, (yyvsp[-2].member), entries);
+			    HLTQ_TO_TAILQ(&p->cmndlist, (yyvsp[0].cmndspec), entries);
 			    HLTQ_INIT(p, entries);
-			    yyval.privilege = p;
+			    (yyval.privilege) = p;
 			}
-break;
-case 27:
-#line 268 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = false;
+#line 1711 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 28:
+#line 270 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = false;
 			}
-break;
-case 28:
-#line 272 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = true;
+#line 1720 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 29:
+#line 274 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = true;
 			}
-break;
-case 29:
-#line 278 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, ALIAS);
+#line 1729 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 30:
+#line 280 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), ALIAS);
 			}
-break;
-case 30:
-#line 281 "gram.y"
-{
-			    yyval.member = new_member(NULL, ALL);
+#line 1737 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 31:
+#line 283 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member(NULL, ALL);
 			}
-break;
-case 31:
-#line 284 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, NETGROUP);
+#line 1745 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 32:
+#line 286 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), NETGROUP);
 			}
-break;
-case 32:
-#line 287 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, NTWKADDR);
+#line 1753 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 33:
+#line 289 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), NTWKADDR);
 			}
-break;
-case 33:
-#line 290 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, WORD);
+#line 1761 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 34:
+#line 292 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), WORD);
 			}
-break;
-case 35:
-#line 296 "gram.y"
-{
+#line 1769 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 36:
+#line 298 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    struct cmndspec *prev;
-			    prev = HLTQ_LAST(yyvsp[-2].cmndspec, cmndspec, entries);
-			    HLTQ_CONCAT(yyvsp[-2].cmndspec, yyvsp[0].cmndspec, entries);
+			    prev = HLTQ_LAST((yyvsp[-2].cmndspec), cmndspec, entries);
+			    HLTQ_CONCAT((yyvsp[-2].cmndspec), (yyvsp[0].cmndspec), entries);
 #ifdef HAVE_SELINUX
 			    /* propagate role and type */
-			    if (yyvsp[0].cmndspec->role == NULL)
-				yyvsp[0].cmndspec->role = prev->role;
-			    if (yyvsp[0].cmndspec->type == NULL)
-				yyvsp[0].cmndspec->type = prev->type;
+			    if ((yyvsp[0].cmndspec)->role == NULL)
+				(yyvsp[0].cmndspec)->role = prev->role;
+			    if ((yyvsp[0].cmndspec)->type == NULL)
+				(yyvsp[0].cmndspec)->type = prev->type;
 #endif /* HAVE_SELINUX */
 #ifdef HAVE_PRIV_SET
 			    /* propagate privs & limitprivs */
-			    if (yyvsp[0].cmndspec->privs == NULL)
-			        yyvsp[0].cmndspec->privs = prev->privs;
-			    if (yyvsp[0].cmndspec->limitprivs == NULL)
-			        yyvsp[0].cmndspec->limitprivs = prev->limitprivs;
+			    if ((yyvsp[0].cmndspec)->privs == NULL)
+			        (yyvsp[0].cmndspec)->privs = prev->privs;
+			    if ((yyvsp[0].cmndspec)->limitprivs == NULL)
+			        (yyvsp[0].cmndspec)->limitprivs = prev->limitprivs;
 #endif /* HAVE_PRIV_SET */
 			    /* propagate tags and runas list */
-			    if (yyvsp[0].cmndspec->tags.nopasswd == UNSPEC)
-				yyvsp[0].cmndspec->tags.nopasswd = prev->tags.nopasswd;
-			    if (yyvsp[0].cmndspec->tags.noexec == UNSPEC)
-				yyvsp[0].cmndspec->tags.noexec = prev->tags.noexec;
-			    if (yyvsp[0].cmndspec->tags.setenv == UNSPEC &&
+			    if ((yyvsp[0].cmndspec)->tags.nopasswd == UNSPEC)
+				(yyvsp[0].cmndspec)->tags.nopasswd = prev->tags.nopasswd;
+			    if ((yyvsp[0].cmndspec)->tags.noexec == UNSPEC)
+				(yyvsp[0].cmndspec)->tags.noexec = prev->tags.noexec;
+			    if ((yyvsp[0].cmndspec)->tags.setenv == UNSPEC &&
 				prev->tags.setenv != IMPLIED)
-				yyvsp[0].cmndspec->tags.setenv = prev->tags.setenv;
-			    if (yyvsp[0].cmndspec->tags.log_input == UNSPEC)
-				yyvsp[0].cmndspec->tags.log_input = prev->tags.log_input;
-			    if (yyvsp[0].cmndspec->tags.log_output == UNSPEC)
-				yyvsp[0].cmndspec->tags.log_output = prev->tags.log_output;
-			    if ((yyvsp[0].cmndspec->runasuserlist == NULL &&
-				 yyvsp[0].cmndspec->runasgrouplist == NULL) &&
+				(yyvsp[0].cmndspec)->tags.setenv = prev->tags.setenv;
+			    if ((yyvsp[0].cmndspec)->tags.log_input == UNSPEC)
+				(yyvsp[0].cmndspec)->tags.log_input = prev->tags.log_input;
+			    if ((yyvsp[0].cmndspec)->tags.log_output == UNSPEC)
+				(yyvsp[0].cmndspec)->tags.log_output = prev->tags.log_output;
+			    if ((yyvsp[0].cmndspec)->tags.follow == UNSPEC)
+				(yyvsp[0].cmndspec)->tags.follow = prev->tags.follow;
+			    if (((yyvsp[0].cmndspec)->runasuserlist == NULL &&
+				 (yyvsp[0].cmndspec)->runasgrouplist == NULL) &&
 				(prev->runasuserlist != NULL ||
 				 prev->runasgrouplist != NULL)) {
-				yyvsp[0].cmndspec->runasuserlist = prev->runasuserlist;
-				yyvsp[0].cmndspec->runasgrouplist = prev->runasgrouplist;
+				(yyvsp[0].cmndspec)->runasuserlist = prev->runasuserlist;
+				(yyvsp[0].cmndspec)->runasgrouplist = prev->runasgrouplist;
 			    }
-			    yyval.cmndspec = yyvsp[-2].cmndspec;
+			    (yyval.cmndspec) = (yyvsp[-2].cmndspec);
 			}
-break;
-case 36:
-#line 337 "gram.y"
-{
+#line 1815 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 37:
+#line 341 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    struct cmndspec *cs = ecalloc(1, sizeof(*cs));
-			    if (yyvsp[-4].runas != NULL) {
-				if (yyvsp[-4].runas->runasusers != NULL) {
+			    if ((yyvsp[-4].runas) != NULL) {
+				if ((yyvsp[-4].runas)->runasusers != NULL) {
 				    cs->runasuserlist =
 					emalloc(sizeof(*cs->runasuserlist));
 				    HLTQ_TO_TAILQ(cs->runasuserlist,
-					yyvsp[-4].runas->runasusers, entries);
+					(yyvsp[-4].runas)->runasusers, entries);
 				}
-				if (yyvsp[-4].runas->runasgroups != NULL) {
+				if ((yyvsp[-4].runas)->runasgroups != NULL) {
 				    cs->runasgrouplist =
 					emalloc(sizeof(*cs->runasgrouplist));
 				    HLTQ_TO_TAILQ(cs->runasgrouplist,
-					yyvsp[-4].runas->runasgroups, entries);
+					(yyvsp[-4].runas)->runasgroups, entries);
 				}
-				efree(yyvsp[-4].runas);
+				efree((yyvsp[-4].runas));
 			    }
 #ifdef HAVE_SELINUX
-			    cs->role = yyvsp[-3].seinfo.role;
-			    cs->type = yyvsp[-3].seinfo.type;
+			    cs->role = (yyvsp[-3].seinfo).role;
+			    cs->type = (yyvsp[-3].seinfo).type;
 #endif
 #ifdef HAVE_PRIV_SET
-			    cs->privs = yyvsp[-2].privinfo.privs;
-			    cs->limitprivs = yyvsp[-2].privinfo.limitprivs;
+			    cs->privs = (yyvsp[-2].privinfo).privs;
+			    cs->limitprivs = (yyvsp[-2].privinfo).limitprivs;
 #endif
-			    cs->tags = yyvsp[-1].tag;
-			    cs->cmnd = yyvsp[0].member;
+			    cs->tags = (yyvsp[-1].tag);
+			    cs->cmnd = (yyvsp[0].member);
 			    HLTQ_INIT(cs, entries);
 			    /* sudo "ALL" implies the SETENV tag */
 			    if (cs->cmnd->type == ALL && !cs->cmnd->negated &&
 				cs->tags.setenv == UNSPEC)
 				cs->tags.setenv = IMPLIED;
-			    yyval.cmndspec = cs;
+			    (yyval.cmndspec) = cs;
 			}
-break;
-case 37:
-#line 373 "gram.y"
-{
-			    yyval.digest = new_digest(SUDO_DIGEST_SHA224, yyvsp[0].string);
+#line 1854 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 38:
+#line 377 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.digest) = new_digest(SUDO_DIGEST_SHA224, (yyvsp[0].string));
 			}
-break;
-case 38:
-#line 376 "gram.y"
-{
-			    yyval.digest = new_digest(SUDO_DIGEST_SHA256, yyvsp[0].string);
+#line 1862 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 39:
+#line 380 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.digest) = new_digest(SUDO_DIGEST_SHA256, (yyvsp[0].string));
 			}
-break;
-case 39:
-#line 379 "gram.y"
-{
-			    yyval.digest = new_digest(SUDO_DIGEST_SHA384, yyvsp[0].string);
+#line 1870 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 40:
+#line 383 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.digest) = new_digest(SUDO_DIGEST_SHA384, (yyvsp[0].string));
 			}
-break;
-case 40:
-#line 382 "gram.y"
-{
-			    yyval.digest = new_digest(SUDO_DIGEST_SHA512, yyvsp[0].string);
+#line 1878 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 41:
+#line 386 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.digest) = new_digest(SUDO_DIGEST_SHA512, (yyvsp[0].string));
 			}
-break;
-case 41:
-#line 387 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
+#line 1886 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 42:
+#line 391 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
 			}
-break;
-case 42:
-#line 390 "gram.y"
-{
+#line 1894 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 43:
+#line 394 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    /* XXX - yuck */
-			    struct sudo_command *c = (struct sudo_command *)(yyvsp[0].member->name);
-			    c->digest = yyvsp[-1].digest;
-			    yyval.member = yyvsp[0].member;
+			    struct sudo_command *c = (struct sudo_command *)((yyvsp[0].member)->name);
+			    c->digest = (yyvsp[-1].digest);
+			    (yyval.member) = (yyvsp[0].member);
 			}
-break;
-case 43:
-#line 398 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = false;
+#line 1905 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 44:
+#line 402 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = false;
 			}
-break;
-case 44:
-#line 402 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = true;
+#line 1914 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 45:
+#line 406 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = true;
 			}
-break;
-case 45:
-#line 408 "gram.y"
-{
-			    yyval.string = yyvsp[0].string;
+#line 1923 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 46:
+#line 412 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.string) = (yyvsp[0].string);
 			}
-break;
-case 46:
-#line 413 "gram.y"
-{
-			    yyval.string = yyvsp[0].string;
+#line 1931 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 47:
+#line 417 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.string) = (yyvsp[0].string);
 			}
-break;
-case 47:
-#line 418 "gram.y"
-{
-			    yyval.seinfo.role = NULL;
-			    yyval.seinfo.type = NULL;
+#line 1939 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 48:
+#line 422 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.seinfo).role = NULL;
+			    (yyval.seinfo).type = NULL;
 			}
-break;
-case 48:
-#line 422 "gram.y"
-{
-			    yyval.seinfo.role = yyvsp[0].string;
-			    yyval.seinfo.type = NULL;
+#line 1948 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 49:
+#line 426 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.seinfo).role = (yyvsp[0].string);
+			    (yyval.seinfo).type = NULL;
 			}
-break;
-case 49:
-#line 426 "gram.y"
-{
-			    yyval.seinfo.type = yyvsp[0].string;
-			    yyval.seinfo.role = NULL;
+#line 1957 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 50:
+#line 430 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.seinfo).type = (yyvsp[0].string);
+			    (yyval.seinfo).role = NULL;
 			}
-break;
-case 50:
-#line 430 "gram.y"
-{
-			    yyval.seinfo.role = yyvsp[-1].string;
-			    yyval.seinfo.type = yyvsp[0].string;
+#line 1966 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 51:
+#line 434 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.seinfo).role = (yyvsp[-1].string);
+			    (yyval.seinfo).type = (yyvsp[0].string);
 			}
-break;
-case 51:
-#line 434 "gram.y"
-{
-			    yyval.seinfo.type = yyvsp[-1].string;
-			    yyval.seinfo.role = yyvsp[0].string;
+#line 1975 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 52:
+#line 438 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.seinfo).type = (yyvsp[-1].string);
+			    (yyval.seinfo).role = (yyvsp[0].string);
 			}
-break;
-case 52:
-#line 440 "gram.y"
-{
-			    yyval.string = yyvsp[0].string;
+#line 1984 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 53:
+#line 444 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.string) = (yyvsp[0].string);
 			}
-break;
-case 53:
-#line 444 "gram.y"
-{
-			    yyval.string = yyvsp[0].string;
+#line 1992 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 54:
+#line 448 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.string) = (yyvsp[0].string);
 			}
-break;
-case 54:
-#line 449 "gram.y"
-{
-			    yyval.privinfo.privs = NULL;
-			    yyval.privinfo.limitprivs = NULL;
+#line 2000 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 55:
+#line 453 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.privinfo).privs = NULL;
+			    (yyval.privinfo).limitprivs = NULL;
 			}
-break;
-case 55:
-#line 453 "gram.y"
-{
-			    yyval.privinfo.privs = yyvsp[0].string;
-			    yyval.privinfo.limitprivs = NULL;
+#line 2009 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 56:
+#line 457 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.privinfo).privs = (yyvsp[0].string);
+			    (yyval.privinfo).limitprivs = NULL;
 			}
-break;
-case 56:
-#line 457 "gram.y"
-{
-			    yyval.privinfo.privs = NULL;
-			    yyval.privinfo.limitprivs = yyvsp[0].string;
+#line 2018 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 57:
+#line 461 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.privinfo).privs = NULL;
+			    (yyval.privinfo).limitprivs = (yyvsp[0].string);
 			}
-break;
-case 57:
-#line 461 "gram.y"
-{
-			    yyval.privinfo.privs = yyvsp[-1].string;
-			    yyval.privinfo.limitprivs = yyvsp[0].string;
+#line 2027 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 58:
+#line 465 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.privinfo).privs = (yyvsp[-1].string);
+			    (yyval.privinfo).limitprivs = (yyvsp[0].string);
 			}
-break;
-case 58:
-#line 465 "gram.y"
-{
-			    yyval.privinfo.limitprivs = yyvsp[-1].string;
-			    yyval.privinfo.privs = yyvsp[0].string;
+#line 2036 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 59:
+#line 469 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.privinfo).limitprivs = (yyvsp[-1].string);
+			    (yyval.privinfo).privs = (yyvsp[0].string);
 			}
-break;
-case 59:
-#line 471 "gram.y"
-{
-			    yyval.runas = NULL;
+#line 2045 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 60:
+#line 475 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = NULL;
 			}
-break;
-case 60:
-#line 474 "gram.y"
-{
-			    yyval.runas = yyvsp[-1].runas;
+#line 2053 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 61:
+#line 478 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = (yyvsp[-1].runas);
 			}
-break;
-case 61:
-#line 479 "gram.y"
-{
-			    yyval.runas = ecalloc(1, sizeof(struct runascontainer));
-			    yyval.runas->runasusers = new_member(NULL, MYSELF);
+#line 2061 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 62:
+#line 483 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = ecalloc(1, sizeof(struct runascontainer));
+			    (yyval.runas)->runasusers = new_member(NULL, MYSELF);
 			    /* $$->runasgroups = NULL; */
 			}
-break;
-case 62:
-#line 484 "gram.y"
-{
-			    yyval.runas = ecalloc(1, sizeof(struct runascontainer));
-			    yyval.runas->runasusers = yyvsp[0].member;
+#line 2071 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 63:
+#line 488 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = ecalloc(1, sizeof(struct runascontainer));
+			    (yyval.runas)->runasusers = (yyvsp[0].member);
 			    /* $$->runasgroups = NULL; */
 			}
-break;
-case 63:
-#line 489 "gram.y"
-{
-			    yyval.runas = ecalloc(1, sizeof(struct runascontainer));
-			    yyval.runas->runasusers = yyvsp[-2].member;
-			    yyval.runas->runasgroups = yyvsp[0].member;
-			}
-break;
-case 64:
-#line 494 "gram.y"
-{
-			    yyval.runas = ecalloc(1, sizeof(struct runascontainer));
+#line 2081 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 64:
+#line 493 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = ecalloc(1, sizeof(struct runascontainer));
+			    (yyval.runas)->runasusers = (yyvsp[-2].member);
+			    (yyval.runas)->runasgroups = (yyvsp[0].member);
+			}
+#line 2091 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 65:
+#line 498 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = ecalloc(1, sizeof(struct runascontainer));
 			    /* $$->runasusers = NULL; */
-			    yyval.runas->runasgroups = yyvsp[0].member;
+			    (yyval.runas)->runasgroups = (yyvsp[0].member);
 			}
-break;
-case 65:
-#line 499 "gram.y"
-{
-			    yyval.runas = ecalloc(1, sizeof(struct runascontainer));
-			    yyval.runas->runasusers = new_member(NULL, MYSELF);
+#line 2101 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 66:
+#line 503 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.runas) = ecalloc(1, sizeof(struct runascontainer));
+			    (yyval.runas)->runasusers = new_member(NULL, MYSELF);
 			    /* $$->runasgroups = NULL; */
 			}
-break;
-case 66:
-#line 506 "gram.y"
-{
-			    yyval.tag.nopasswd = yyval.tag.noexec = yyval.tag.setenv =
-				yyval.tag.log_input = yyval.tag.log_output = UNSPEC;
+#line 2111 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 67:
+#line 510 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    TAGS_INIT((yyval.tag));
 			}
-break;
-case 67:
-#line 510 "gram.y"
-{
-			    yyval.tag.nopasswd = true;
+#line 2119 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 68:
+#line 513 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).nopasswd = true;
 			}
-break;
-case 68:
-#line 513 "gram.y"
-{
-			    yyval.tag.nopasswd = false;
+#line 2127 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 69:
+#line 516 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).nopasswd = false;
 			}
-break;
-case 69:
-#line 516 "gram.y"
-{
-			    yyval.tag.noexec = true;
+#line 2135 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 70:
+#line 519 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).noexec = true;
 			}
-break;
-case 70:
-#line 519 "gram.y"
-{
-			    yyval.tag.noexec = false;
+#line 2143 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 71:
+#line 522 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).noexec = false;
 			}
-break;
-case 71:
-#line 522 "gram.y"
-{
-			    yyval.tag.setenv = true;
+#line 2151 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 72:
+#line 525 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).setenv = true;
 			}
-break;
-case 72:
-#line 525 "gram.y"
-{
-			    yyval.tag.setenv = false;
+#line 2159 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 73:
+#line 528 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).setenv = false;
 			}
-break;
-case 73:
-#line 528 "gram.y"
-{
-			    yyval.tag.log_input = true;
+#line 2167 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 74:
+#line 531 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).log_input = true;
 			}
-break;
-case 74:
-#line 531 "gram.y"
-{
-			    yyval.tag.log_input = false;
+#line 2175 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 75:
+#line 534 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).log_input = false;
 			}
-break;
-case 75:
-#line 534 "gram.y"
-{
-			    yyval.tag.log_output = true;
+#line 2183 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 76:
+#line 537 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).log_output = true;
 			}
-break;
-case 76:
-#line 537 "gram.y"
-{
-			    yyval.tag.log_output = false;
+#line 2191 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 77:
+#line 540 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).log_output = false;
 			}
-break;
-case 77:
-#line 542 "gram.y"
-{
-			    yyval.member = new_member(NULL, ALL);
+#line 2199 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 78:
+#line 543 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).follow = true;
 			}
-break;
-case 78:
-#line 545 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, ALIAS);
+#line 2207 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 79:
+#line 546 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.tag).follow = false;
 			}
-break;
-case 79:
-#line 548 "gram.y"
-{
+#line 2215 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 80:
+#line 551 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member(NULL, ALL);
+			}
+#line 2223 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 81:
+#line 554 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), ALIAS);
+			}
+#line 2231 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 82:
+#line 557 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    struct sudo_command *c = ecalloc(1, sizeof(*c));
-			    c->cmnd = yyvsp[0].command.cmnd;
-			    c->args = yyvsp[0].command.args;
-			    yyval.member = new_member((char *)c, COMMAND);
-			}
-break;
-case 82:
-#line 560 "gram.y"
-{
+			    c->cmnd = (yyvsp[0].command).cmnd;
+			    c->args = (yyvsp[0].command).args;
+			    (yyval.member) = new_member((char *)c, COMMAND);
+			}
+#line 2242 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 85:
+#line 569 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    char *s;
-			    if ((s = alias_add(yyvsp[-2].string, HOSTALIAS, yyvsp[0].member)) != NULL) {
+			    if ((s = alias_add((yyvsp[-2].string), HOSTALIAS, (yyvsp[0].member))) != NULL) {
 				sudoerserror(s);
 				YYERROR;
 			    }
 			}
-break;
-case 84:
-#line 570 "gram.y"
-{
-			    HLTQ_CONCAT(yyvsp[-2].member, yyvsp[0].member, entries);
-			    yyval.member = yyvsp[-2].member;
-			}
-break;
-case 87:
-#line 580 "gram.y"
-{
+#line 2254 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 87:
+#line 579 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    HLTQ_CONCAT((yyvsp[-2].member), (yyvsp[0].member), entries);
+			    (yyval.member) = (yyvsp[-2].member);
+			}
+#line 2263 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 90:
+#line 589 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    char *s;
-			    if ((s = alias_add(yyvsp[-2].string, CMNDALIAS, yyvsp[0].member)) != NULL) {
+			    if ((s = alias_add((yyvsp[-2].string), CMNDALIAS, (yyvsp[0].member))) != NULL) {
 				sudoerserror(s);
 				YYERROR;
 			    }
 			}
-break;
-case 89:
-#line 590 "gram.y"
-{
-			    HLTQ_CONCAT(yyvsp[-2].member, yyvsp[0].member, entries);
-			    yyval.member = yyvsp[-2].member;
-			}
-break;
-case 92:
-#line 600 "gram.y"
-{
+#line 2275 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 92:
+#line 599 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    HLTQ_CONCAT((yyvsp[-2].member), (yyvsp[0].member), entries);
+			    (yyval.member) = (yyvsp[-2].member);
+			}
+#line 2284 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 95:
+#line 609 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    char *s;
-			    if ((s = alias_add(yyvsp[-2].string, RUNASALIAS, yyvsp[0].member)) != NULL) {
+			    if ((s = alias_add((yyvsp[-2].string), RUNASALIAS, (yyvsp[0].member))) != NULL) {
 				sudoerserror(s);
 				YYERROR;
 			    }
 			}
-break;
-case 95:
-#line 613 "gram.y"
-{
+#line 2296 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 98:
+#line 622 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
 			    char *s;
-			    if ((s = alias_add(yyvsp[-2].string, USERALIAS, yyvsp[0].member)) != NULL) {
+			    if ((s = alias_add((yyvsp[-2].string), USERALIAS, (yyvsp[0].member))) != NULL) {
 				sudoerserror(s);
 				YYERROR;
 			    }
 			}
-break;
-case 97:
-#line 623 "gram.y"
-{
-			    HLTQ_CONCAT(yyvsp[-2].member, yyvsp[0].member, entries);
-			    yyval.member = yyvsp[-2].member;
+#line 2308 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 100:
+#line 632 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    HLTQ_CONCAT((yyvsp[-2].member), (yyvsp[0].member), entries);
+			    (yyval.member) = (yyvsp[-2].member);
 			}
-break;
-case 98:
-#line 629 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = false;
+#line 2317 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 101:
+#line 638 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = false;
 			}
-break;
-case 99:
-#line 633 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = true;
+#line 2326 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 102:
+#line 642 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = true;
 			}
-break;
-case 100:
-#line 639 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, ALIAS);
+#line 2335 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 103:
+#line 648 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), ALIAS);
 			}
-break;
-case 101:
-#line 642 "gram.y"
-{
-			    yyval.member = new_member(NULL, ALL);
+#line 2343 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 104:
+#line 651 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member(NULL, ALL);
 			}
-break;
-case 102:
-#line 645 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, NETGROUP);
+#line 2351 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 105:
+#line 654 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), NETGROUP);
 			}
-break;
-case 103:
-#line 648 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, USERGROUP);
+#line 2359 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 106:
+#line 657 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), USERGROUP);
 			}
-break;
-case 104:
-#line 651 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, WORD);
+#line 2367 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 107:
+#line 660 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), WORD);
 			}
-break;
-case 106:
-#line 657 "gram.y"
-{
-			    HLTQ_CONCAT(yyvsp[-2].member, yyvsp[0].member, entries);
-			    yyval.member = yyvsp[-2].member;
+#line 2375 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 109:
+#line 666 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    HLTQ_CONCAT((yyvsp[-2].member), (yyvsp[0].member), entries);
+			    (yyval.member) = (yyvsp[-2].member);
 			}
-break;
-case 107:
-#line 663 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = false;
+#line 2384 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 110:
+#line 672 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = false;
 			}
-break;
-case 108:
-#line 667 "gram.y"
-{
-			    yyval.member = yyvsp[0].member;
-			    yyval.member->negated = true;
+#line 2393 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 111:
+#line 676 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = (yyvsp[0].member);
+			    (yyval.member)->negated = true;
 			}
-break;
-case 109:
-#line 673 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, ALIAS);
+#line 2402 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 112:
+#line 682 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), ALIAS);
 			}
-break;
-case 110:
-#line 676 "gram.y"
-{
-			    yyval.member = new_member(NULL, ALL);
+#line 2410 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 113:
+#line 685 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member(NULL, ALL);
 			}
-break;
-case 111:
-#line 679 "gram.y"
-{
-			    yyval.member = new_member(yyvsp[0].string, WORD);
+#line 2418 "gram.c" /* yacc.c:1646  */
+    break;
+
+  case 114:
+#line 688 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1646  */
+    {
+			    (yyval.member) = new_member((yyvsp[0].string), WORD);
 			}
-break;
-#line 1798 "gram.c"
+#line 2426 "gram.c" /* yacc.c:1646  */
+    break;
+
+
+#line 2430 "gram.c" /* yacc.c:1646  */
+      default: break;
     }
-    yyssp -= yym;
-    yystate = *yyssp;
-    yyvsp -= yym;
-    yym = yylhs[yyn];
-    if (yystate == 0 && yym == 0)
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now 'shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTOKENS];
+
+  goto yynewstate;
+
+
+/*--------------------------------------.
+| yyerrlab -- here on detecting error.  |
+`--------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
     {
-#if YYDEBUG
-        if (yydebug)
-            printf("%sdebug: after reduction, shifting from state 0 to\
- state %d\n", YYPREFIX, YYFINAL);
-#endif
-        yystate = YYFINAL;
-        *++yyssp = YYFINAL;
-        *++yyvsp = yyval;
-        if (yychar < 0)
-        {
-            if ((yychar = yylex()) < 0) yychar = 0;
-#if YYDEBUG
-            if (yydebug)
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+         error, discard it.  */
+
+      if (yychar <= YYEOF)
+        {
+          /* Return failure if at end of input.  */
+          if (yychar == YYEOF)
+            YYABORT;
+        }
+      else
+        {
+          yydestruct ("Error: discarding",
+                      yytoken, &yylval);
+          yychar = YYEMPTY;
+        }
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+
+  /* Pacify compilers like GCC when the user code never invokes
+     YYERROR and the label yyerrorlab therefore never appears in user
+     code.  */
+  if (/*CONSTCOND*/ 0)
+     goto yyerrorlab;
+
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+        {
+          yyn += YYTERROR;
+          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
             {
-                yys = 0;
-                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
-                if (!yys) yys = "illegal-symbol";
-                printf("%sdebug: state %d, reading %d (%s)\n",
-                        YYPREFIX, YYFINAL, yychar, yys);
+              yyn = yytable[yyn];
+              if (0 < yyn)
+                break;
             }
-#endif
         }
-        if (yychar == 0) goto yyaccept;
-        goto yyloop;
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+        YYABORT;
+
+
+      yydestruct ("Error: popping",
+                  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
     }
-    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
-            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
-        yystate = yytable[yyn];
-    else
-        yystate = yydgoto[yym];
-#if YYDEBUG
-    if (yydebug)
-        printf("%sdebug: after reduction, shifting from state %d \
-to state %d\n", YYPREFIX, *yyssp, yystate);
-#endif
-    if (yyssp >= yysslim && yygrowstack())
-    {
-        goto yyoverflow;
-    }
-    *++yyssp = yystate;
-    *++yyvsp = yyval;
-    goto yyloop;
-yyoverflow:
-    yyerror("yacc stack overflow");
-yyabort:
-    if (yyss)
-            free(yyss);
-    if (yyvs)
-            free(yyvs);
-    yyss = yyssp = NULL;
-    yyvs = yyvsp = NULL;
-    yystacksize = 0;
-    return (1);
-yyaccept:
-    if (yyss)
-            free(yyss);
-    if (yyvs)
-            free(yyvs);
-    yyss = yyssp = NULL;
-    yyvs = yyvsp = NULL;
-    yystacksize = 0;
-    return (0);
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+                  yystos[*yyssp], yyvsp);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  return yyresult;
+}
+#line 693 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1906  */
+
+void
+sudoerserror(const char *s)
+{
+    debug_decl(sudoerserror, SUDO_DEBUG_PARSER)
+
+    /* If we last saw a newline the error is on the preceding line. */
+    if (last_token == COMMENT)
+	sudolineno--;
+
+    /* Save the line the first error occurred on. */
+    if (errorlineno == -1) {
+	errorlineno = sudolineno;
+	errorfile = estrdup(sudoers);
+    }
+    if (sudoers_warnings && s != NULL) {
+	LEXTRACE("<*> ");
+#ifndef TRACELEXER
+	if (trace_print == NULL || trace_print == sudoers_trace_print) {
+	    const char fmt[] = ">>> %s: %s near line %d <<<\n";
+	    int oldlocale;
+
+	    /* Warnings are displayed in the user's locale. */
+	    sudoers_setlocale(SUDOERS_LOCALE_USER, &oldlocale);
+	    sudo_printf(SUDO_CONV_ERROR_MSG, _(fmt), sudoers, _(s), sudolineno);
+	    sudoers_setlocale(oldlocale, NULL);
+	}
+#endif
+    }
+    parse_error = true;
+    debug_return;
+}
+
+static struct defaults *
+new_default(char *var, char *val, int op)
+{
+    struct defaults *d;
+    debug_decl(new_default, SUDO_DEBUG_PARSER)
+
+    d = ecalloc(1, sizeof(struct defaults));
+    d->var = var;
+    d->val = val;
+    /* d->type = 0; */
+    d->op = op;
+    /* d->binding = NULL */
+    HLTQ_INIT(d, entries);
+
+    debug_return_ptr(d);
+}
+
+static struct member *
+new_member(char *name, int type)
+{
+    struct member *m;
+    debug_decl(new_member, SUDO_DEBUG_PARSER)
+
+    m = ecalloc(1, sizeof(struct member));
+    m->name = name;
+    m->type = type;
+    HLTQ_INIT(m, entries);
+
+    debug_return_ptr(m);
+}
+
+struct sudo_digest *
+new_digest(int digest_type, const char *digest_str)
+{
+    struct sudo_digest *dig;
+    debug_decl(new_digest, SUDO_DEBUG_PARSER)
+
+    dig = emalloc(sizeof(*dig));
+    dig->digest_type = digest_type;
+    dig->digest_str = estrdup(digest_str);
+
+    debug_return_ptr(dig);
+}
+
+/*
+ * Add a list of defaults structures to the defaults list.
+ * The binding, if non-NULL, specifies a list of hosts, users, or
+ * runas users the entries apply to (specified by the type).
+ */
+static void
+add_defaults(int type, struct member *bmem, struct defaults *defs)
+{
+    struct defaults *d;
+    struct member_list *binding;
+    debug_decl(add_defaults, SUDO_DEBUG_PARSER)
+
+    if (defs != NULL) {
+	/*
+	 * We use a single binding for each entry in defs.
+	 */
+	binding = emalloc(sizeof(*binding));
+	if (bmem != NULL)
+	    HLTQ_TO_TAILQ(binding, bmem, entries);
+	else
+	    TAILQ_INIT(binding);
+
+	/*
+	 * Set type and binding (who it applies to) for new entries.
+	 * Then add to the global defaults list.
+	 */
+	HLTQ_FOREACH(d, defs, entries) {
+	    d->type = type;
+	    d->binding = binding;
+	}
+	TAILQ_CONCAT_HLTQ(&defaults, defs, entries);
+    }
+
+    debug_return;
+}
+
+/*
+ * Allocate a new struct userspec, populate it, and insert it at the
+ * end of the userspecs list.
+ */
+static void
+add_userspec(struct member *members, struct privilege *privs)
+{
+    struct userspec *u;
+    debug_decl(add_userspec, SUDO_DEBUG_PARSER)
+
+    u = ecalloc(1, sizeof(*u));
+    HLTQ_TO_TAILQ(&u->users, members, entries);
+    HLTQ_TO_TAILQ(&u->privileges, privs, entries);
+    TAILQ_INSERT_TAIL(&userspecs, u, entries);
+
+    debug_return;
+}
+
+/*
+ * Free up space used by data structures from a previous parser run and sets
+ * the current sudoers file to path.
+ */
+void
+init_parser(const char *path, bool quiet)
+{
+    struct member_list *binding;
+    struct defaults *d, *d_next;
+    struct userspec *us, *us_next;
+    debug_decl(init_parser, SUDO_DEBUG_PARSER)
+
+    TAILQ_FOREACH_SAFE(us, &userspecs, entries, us_next) {
+	struct member *m, *m_next;
+	struct privilege *priv, *priv_next;
+
+	TAILQ_FOREACH_SAFE(m, &us->users, entries, m_next) {
+	    efree(m->name);
+	    efree(m);
+	}
+	TAILQ_FOREACH_SAFE(priv, &us->privileges, entries, priv_next) {
+	    struct member_list *runasuserlist = NULL, *runasgrouplist = NULL;
+	    struct cmndspec *cs, *cs_next;
+#ifdef HAVE_SELINUX
+	    char *role = NULL, *type = NULL;
+#endif /* HAVE_SELINUX */
+#ifdef HAVE_PRIV_SET
+	    char *privs = NULL, *limitprivs = NULL;
+#endif /* HAVE_PRIV_SET */
+
+	    TAILQ_FOREACH_SAFE(m, &priv->hostlist, entries, m_next) {
+		efree(m->name);
+		efree(m);
+	    }
+	    TAILQ_FOREACH_SAFE(cs, &priv->cmndlist, entries, cs_next) {
+#ifdef HAVE_SELINUX
+		/* Only free the first instance of a role/type. */
+		if (cs->role != role) {
+		    role = cs->role;
+		    efree(cs->role);
+		}
+		if (cs->type != type) {
+		    type = cs->type;
+		    efree(cs->type);
+		}
+#endif /* HAVE_SELINUX */
+#ifdef HAVE_PRIV_SET
+		/* Only free the first instance of privs/limitprivs. */
+		if (cs->privs != privs) {
+		    privs = cs->privs;
+		    efree(cs->privs);
+		}
+		if (cs->limitprivs != limitprivs) {
+		    limitprivs = cs->limitprivs;
+		    efree(cs->limitprivs);
+		}
+#endif /* HAVE_PRIV_SET */
+		/* Only free the first instance of runas user/group lists. */
+		if (cs->runasuserlist && cs->runasuserlist != runasuserlist) {
+		    runasuserlist = cs->runasuserlist;
+		    TAILQ_FOREACH_SAFE(m, runasuserlist, entries, m_next) {
+			efree(m->name);
+			efree(m);
+		    }
+		    efree(runasuserlist);
+		}
+		if (cs->runasgrouplist && cs->runasgrouplist != runasgrouplist) {
+		    runasgrouplist = cs->runasgrouplist;
+		    TAILQ_FOREACH_SAFE(m, runasgrouplist, entries, m_next) {
+			efree(m->name);
+			efree(m);
+		    }
+		    efree(runasgrouplist);
+		}
+		if (cs->cmnd->type == COMMAND) {
+			struct sudo_command *c =
+			    (struct sudo_command *) cs->cmnd->name;
+			efree(c->cmnd);
+			efree(c->args);
+		}
+		efree(cs->cmnd->name);
+		efree(cs->cmnd);
+		efree(cs);
+	    }
+	    efree(priv);
+	}
+	efree(us);
+    }
+    TAILQ_INIT(&userspecs);
+
+    binding = NULL;
+    TAILQ_FOREACH_SAFE(d, &defaults, entries, d_next) {
+	if (d->binding != binding) {
+	    struct member *m, *m_next;
+
+	    binding = d->binding;
+	    TAILQ_FOREACH_SAFE(m, d->binding, entries, m_next) {
+		if (m->type == COMMAND) {
+			struct sudo_command *c =
+			    (struct sudo_command *) m->name;
+			efree(c->cmnd);
+			efree(c->args);
+		}
+		efree(m->name);
+		efree(m);
+	    }
+	    efree(d->binding);
+	}
+	efree(d->var);
+	efree(d->val);
+	efree(d);
+    }
+    TAILQ_INIT(&defaults);
+
+    init_aliases();
+
+    init_lexer();
+
+    efree(sudoers);
+    sudoers = path ? estrdup(path) : NULL;
+
+    parse_error = false;
+    errorlineno = -1;
+    errorfile = sudoers;
+    sudoers_warnings = !quiet;
+
+    debug_return;
 }
--- a/plugins/sudoers/gram.h
+++ b/plugins/sudoers/gram.h
@@ -1,45 +1,143 @@
-#define COMMAND 257
-#define ALIAS 258
-#define DEFVAR 259
-#define NTWKADDR 260
-#define NETGROUP 261
-#define USERGROUP 262
-#define WORD 263
-#define DIGEST 264
-#define DEFAULTS 265
-#define DEFAULTS_HOST 266
-#define DEFAULTS_USER 267
-#define DEFAULTS_RUNAS 268
-#define DEFAULTS_CMND 269
-#define NOPASSWD 270
-#define PASSWD 271
-#define NOEXEC 272
-#define EXEC 273
-#define SETENV 274
-#define NOSETENV 275
-#define LOG_INPUT 276
-#define NOLOG_INPUT 277
-#define LOG_OUTPUT 278
-#define NOLOG_OUTPUT 279
-#define ALL 280
-#define COMMENT 281
-#define HOSTALIAS 282
-#define CMNDALIAS 283
-#define USERALIAS 284
-#define RUNASALIAS 285
-#define ERROR 286
-#define TYPE 287
-#define ROLE 288
-#define PRIVS 289
-#define LIMITPRIVS 290
-#define MYSELF 291
-#define SHA224 292
-#define SHA256 293
-#define SHA384 294
-#define SHA512 295
-#ifndef YYSTYPE_DEFINED
-#define YYSTYPE_DEFINED
-typedef union {
+/* A Bison parser, made by GNU Bison 3.0.2.  */
+
+/* Bison interface for Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+#ifndef YY_SUDOERS_Y_TAB_H_INCLUDED
+# define YY_SUDOERS_Y_TAB_H_INCLUDED
+/* Debug traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int sudoersdebug;
+#endif
+
+/* Token type.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+  enum yytokentype
+  {
+    COMMAND = 258,
+    ALIAS = 259,
+    DEFVAR = 260,
+    NTWKADDR = 261,
+    NETGROUP = 262,
+    USERGROUP = 263,
+    WORD = 264,
+    DIGEST = 265,
+    DEFAULTS = 266,
+    DEFAULTS_HOST = 267,
+    DEFAULTS_USER = 268,
+    DEFAULTS_RUNAS = 269,
+    DEFAULTS_CMND = 270,
+    NOPASSWD = 271,
+    PASSWD = 272,
+    NOEXEC = 273,
+    EXEC = 274,
+    SETENV = 275,
+    NOSETENV = 276,
+    LOG_INPUT = 277,
+    NOLOG_INPUT = 278,
+    LOG_OUTPUT = 279,
+    NOLOG_OUTPUT = 280,
+    FOLLOW = 281,
+    NOFOLLOW = 282,
+    ALL = 283,
+    COMMENT = 284,
+    HOSTALIAS = 285,
+    CMNDALIAS = 286,
+    USERALIAS = 287,
+    RUNASALIAS = 288,
+    ERROR = 289,
+    TYPE = 290,
+    ROLE = 291,
+    PRIVS = 292,
+    LIMITPRIVS = 293,
+    MYSELF = 294,
+    SHA224 = 295,
+    SHA256 = 296,
+    SHA384 = 297,
+    SHA512 = 298
+  };
+#endif
+/* Tokens.  */
+#define COMMAND 258
+#define ALIAS 259
+#define DEFVAR 260
+#define NTWKADDR 261
+#define NETGROUP 262
+#define USERGROUP 263
+#define WORD 264
+#define DIGEST 265
+#define DEFAULTS 266
+#define DEFAULTS_HOST 267
+#define DEFAULTS_USER 268
+#define DEFAULTS_RUNAS 269
+#define DEFAULTS_CMND 270
+#define NOPASSWD 271
+#define PASSWD 272
+#define NOEXEC 273
+#define EXEC 274
+#define SETENV 275
+#define NOSETENV 276
+#define LOG_INPUT 277
+#define NOLOG_INPUT 278
+#define LOG_OUTPUT 279
+#define NOLOG_OUTPUT 280
+#define FOLLOW 281
+#define NOFOLLOW 282
+#define ALL 283
+#define COMMENT 284
+#define HOSTALIAS 285
+#define CMNDALIAS 286
+#define USERALIAS 287
+#define RUNASALIAS 288
+#define ERROR 289
+#define TYPE 290
+#define ROLE 291
+#define PRIVS 292
+#define LIMITPRIVS 293
+#define MYSELF 294
+#define SHA224 295
+#define SHA256 296
+#define SHA384 297
+#define SHA512 298
+
+/* Value type.  */
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE YYSTYPE;
+union YYSTYPE
+{
+#line 92 "/home/ben/src/sudo/plugins/sudoers/gram.y" /* yacc.c:1909  */
+
     struct cmndspec *cmndspec;
     struct defaults *defaults;
     struct member *member;
@@ -52,6 +150,16 @@ typedef union {
     struct solaris_privs_info privinfo;
     char *string;
     int tok;
-} YYSTYPE;
-#endif /* YYSTYPE_DEFINED */
+
+#line 155 "y.tab.h" /* yacc.c:1909  */
+};
+# define YYSTYPE_IS_TRIVIAL 1
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+
 extern YYSTYPE sudoerslval;
+
+int sudoersparse (void);
+
+#endif /* !YY_SUDOERS_Y_TAB_H_INCLUDED  */
--- a/plugins/sudoers/toke.c
+++ b/plugins/sudoers/toke.c
@@ -1,9 +1,13 @@
 #include <config.h>
+
+#line 3 "lex.sudoers.c"
+
+#define  YY_INT_ALIGNED short int
+
+/* A lexical scanner generated by flex */
+
 #define yy_create_buffer sudoers_create_buffer
 #define yy_delete_buffer sudoers_delete_buffer
-#define yy_scan_buffer sudoers_scan_buffer
-#define yy_scan_string sudoers_scan_string
-#define yy_scan_bytes sudoers_scan_bytes
 #define yy_flex_debug sudoers_flex_debug
 #define yy_init_buffer sudoers_init_buffer
 #define yy_flush_buffer sudoers_flush_buffer
@@ -12,77 +16,118 @@
 #define yyin sudoersin
 #define yyleng sudoersleng
 #define yylex sudoerslex
+#define yylineno sudoerslineno
 #define yyout sudoersout
 #define yyrestart sudoersrestart
 #define yytext sudoerstext
-
-/*	$OpenBSD: flex.skl,v 1.12 2013/11/04 17:03:32 millert Exp $	*/
-
-/* A lexical scanner generated by flex */
-
-/* Scanner skeleton version:
- * $Header: /cvs/src/usr.bin/lex/flex.skl,v 1.12 2013/11/04 17:03:32 millert Exp $
- */
+#define yywrap sudoerswrap
+#define yyalloc sudoersalloc
+#define yyrealloc sudoersrealloc
+#define yyfree sudoersfree
 
 #define FLEX_SCANNER
 #define YY_FLEX_MAJOR_VERSION 2
 #define YY_FLEX_MINOR_VERSION 5
+#define YY_FLEX_SUBMINOR_VERSION 39
+#if YY_FLEX_SUBMINOR_VERSION > 0
+#define FLEX_BETA
+#endif
+
+/* First, we deal with  platform-specific or compiler-specific issues. */
 
+/* begin standard C headers. */
 #include <stdio.h>
+#include <string.h>
 #include <errno.h>
+#include <stdlib.h>
 
+/* end standard C headers. */
 
-/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
-#ifdef c_plusplus
-#ifndef __cplusplus
-#define __cplusplus
-#endif
+/* flex integer type definitions */
+
+#ifndef FLEXINT_H
+#define FLEXINT_H
+
+/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
+
+#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+
+/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
+ * if you want the limit (max/min) macros for int types. 
+ */
+#ifndef __STDC_LIMIT_MACROS
+#define __STDC_LIMIT_MACROS 1
 #endif
 
+#include <inttypes.h>
+typedef int8_t flex_int8_t;
+typedef uint8_t flex_uint8_t;
+typedef int16_t flex_int16_t;
+typedef uint16_t flex_uint16_t;
+typedef int32_t flex_int32_t;
+typedef uint32_t flex_uint32_t;
+#else
+typedef signed char flex_int8_t;
+typedef short int flex_int16_t;
+typedef int flex_int32_t;
+typedef unsigned char flex_uint8_t; 
+typedef unsigned short int flex_uint16_t;
+typedef unsigned int flex_uint32_t;
 
-#ifdef __cplusplus
+/* Limits of integral types. */
+#ifndef INT8_MIN
+#define INT8_MIN               (-128)
+#endif
+#ifndef INT16_MIN
+#define INT16_MIN              (-32767-1)
+#endif
+#ifndef INT32_MIN
+#define INT32_MIN              (-2147483647-1)
+#endif
+#ifndef INT8_MAX
+#define INT8_MAX               (127)
+#endif
+#ifndef INT16_MAX
+#define INT16_MAX              (32767)
+#endif
+#ifndef INT32_MAX
+#define INT32_MAX              (2147483647)
+#endif
+#ifndef UINT8_MAX
+#define UINT8_MAX              (255U)
+#endif
+#ifndef UINT16_MAX
+#define UINT16_MAX             (65535U)
+#endif
+#ifndef UINT32_MAX
+#define UINT32_MAX             (4294967295U)
+#endif
 
-#include <stdlib.h>
-#include <unistd.h>
+#endif /* ! C99 */
 
-/* Use prototypes in function declarations. */
-#define YY_USE_PROTOS
+#endif /* ! FLEXINT_H */
+
+#ifdef __cplusplus
 
 /* The "const" storage-class-modifier is valid. */
 #define YY_USE_CONST
 
 #else	/* ! __cplusplus */
 
-#ifdef __STDC__
+/* C99 requires __STDC__ to be defined as 1. */
+#if defined (__STDC__)
 
-#define YY_USE_PROTOS
 #define YY_USE_CONST
 
-#endif	/* __STDC__ */
+#endif	/* defined (__STDC__) */
 #endif	/* ! __cplusplus */
 
-#ifdef __TURBOC__
- #pragma warn -rch
- #pragma warn -use
-#include <io.h>
-#include <stdlib.h>
-#define YY_USE_CONST
-#define YY_USE_PROTOS
-#endif
-
 #ifdef YY_USE_CONST
 #define yyconst const
 #else
 #define yyconst
 #endif
 
-
-#ifdef YY_USE_PROTOS
-#define YY_PROTO(proto) proto
-#else
-#define YY_PROTO(proto) ()
-#endif
-
 /* Returned upon end-of-file. */
 #define YY_NULL 0
 
@@ -97,71 +142,79 @@
  * but we do it the disgusting crufty way forced on us by the ()-less
  * definition of BEGIN.
  */
-#define BEGIN yy_start = 1 + 2 *
+#define BEGIN (yy_start) = 1 + 2 *
 
 /* Translate the current start state into a value that can be later handed
  * to BEGIN to return to the state.  The YYSTATE alias is for lex
  * compatibility.
  */
-#define YY_START ((yy_start - 1) / 2)
+#define YY_START (((yy_start) - 1) / 2)
 #define YYSTATE YY_START
 
 /* Action number for EOF rule of a given start state. */
 #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
 
 /* Special action meaning "start processing a new file". */
-#define YY_NEW_FILE yyrestart( yyin )
+#define YY_NEW_FILE sudoersrestart(sudoersin  )
 
 #define YY_END_OF_BUFFER_CHAR 0
 
 /* Size of default input buffer. */
+#ifndef YY_BUF_SIZE
+#ifdef __ia64__
+/* On IA-64, the buffer size is 16k, not 8k.
+ * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
+ * Ditto for the __ia64__ case accordingly.
+ */
+#define YY_BUF_SIZE 32768
+#else
 #define YY_BUF_SIZE 16384
+#endif /* __ia64__ */
+#endif
+
+/* The state buf must be large enough to hold one state per character in the main buffer.
+ */
+#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
 
+#ifndef YY_TYPEDEF_YY_BUFFER_STATE
+#define YY_TYPEDEF_YY_BUFFER_STATE
 typedef struct yy_buffer_state *YY_BUFFER_STATE;
+#endif
 
-extern int yyleng;
-extern FILE *yyin, *yyout;
+#ifndef YY_TYPEDEF_YY_SIZE_T
+#define YY_TYPEDEF_YY_SIZE_T
+typedef size_t yy_size_t;
+#endif
+
+extern yy_size_t sudoersleng;
+
+extern FILE *sudoersin, *sudoersout;
 
 #define EOB_ACT_CONTINUE_SCAN 0
 #define EOB_ACT_END_OF_FILE 1
 #define EOB_ACT_LAST_MATCH 2
 
-/* The funky do-while in the following #define is used to turn the definition
- * int a single C statement (which needs a semi-colon terminator).  This
- * avoids problems with code like:
- *
- * 	if ( condition_holds )
- *		yyless( 5 );
- *	else
- *		do_something_else();
- *
- * Prior to using the do-while the compiler would get upset at the
- * "else" because it interpreted the "if" statement as being all
- * done when it reached the ';' after the yyless() call.
- */
-
-/* Return all but the first 'n' matched characters back to the input stream. */
-
+    #define YY_LESS_LINENO(n)
+    #define YY_LINENO_REWIND_TO(ptr)
+    
+/* Return all but the first "n" matched characters back to the input stream. */
 #define yyless(n) \
 	do \
 		{ \
-		/* Undo effects of setting up yytext. */ \
-		*yy_cp = yy_hold_char; \
+		/* Undo effects of setting up sudoerstext. */ \
+        int yyless_macro_arg = (n); \
+        YY_LESS_LINENO(yyless_macro_arg);\
+		*yy_cp = (yy_hold_char); \
 		YY_RESTORE_YY_MORE_OFFSET \
-		yy_cp = yy_bp + n - YY_MORE_ADJ; \
-		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up sudoerstext again */ \
 		} \
 	while ( 0 )
 
-#define unput(c) yyunput( c, yytext_ptr )
-
-/* The following is because we cannot portably get our hands on size_t
- * (without autoconf's help, which isn't available because we want
- * flex-generated scanners to compile on their own).
- */
-typedef unsigned int yy_size_t;
-
+#define unput(c) yyunput( c, (yytext_ptr)  )
 
+#ifndef YY_STRUCT_YY_BUFFER_STATE
+#define YY_STRUCT_YY_BUFFER_STATE
 struct yy_buffer_state
 	{
 	FILE *yy_input_file;
@@ -177,7 +230,7 @@ struct yy_buffer_state
 	/* Number of characters read into yy_ch_buf, not including EOB
 	 * characters.
 	 */
-	int yy_n_chars;
+	yy_size_t yy_n_chars;
 
 	/* Whether we "own" the buffer - i.e., we know we created it,
 	 * and can realloc() it to grow it, and should free() it to
@@ -198,12 +251,16 @@ struct yy_buffer_state
 	 */
 	int yy_at_bol;
 
+    int yy_bs_lineno; /**< The line count. */
+    int yy_bs_column; /**< The column count. */
+    
 	/* Whether to try to fill the input buffer when we reach the
 	 * end of it.
 	 */
 	int yy_fill_buffer;
 
 	int yy_buffer_status;
+
 #define YY_BUFFER_NEW 0
 #define YY_BUFFER_NORMAL 1
 	/* When an EOF's been seen but there's still some text to process
@@ -213,196 +270,235 @@ struct yy_buffer_state
 	 * possible backing-up.
 	 *
 	 * When we actually see the EOF, we change the status to "new"
-	 * (via yyrestart()), so that the user can continue scanning by
-	 * just pointing yyin at a new input file.
+	 * (via sudoersrestart()), so that the user can continue scanning by
+	 * just pointing sudoersin at a new input file.
 	 */
 #define YY_BUFFER_EOF_PENDING 2
+
 	};
+#endif /* !YY_STRUCT_YY_BUFFER_STATE */
 
-static YY_BUFFER_STATE yy_current_buffer = 0;
+/* Stack of input buffers. */
+static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
+static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
+static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
 
 /* We provide macros for accessing buffer states in case in the
  * future we want to put the buffer states in a more general
  * "scanner state".
+ *
+ * Returns the top of the stack, or NULL.
  */
-#define YY_CURRENT_BUFFER yy_current_buffer
+#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
+                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
+                          : NULL)
 
+/* Same as previous macro, but useful when we know that the buffer stack is not
+ * NULL or when we need an lvalue. For internal use only.
+ */
+#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
 
-/* yy_hold_char holds the character lost when yytext is formed. */
+/* yy_hold_char holds the character lost when sudoerstext is formed. */
 static char yy_hold_char;
-
-static int yy_n_chars;		/* number of characters read into yy_ch_buf */
-
-
-int yyleng;
+static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
+yy_size_t sudoersleng;
 
 /* Points to current character in buffer. */
 static char *yy_c_buf_p = (char *) 0;
-static int yy_init = 1;		/* whether we need to initialize */
+static int yy_init = 0;		/* whether we need to initialize */
 static int yy_start = 0;	/* start state number */
 
-/* Flag which is used to allow yywrap()'s to do buffer switches
- * instead of setting up a fresh yyin.  A bit of a hack ...
+/* Flag which is used to allow sudoerswrap()'s to do buffer switches
+ * instead of setting up a fresh sudoersin.  A bit of a hack ...
  */
 static int yy_did_buffer_switch_on_eof;
 
-void yyrestart YY_PROTO(( FILE *input_file ));
+void sudoersrestart (FILE *input_file  );
+void sudoers_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
+YY_BUFFER_STATE sudoers_create_buffer (FILE *file,int size  );
+void sudoers_delete_buffer (YY_BUFFER_STATE b  );
+void sudoers_flush_buffer (YY_BUFFER_STATE b  );
+void sudoerspush_buffer_state (YY_BUFFER_STATE new_buffer  );
+void sudoerspop_buffer_state (void );
+
+static void sudoersensure_buffer_stack (void );
+static void sudoers_load_buffer_state (void );
+static void sudoers_init_buffer (YY_BUFFER_STATE b,FILE *file  );
+
+#define YY_FLUSH_BUFFER sudoers_flush_buffer(YY_CURRENT_BUFFER )
+
+YY_BUFFER_STATE sudoers_scan_buffer (char *base,yy_size_t size  );
+YY_BUFFER_STATE sudoers_scan_string (yyconst char *yy_str  );
+YY_BUFFER_STATE sudoers_scan_bytes (yyconst char *bytes,yy_size_t len  );
+
+void *sudoersalloc (yy_size_t  );
+void *sudoersrealloc (void *,yy_size_t  );
+void sudoersfree (void *  );
 
-void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
-void yy_load_buffer_state YY_PROTO(( void ));
-YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
-void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
-void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
-void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
-#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
-
-YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
-YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
-YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
-
-static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
-static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
-static void yy_flex_free YY_PROTO(( void * ));
-
-#define yy_new_buffer yy_create_buffer
+#define yy_new_buffer sudoers_create_buffer
 
 #define yy_set_interactive(is_interactive) \
 	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
-	yy_current_buffer->yy_is_interactive = is_interactive; \
+	if ( ! YY_CURRENT_BUFFER ){ \
+        sudoersensure_buffer_stack (); \
+		YY_CURRENT_BUFFER_LVALUE =    \
+            sudoers_create_buffer(sudoersin,YY_BUF_SIZE ); \
+	} \
+	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
 	}
 
 #define yy_set_bol(at_bol) \
 	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
-	yy_current_buffer->yy_at_bol = at_bol; \
+	if ( ! YY_CURRENT_BUFFER ){\
+        sudoersensure_buffer_stack (); \
+		YY_CURRENT_BUFFER_LVALUE =    \
+            sudoers_create_buffer(sudoersin,YY_BUF_SIZE ); \
+	} \
+	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
 	}
 
-#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
 
+/* Begin user sect3 */
 
-#define yywrap() 1
+#define sudoerswrap() 1
 #define YY_SKIP_YYWRAP
+
 typedef unsigned char YY_CHAR;
-FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+
+FILE *sudoersin = (FILE *) 0, *sudoersout = (FILE *) 0;
+
 typedef int yy_state_type;
-extern char *yytext;
-#define yytext_ptr yytext
 
-static yy_state_type yy_get_previous_state YY_PROTO(( void ));
-static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
-static int yy_get_next_buffer YY_PROTO(( void ));
-static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+extern int sudoerslineno;
+
+int sudoerslineno = 1;
+
+extern char *sudoerstext;
+#define yytext_ptr sudoerstext
+
+static yy_state_type yy_get_previous_state (void );
+static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
+static int yy_get_next_buffer (void );
+static void yy_fatal_error (yyconst char msg[]  );
 
 /* Done after the current pattern has been matched and before the
- * corresponding action - sets up yytext.
+ * corresponding action - sets up sudoerstext.
  */
 #define YY_DO_BEFORE_ACTION \
-	yytext_ptr = yy_bp; \
-	yyleng = (int) (yy_cp - yy_bp); \
-	yy_hold_char = *yy_cp; \
+	(yytext_ptr) = yy_bp; \
+	sudoersleng = (size_t) (yy_cp - yy_bp); \
+	(yy_hold_char) = *yy_cp; \
 	*yy_cp = '\0'; \
-	yy_c_buf_p = yy_cp;
+	(yy_c_buf_p) = yy_cp;
 
-#define YY_NUM_RULES 67
-#define YY_END_OF_BUFFER 68
-static yyconst short int yy_accept[814] =
+#define YY_NUM_RULES 69
+#define YY_END_OF_BUFFER 70
+/* This struct is not used in this scanner,
+   but its presence is necessary. */
+struct yy_trans_info
+	{
+	flex_int32_t yy_verify;
+	flex_int32_t yy_nxt;
+	};
+static yyconst flex_int16_t yy_accept[842] =
     {   0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,   68,   55,   63,   62,   61,   54,
-       65,   34,   56,   57,   34,   58,   55,   55,   55,   55,
-       60,   59,   66,   46,   46,   46,   46,   46,   46,   46,
-       46,   46,   46,   66,   55,   55,   63,   65,   46,   46,
-       46,   46,   46,    2,   66,    1,   55,   46,   46,   55,
-       17,   16,   17,   16,   16,   66,   65,   66,    3,    9,
-        8,    9,    4,    9,    5,   66,   13,   13,   13,   11,
-       12,   66,   19,   19,   18,   18,   18,   19,   18,   18,
-       18,   19,   19,   19,   19,   19,   18,   19,   19,   55,
-
-        0,   63,   61,   65,   65,    0,   55,   36,    0,   34,
-        0,   35,    0,   53,   53,    0,   55,   55,    0,   55,
-       55,   55,   55,    0,   39,   46,   46,   46,   46,   46,
-       46,   46,   46,   46,   46,   46,   46,   55,   64,   55,
-       55,   63,    0,    0,    0,    0,    0,   65,   55,   55,
-       55,   55,   55,    2,    1,    0,    1,   47,   47,    0,
-       55,   17,   17,   15,   14,   15,    0,    0,    3,    9,
-        0,    6,    7,    9,    9,   13,    0,   13,   13,    0,
-       10,   36,    0,    0,   35,   19,   19,    0,   19,    0,
-        0,   18,   18,   18,   18,   18,   18,   19,   19,   46,
-
-       19,   19,   19,   19,   19,   19,   19,   65,   65,    0,
-       36,   55,   55,   55,   55,   55,    0,    0,   39,   39,
-       46,   41,   46,   46,   46,   46,   46,   46,   46,   46,
-       46,   46,   46,   46,   55,   55,    0,    0,    0,    0,
-        0,   65,   55,   55,   55,   55,   55,    0,   55,   10,
-        0,    0,    0,   18,   18,   18,   19,   19,   19,   19,
-       19,   19,   19,   19,   19,   19,   19,   65,   55,   55,
-       55,   55,   55,   55,    0,   40,   40,   40,    0,    0,
-       39,   39,   39,   39,   39,   39,   39,   46,   46,   46,
-       46,   46,   46,   46,   46,   46,   46,   42,   46,   43,
-
-       55,   55,   55,   55,    0,    0,    0,    0,    0,   65,
-       55,   55,   55,   55,    0,    0,    0,    0,    0,   18,
-       18,   19,   46,   19,   19,   19,   19,   19,   19,   19,
-       19,   19,   19,   55,   55,   55,    0,    0,   40,   40,
-       40,    0,   39,   39,    0,   39,   39,   39,   39,   39,
-       39,   39,   39,   39,   39,   39,    0,   27,   46,   46,
-       46,   46,   46,   46,   46,   46,   44,   46,   55,   55,
-       55,   55,   55,    0,    0,    0,   65,   55,   55,   55,
-        0,    0,    0,   18,   18,   46,   46,   19,   19,   19,
-       19,   19,   19,   19,   19,   19,   19,   19,   55,   55,
-
-       55,   55,   55,    0,   40,    0,   39,   39,   39,    0,
-        0,    0,   39,   39,   39,   39,   39,   39,   39,   39,
-       39,   39,   39,   39,   39,   46,   46,   46,   46,   46,
-       46,   46,   46,   46,   48,   49,   50,   51,   55,    0,
-        0,   65,   55,   55,   55,    0,    0,    0,    0,    0,
-       46,   46,   19,   46,   19,   19,   19,   19,   19,   19,
-       19,   19,   19,   37,   37,   37,    0,    0,   39,   39,
-       39,   39,   39,   39,   39,    0,    0,    0,    0,    0,
-       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
-       39,   39,   39,   39,   46,   46,   46,    0,   26,   46,
-
-       46,   46,   46,    0,   25,    0,   28,   55,    0,    0,
-       65,   55,   55,   55,   37,   37,   37,   46,   46,   46,
-       46,   19,   19,   19,   55,   37,   37,   37,   37,    0,
-       39,    0,   39,   39,   39,   39,   39,   39,   39,   39,
-       39,   39,   39,    0,    0,    0,   39,   39,   39,   39,
-       39,   39,   39,   39,   39,   39,   39,   39,   39,   46,
-       46,   46,   46,   46,   46,   46,   52,    0,    0,   65,
-       55,   22,   47,    0,   37,   37,   37,   37,   46,   46,
-       46,   46,   19,   19,   19,   38,   38,   38,   38,   39,
-        0,    0,    0,   39,   39,   39,   39,   39,   39,   39,
-
-       39,   39,   39,   39,   39,   39,    0,    0,    0,    0,
-        0,   39,   39,   39,   39,   39,   39,   39,   39,   46,
-       46,   46,   46,   46,    0,   24,    0,   29,    0,   22,
-       65,   65,   55,    0,   55,   38,   38,   38,   38,   46,
-       46,   46,   46,   55,   55,   38,   38,   38,   38,    0,
-        0,    0,    0,    0,   39,   39,   39,   39,   39,   39,
-       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
-       39,   39,   39,   39,   45,    0,   32,   46,   46,   46,
-        0,   65,   65,   20,   65,   23,   22,    0,    0,    0,
-        0,    0,   22,    0,    0,    0,   38,   38,   38,   38,
-
-       46,   46,   46,   55,   55,   55,    0,    0,    0,   39,
+        0,    0,    0,    0,   70,   57,   65,   64,   63,   56,
+       67,   36,   58,   59,   36,   60,   57,   57,   57,   57,
+       62,   61,   68,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   68,   57,   57,   65,   67,   48,
+       48,   48,   48,   48,    2,   68,    1,   57,   48,   48,
+       57,   17,   16,   17,   16,   16,   68,   67,   68,    3,
+        9,    8,    9,    4,    9,    5,   68,   13,   13,   13,
+       11,   12,   68,   19,   19,   18,   18,   18,   19,   18,
+       18,   18,   18,   19,   19,   19,   19,   19,   18,   19,
+
+       19,   57,    0,   65,   63,   67,   67,    0,   57,   38,
+        0,   36,    0,   37,    0,   55,   55,    0,   57,   57,
+        0,   57,   57,   57,   57,    0,   41,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       57,   66,   57,   57,   65,    0,    0,    0,    0,    0,
+       67,   57,   57,   57,   57,   57,    2,    1,    0,    1,
+       49,   49,    0,   57,   17,   17,   15,   14,   15,    0,
+        0,    3,    9,    0,    6,    7,    9,    9,   13,    0,
+       13,   13,    0,   10,   38,    0,    0,   37,   19,   19,
+        0,   19,    0,    0,   18,   18,   18,   18,   18,   18,
+
+       19,   19,   48,   19,   19,   19,   19,   19,   19,   19,
+       19,   67,   67,    0,   38,   57,   57,   57,   57,   57,
+        0,    0,   41,   41,   48,   43,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       57,   57,    0,    0,    0,    0,    0,   67,   57,   57,
+       57,   57,   57,    0,   57,   10,    0,    0,    0,   18,
+       18,   18,   19,   19,   19,   19,   19,   19,   19,   19,
+       19,   19,   19,   19,   19,   67,   57,   57,   57,   57,
+       57,   57,    0,   42,   42,   42,    0,    0,   41,   41,
+       41,   41,   41,   41,   41,   48,   48,   48,   48,   48,
+
+       48,   48,   48,   48,   48,   48,   48,   44,   48,   45,
+       57,   57,   57,   57,    0,    0,    0,    0,    0,   67,
+       57,   57,   57,   57,    0,    0,    0,    0,    0,   18,
+       18,   19,   19,   48,   19,   19,   19,   19,   19,   19,
+       19,   19,   19,   19,   19,   57,   57,   57,    0,    0,
+       42,   42,   42,    0,   41,   41,    0,   41,   41,   41,
+       41,   41,   41,   41,   41,   41,   41,   41,    0,   27,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       46,   48,   57,   57,   57,   57,   57,    0,    0,    0,
+       67,   57,   57,   57,    0,    0,    0,   18,   18,   19,
+
+       48,   48,   19,   19,   19,   19,   19,   19,   19,   19,
+       19,   19,   19,   19,   57,   57,   57,   57,   57,    0,
+       42,    0,   41,   41,   41,    0,    0,    0,   41,   41,
+       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
+       41,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   50,   51,   52,   53,   57,    0,    0,   67,
+       57,   57,   57,    0,    0,    0,    0,    0,   19,   48,
+       48,   19,   19,   48,   19,   19,   19,   19,   19,   19,
+       19,   19,   19,   39,   39,   39,    0,    0,   41,   41,
+       41,   41,   41,   41,   41,    0,    0,    0,    0,    0,
+
+       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
+       41,   41,   41,   41,    0,   34,   48,   48,   48,    0,
+       26,   48,   48,   48,   48,   48,    0,   25,    0,   28,
+       57,    0,    0,   67,   57,   57,   57,   39,   39,   39,
+       48,   48,   19,   48,   48,   19,   19,   19,   57,   39,
+       39,   39,   39,    0,   41,    0,   41,   41,   41,   41,
+       41,   41,   41,   41,   41,   41,   41,    0,    0,    0,
+       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
+       41,   41,   41,   48,   48,   48,   48,   48,   48,   48,
+       48,   54,    0,    0,   67,   57,   22,   49,    0,   39,
+
+       39,   39,   39,   48,   48,   19,   48,   48,   19,   19,
+       19,   40,   40,   40,   40,   41,    0,    0,    0,   41,
+       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
+       41,   41,    0,    0,    0,    0,    0,   41,   41,   41,
+       41,   41,   41,   41,   41,   48,   48,   48,    0,   35,
+       48,   48,    0,   24,    0,   29,    0,   22,   67,   67,
+       57,    0,   57,   40,   40,   40,   40,   48,   48,   48,
+       48,   57,   57,   40,   40,   40,   40,    0,    0,    0,
+        0,    0,   41,   41,   41,   41,   41,   41,   41,   41,
+       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
+
+       41,   41,   47,    0,   32,   48,   48,   48,    0,   67,
+       67,   20,   67,   23,   22,    0,    0,    0,    0,    0,
+       22,    0,    0,    0,   40,   40,   40,   40,   48,   48,
+       48,   57,   57,   57,    0,    0,    0,   41,   41,   41,
+       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
+       41,   41,   41,   41,   41,    0,   30,   48,   48,   23,
+       67,    0,   22,    0,    0,    0,   48,   48,   57,   57,
+       57,   57,   57,    0,    0,    0,    0,    0,   41,   41,
+       41,   41,   41,   41,   41,   41,    0,   33,   48,   67,
+        0,    0,    0,    0,    0,   48,   57,   57,   57,   41,
+
+       41,   41,   41,   41,   41,    0,   31,   67,   67,   21,
+        0,    0,    0,   57,   57,   57,   57,   57,   41,   41,
+       41,   41,   41,    0,    0,    0,    0,    0,   39,   39,
        39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
-       39,   39,   39,   39,   39,   39,   39,    0,   30,   46,
-       46,   23,   65,    0,   22,    0,    0,    0,   46,   46,
-       55,   55,   55,   55,   55,    0,    0,    0,    0,    0,
-       39,   39,   39,   39,   39,   39,   39,   39,    0,   33,
-       46,   65,    0,    0,    0,    0,    0,   46,   55,   55,
-       55,   39,   39,   39,   39,   39,   39,    0,   31,   65,
-       65,   21,    0,    0,    0,   55,   55,   55,   55,   55,
-       39,   39,   39,   39,   39,    0,    0,    0,    0,    0,
-
-       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
-       37,   37,    0
+        0
     } ;
 
-static yyconst int yy_ec[256] =
+static yyconst flex_int32_t yy_ec[256] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -410,14 +506,14 @@ static yyconst int yy_ec[256] =
         1,    2,    4,    5,    6,    1,    7,    1,    1,    8,
         9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
        19,   20,   21,   22,   23,   24,   25,   26,    1,    1,
-       27,   28,   10,   29,   30,   31,   32,   33,   34,   31,
-       35,   36,   37,   38,   38,   39,   40,   41,   42,   43,
-       38,   44,   45,   46,   47,   48,   49,   50,   51,   38,
-       10,   52,   10,    1,   53,    1,   54,   55,   56,   57,
-
-       58,   59,   60,   61,   62,   60,   60,   63,   64,   65,
-       66,   60,   60,   67,   68,   69,   70,   60,   60,   60,
-       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
+       27,   28,   10,   29,   30,   31,   32,   33,   34,   35,
+       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
+       39,   45,   46,   47,   48,   49,   50,   51,   52,   39,
+       10,   53,   10,    1,   54,    1,   55,   56,   57,   58,
+
+       59,   60,   61,   62,   63,   61,   61,   64,   65,   66,
+       67,   61,   61,   68,   69,   70,   71,   61,   61,   61,
+       61,   61,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -434,858 +530,863 @@ static yyconst int yy_ec[256] =
         1,    1,    1,    1,    1
     } ;
 
-static yyconst int yy_meta[71] =
+static yyconst flex_int32_t yy_meta[72] =
     {   0,
         1,    2,    3,    4,    5,    6,    1,    7,    7,    1,
         8,    9,   10,   11,   12,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   14,   15,    7,    1,   16,
-       16,   16,   16,   16,   17,   17,   17,   17,   17,   17,
+       16,   16,   16,   16,   16,   17,   17,   17,   17,   17,
        17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
-       17,   18,   19,   20,   20,   20,   20,   20,   20,   21,
-       21,   21,   21,   21,   21,   21,   21,   21,   21,   21
+       17,   17,   18,   19,   20,   20,   20,   20,   20,   20,
+       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
+       21
     } ;
 
-static yyconst short int yy_base[931] =
+static yyconst flex_int16_t yy_base[959] =
     {   0,
-        0,   69,   71,   79,   94,  124,  175,  244,  153,  197,
-       85,  130,  314,    0, 4514, 4461, 4510, 5604, 4507, 5604,
-      382,   86, 5604, 5604, 4458, 5604,  140,  394,  195,  153,
-     4483, 5604, 5604,  453, 4383,   43,  508,   37, 4379,   65,
-     4378, 4385, 4367,  566,  581,   91,  151,  604,   39,   41,
-     4351,   34, 4348,  117, 4402, 4412,  428, 4371, 4382,  136,
-        0, 5604, 4407, 5604,    0,  606,  664,  105,    0, 4358,
-     5604,  115, 5604,  133, 5604,  138, 4357,  152,  171, 5604,
-      188,  383,  641,  694,  737,  235,  245,  794,  843, 4369,
-      157,  898, 4365, 4364, 4375, 4370,  944,    0,  206, 4351,
-
-      266, 4400, 4397, 4397, 5604,  263,  532,  585, 4386,  608,
-      707, 4346,  829,  648, 4345,  968,  981, 1018, 4359, 4370,
-      563,  708,  422, 4357,  371, 1062, 1106, 4343, 4347, 4340,
-     4344,  596, 4333, 4340, 4337, 4329, 4331,  644, 5604,  237,
-      137,  946, 4309, 4314, 4305, 4300, 4301,  121,  225,  530,
-      377,  369,  335,  445, 4366,  720, 4365,  931, 4314, 1018,
-      169,    0, 4361,  160, 5604, 5604,  991,  388,    0, 4312,
-      638, 5604, 5604, 4311,  661, 4310, 4356,  392,  221,  420,
-     4358,  653,  665, 1139, 4296, 1145,    0, 1173, 1201, 1210,
-     1037, 1239, 4333, 1081, 1170,  826, 1288, 1343, 4307,    0,
-
-     4311, 4309,  899, 4298, 4296, 4287, 4283, 4336, 4335, 1222,
-     1258, 1389, 1362,  968, 1428, 4323, 4310, 1472,  520, 1517,
-     1561, 1605, 4303, 4297, 4280, 4282, 4289, 4300, 4295, 4283,
-     4279, 4292, 4291, 4290,  654,  493, 4258, 4252, 4242, 4244,
-     4250,  534,  579, 4253,  491,  407,  506, 1413,  626, 4304,
-     4251, 4239, 1651, 1661, 4227, 1705,    0, 4197, 4164, 4155,
-     4151, 4151, 4135, 4112, 4111,  811, 4067, 4122, 1749,  378,
-        0,    0, 1041,  243, 4098, 4097, 1786,  805, 4096, 4095,
-      623, 1410, 1799, 1447, 1091, 1844, 1890, 4094,  429, 4073,
-      632, 4084, 4082, 4056, 4054, 4050, 4053,    0, 4046,    0,
-
-      929,  638,  544,  561, 4022, 4024, 4008, 4022, 4008,  746,
-      524, 1063,  413,  662, 1491, 4060, 4059, 4058, 1270, 1900,
-     1944,  763,  904, 4037, 4020, 4009, 4007, 3992, 3988,  818,
-     3993, 3988, 3912, 1990, 2002, 2014, 3930, 3929, 2024, 3929,
-     3912, 3911, 3910,  919, 1536, 1003, 1580, 1142, 2037,    0,
-     1626, 2083, 1680, 1372, 2128, 2174,  764, 5604, 3892, 3877,
-     3870, 3884, 3862, 3869, 3879, 3879,    0, 3863,  698,  593,
-      820,  973, 1093, 3857, 3824, 3825,  922,  897,  969, 1097,
-     3866, 3858, 2186, 2196, 3829, 3807, 3800, 3814, 3778, 3784,
-     3794, 3793, 3747, 3726, 3716, 3711, 3696, 3656, 2240, 1017,
-
-     2279, 2291, 1637, 3686, 3662, 3648, 3646, 2301, 1127, 3642,
-     3641, 2347, 1154, 1205, 1209, 1724, 1761, 2359,    0, 1763,
-     2405, 1774, 1457, 2450, 2496, 2521, 1024, 1127, 1181, 1190,
-     1169, 1207, 1224, 1392, 3602, 3584, 3577, 3560, 1240, 3581,
-     3547, 1313, 1391,  874, 1774, 1821, 3584, 3576, 3569, 1503,
-     3523, 3519,  869, 1379, 3515, 3511,  949, 1045,    0,    0,
-        0,    0, 3478, 2577, 1863, 1546, 3510, 3509, 3506, 1919,
-     2616, 1963, 1590, 2660, 2706, 2056, 3517, 3509, 3487, 1692,
-     1879, 1979, 2096, 2104, 2147, 2106, 2718,    0, 2217, 2764,
-     2250, 1734, 2809, 2855, 2880, 2086, 1133, 1088, 5604,  421,
-
-     2087, 1184, 2088, 1369, 5604, 1370, 5604, 1197, 3418, 3389,
-     1282, 2127, 1249, 1368, 3442, 3427, 2936, 3386, 3320, 3309,
-     3295, 2951, 1219, 3272, 3006, 1181, 3044,    0, 1709, 3290,
-     3263, 2260,   58, 2320, 1774, 3083,    0, 2380, 3129, 2424,
-     1831, 3173, 3219, 3270, 3265, 3231, 2336, 2462, 2464, 2471,
-     3256, 2477, 3243,    0, 2589, 3289, 2600, 1929, 3335, 3360,
-     1376, 1087, 1847, 1409, 1542, 1586, 3218, 3184, 3166, 1832,
-     1427, 2060, 3174, 2635, 3210, 3186, 3185, 2435, 3129, 3111,
-     3114, 3066, 3429, 1454,    0, 3486, 2679, 2737, 1483, 3085,
-     2989, 2839, 3525, 2819, 2003, 2280, 2783, 2381, 3537,    0,
-
-     2830, 3583, 3016, 2157, 3627, 3673, 3026, 2821, 2801, 2750,
-     2228, 2472, 2474, 2695, 1189, 1531, 3685,    0, 2647, 1848,
-     1925, 1602, 1522, 1849, 1587, 5604, 1664, 5604, 2692, 1967,
-     1630, 2177, 2014, 2406, 2761, 2674, 2630, 3731, 2272, 1926,
-     2155, 2500, 1927, 3741, 2076, 3780,    0, 1967, 2277, 3054,
-     2598, 2535, 2509, 2841, 2470, 2431, 2485, 2600, 3064, 2617,
-     3819,    0, 3104, 3865, 3148, 3036, 3909, 3955, 2390, 2373,
-     3966, 3118, 2338, 1742, 2298, 2129, 5604, 2743, 1825, 1738,
-     2219, 2153, 1825, 5604, 2062, 2083, 3130, 3172, 3276, 3281,
-     1984, 2880, 1920, 3360, 3192, 1912, 1877, 1858, 3274, 1744,
-
-     2326, 2643, 2745, 3978, 3990, 4002, 1700, 1693, 4014, 1662,
-     1623, 2856, 2951, 3496, 3084, 4026,    0, 3508, 4072, 3556,
-     3074,    0, 1599, 1510, 1503, 3319, 1423, 2328, 5604, 3154,
-     2037, 5604, 2124, 3602, 3646, 1409, 1403, 4118, 2407, 2791,
-     4130, 2334, 4142, 4154, 3659, 3704, 1390, 1286, 1251, 3418,
-     1158, 1087, 3105, 1077, 1056, 4166,    0, 3568, 2499, 5604,
-     3270, 2220, 3751, 1014, 1005,  957, 3614, 2522, 4178, 4190,
-     4202, 3761, 3790, 3800,  684,    0,  683, 2685, 5604,  658,
-     2222, 5604,  522,  382, 4214, 4226, 2335, 4238, 4250, 3840,
-     5604, 3846, 3884, 3202, 5604, 3928,  374,  208,  117, 3716,
-
-     4260, 4297, 4334, 4045, 4091, 4270,   59, 4371, 3941, 5604,
-     4280, 3771, 5604, 4423, 4444, 4465, 4486, 4507, 4528, 4549,
-     4570, 4591, 4600, 2074, 4620, 4641, 2383, 4662, 4683, 4704,
-     4725, 4746, 4767, 4788, 4809, 2337, 4830, 4839, 4847, 4856,
-     4876, 4897, 4918, 2474, 4939, 4960, 4981, 5002, 5011, 5030,
-     5039, 5048, 2421, 2516, 5056, 5064, 5072, 5081, 5089, 5096,
-     5104, 5112, 5121, 5131, 2600, 2694, 5139, 5147, 5155, 2695,
-     2757, 5164, 5174, 5194, 2798, 5203, 5211, 2799, 5220, 5230,
-     5250, 2228, 2615, 5259, 5271, 5280, 5290, 2803, 2825, 5299,
-     5309, 5318, 5338, 2700, 5347, 5359, 2841, 2872, 5368, 5378,
-
-     2873, 5387, 5397, 5417, 5438, 5459, 3115, 3116, 5479, 3168,
-     5486, 5496, 2951, 2967, 5505, 2520, 5525, 3304, 3313, 5534,
-     5544, 3517, 3314, 3318, 5552, 5562, 5582, 3814, 3319, 3430
+        0,   70,   72,   80,   87,  126,  178,  248,  156,  200,
+      132,  140,  319,    0, 4836, 4782, 4831, 5587, 4824, 5587,
+      388,   95, 5587, 5587, 4774, 5587,  142,  400,  198,  155,
+     4800, 5587, 5587,  460, 4784,   37,   40,  516,   62, 4777,
+       49, 4776, 4784, 4764,  575,  590,  125,  223,  613,   33,
+       45, 4740,   38, 4737,   94, 4788, 4796,  434, 4752, 4764,
+      136,    0, 5587, 4770, 5587,    0,  615,  674,  108,    0,
+     4690, 5587,   70, 5587,  104, 5587,  152, 4685,   73,  135,
+     5587,  161,  171,  651,  705,  749,  256,  245,  807,  857,
+     4695,   82,  151,  913, 4689, 4688, 4692, 4683,  960,    0,
+
+       94, 4662,  645, 4712, 4709, 4709, 5587,  266,  541,  204,
+     4698,  614,  718, 4657,  843,  947, 4649,  984,  997, 1035,
+     4670, 4680,  572,  719,  276, 4666,  175, 1080, 1125, 4651,
+     4656, 4649, 4630, 4633,  406, 4593, 4595, 4590, 4582, 4583,
+      391, 5587,  173,  339,  637, 4561, 4562, 4550, 4541, 4540,
+      397,  133,  385,  139,  349,  395,  257, 4604,  731, 4603,
+     1019, 4544, 1036,  345,    0, 4592,  296, 5587, 5587,  941,
+      393,    0, 4538,  654, 5587, 5587, 4535,  552, 4532, 4579,
+      435,  595,  425, 4579,  649,  981, 1159, 4527, 1165,    0,
+     1194, 1222, 1189, 1057, 1261, 4565, 1100, 1221,  840, 1311,
+
+     1367, 4537,    0, 4534, 4527, 4526,  991, 4513, 4509, 4500,
+     4489, 4543, 4538, 1236, 1246, 1414, 1281,  985, 1454, 4525,
+     4512, 1499,  421, 1545, 1590, 1635, 4505, 4496, 4497, 4480,
+     4475, 4477, 4475, 4486, 4481, 4468, 4464, 4450, 4449, 4444,
+      976,  398, 4410, 4415, 4405, 4407, 4413,  541,  411, 4416,
+      396,  490,  499, 1438,  515, 4382, 4369, 4368, 1682, 1692,
+     4367, 1737,    0, 4348, 4339, 4324, 4326, 4333, 4332, 4344,
+     4339, 4326, 4337,  625, 4303, 4366, 1782,  415,    0,    0,
+     1061,  636, 4342, 4341, 1820,  606, 4340, 4339,  685, 1387,
+     1833, 1435, 1110, 1879, 1926, 4338,  677, 4320, 4315,  645,
+
+     4327, 4320, 4323, 4312, 4299, 4295, 4298,    0, 4301,    0,
+      832,  176,  704,  648, 4284, 4286, 4270, 4284, 4270,  660,
+      516, 1081,  708,  672, 1474, 4323, 4322, 4321, 1191, 1936,
+     1981,  682, 4291,  911, 4299, 4292, 4295, 4284, 4261, 4257,
+     4264,  249, 4281, 4287, 4244, 2028, 2040, 2052, 4276, 4274,
+     2062, 4273, 4271, 4270, 4268,  702, 1519,  820, 1565, 1139,
+     2075,    0, 1612, 2122, 1655, 1291, 2168, 2215,  776, 5587,
+     4243, 4226, 4151, 4133, 4137, 4117, 4081, 4077, 4077, 4066,
+        0, 4038,  533,  888,  709,  980, 1116, 4021, 3992, 3982,
+      937,  979,  790, 1135, 4025, 4017, 2227, 2237, 3998, 3956,
+
+     3963, 3956, 3971, 3952, 3925, 3921, 3921, 3910, 3859, 3880,
+     3871, 3855, 3856, 3815, 2282,  977, 2322, 2334, 1667, 3846,
+     3829, 3822, 3804, 2344, 1147, 3815, 3814, 2391, 1198, 1299,
+     1403, 1712, 1749, 2403,    0, 1762, 2450, 1792, 1484, 2496,
+     2543, 2568, 1188, 1246, 1394, 1106, 1419, 1880, 1393, 1440,
+     1107, 1202, 3750, 3725, 3723, 3722,  983, 3744, 3699, 1167,
+     1416,  575,  986, 1802, 3746, 3699, 3675, 1531, 1313, 3637,
+     3633, 1338, 3613, 1553, 3605, 3612, 1481, 1571,    0,    0,
+        0,    0, 3564, 2625, 1853, 1623, 3593, 3584, 3571, 1908,
+     2665, 1956, 1722, 2710, 2757, 2001, 3570, 3558, 3555, 1968,
+
+     1758, 1759, 1893, 2017, 2095, 2135, 2769,    0, 2148, 2816,
+     2188, 1812, 2862, 2909, 1572, 5587, 2934, 1023, 1555, 1592,
+     5587, 1139, 1748, 2122, 1846, 2181, 1593, 5587, 1695, 5587,
+      897, 3468, 3442,  883, 2210, 1220, 1164, 3473, 3472, 2991,
+     3424, 3419, 3006, 3350, 3331, 1413, 1038, 3283, 3062, 1493,
+     3101,    0, 1391, 3320, 3319, 2258, 1435, 2292, 2041, 3141,
+        0, 2304, 3154, 2364, 2105, 3199, 3246, 3309, 3308, 3258,
+     2311, 2380, 2416, 2425, 3302, 2429, 3270,    0, 2472, 3317,
+     2516, 2268, 3364, 3389, 1479, 1239, 1915, 1836, 1587, 1981,
+     2102, 3254, 3236, 3229, 1661, 1582, 2519, 3220, 2635, 3238,
+
+     3212, 3192, 2646, 3152, 3143, 3459, 3139, 3135, 1763, 1860,
+        0, 3517, 2652, 2685, 1728, 3126, 3114, 3099, 3557, 3065,
+     2145, 2305, 2730, 2427, 3569,    0, 2791, 3582, 2836, 2429,
+     3627, 3674, 2882, 3045, 3021, 3020, 2483, 2746, 2898, 3074,
+     1309, 1433, 3686,    0, 2697, 1916, 2171, 1834, 2007, 5587,
+     1812, 1871, 2008, 5587, 2101, 5587, 2885, 2368, 1919, 2155,
+     2280, 2814, 3088, 2849, 2792, 3698, 2742, 2170, 2430, 2523,
+     2452, 3708, 1539, 3748,    0, 2192, 1976, 3085, 2750, 2723,
+     2705, 3113, 2498, 2453, 2532, 2666, 3126, 3006, 3788,    0,
+     3176, 3801, 3219, 3119, 3846, 3893, 2442, 2437, 3904, 3235,
+
+     2383, 2013, 2279, 2240, 5587, 2795, 2280, 2127, 2126, 2126,
+     2219, 5587, 1614, 2049, 3199, 3304, 3309, 3314, 2022, 2934,
+     1955, 3389, 3527, 1949, 1902, 1873, 3448, 1820, 2548, 2796,
+     2843, 3916, 3928, 3940, 1777, 1773, 3952, 1740, 1663, 3085,
+     3155, 3537, 3298, 3964,    0, 3604, 3977, 3647, 3547, 4024,
+     1647, 1557, 1512, 3658, 1491, 2736, 5587, 2862, 2285, 5587,
+     2262, 3718, 3728, 1467, 1380, 4036, 2737, 2863, 4048, 2743,
+     4060, 4072, 3763, 3769, 1260, 1233, 1183, 3615, 1150, 1063,
+     3329, 1029,  985, 4084,    0, 2368, 2864, 5587, 3295, 2288,
+     3821,  830,  822,  808, 3833, 2910, 4096, 4108, 4120, 3866,
+
+     3997, 4130,  777,    0,  702, 2912, 5587,  683, 2492, 5587,
+      586,  571, 4142, 4154, 2809, 4166, 4178, 3878, 5587, 4188,
+     4198, 3738, 5587, 4208,  458,  286,  244, 4009, 4218, 4256,
+     4294, 4228, 4238, 4266,   55, 4332, 4248, 5587, 4304, 3779,
+     5587, 4385, 4406, 4427, 4448, 4469, 4490, 4511, 4532, 4553,
+     4562, 2563, 4582, 4603, 2523, 4624, 4645, 4666, 4687, 4708,
+     4729, 4750, 4771, 2567, 4792, 4801, 4809, 4818, 4838, 4859,
+     4880, 2794, 4901, 4922, 4943, 4964, 4985, 4994, 5013, 5022,
+     5031, 2360, 2857, 5039, 5047, 5055, 5064, 5072, 5079, 5087,
+     5095, 5104, 5114, 2926, 3084, 5122, 5130, 5138, 3085, 3101,
+
+     5147, 5157, 5177, 3187, 5186, 5194, 3195, 5203, 5213, 5233,
+     2583, 2681, 5242, 5254, 5263, 5273, 3215, 3234, 5282, 5292,
+     5301, 5321, 2896, 5330, 5342, 3235, 3238, 5351, 5361, 3343,
+     5370, 5380, 5400, 5421, 5442, 3347, 3348, 5462, 3352, 5469,
+     5479, 2903, 3006, 5488, 3143, 5508, 3353, 3357, 5517, 5527,
+     3358, 3460, 5535, 5545, 5565, 4279, 3598, 3615
     } ;
 
-static yyconst short int yy_def[931] =
+static yyconst flex_int16_t yy_def[959] =
     {   0,
-      813,    1,    1,    1,  814,  814,  815,  815,  816,  816,
-      817,  817,  813,   13,  813,  818,  813,  813,  813,  813,
-      819,  820,  813,  813,  821,  813,  822,  818,   28,   28,
-      823,  813,  813,  813,   34,   34,   34,   37,   37,   37,
-       37,   37,   37,  818,   28,  818,  813,  819,   34,   34,
-       37,   37,   37,  813,  824,  813,  825,   37,   37,  818,
-      826,  813,  826,  813,  826,  813,  819,  813,  827,  828,
-      813,  828,  813,  828,  813,  829,  830,  830,  830,  813,
-      813,  831,  832,  833,  813,   85,   85,   85,  813,   89,
-       89,   89,   92,   92,   92,   92,   85,   88,   88,  818,
-
-      818,  813,  813,  834,  813,  835,  813,  820,  836,  831,
-      820,  821,  821,  822,  837,  818,  818,   28,  838,  118,
-      118,  118,  118,  839,  840,   37,  126,  127,  127,  127,
-      127,  127,  127,  127,  127,  127,  127,  818,  813,  818,
-      818,  813,  813,  813,  813,  813,  813,  834,  818,  118,
-      818,  818,  818,  813,  813,  813,  813,  841,  842,  818,
-      818,  843,  843,  813,  813,  813,  835,  813,  844,  845,
-      845,  813,  813,  845,  845,  830,  813,  830,  830,  813,
-      813,  831,  831,  831,  846,  847,   88,  846,  848,  813,
-      813,   85,  192,  192,  192,  192,  813,  197,  198,  849,
-
-      198,  198,  198,  198,  198,   88,   88,  834,  850,  813,
-      813,  818,  212,  212,  118,  215,  851,  813,  852,  813,
-      127,  221,  222,  222,  222,  222,  222,  222,  222,  222,
-      222,  222,  222,  222,  818,  818,  813,  813,  813,  813,
-      813,  834,  818,  215,  818,  818,  818,  813,  818,  813,
-      853,  854,  813,   88,  254,  197,  198,  198,  198,  198,
-      198,  198,  198,  198,  198,   88,   88,  850,  818,  818,
-      212,  212,  212,  818,  855,  856,  856,  277,  857,  856,
-      858,  220,  813,  283,  283,  813,  283,  222,  222,  222,
-      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
-
-      818,  818,  818,  818,  813,  813,  813,  813,  813,  834,
-      818,  818,  818,  818,  813,  813,  853,  853,  813,  254,
-      197,  198,  859,  198,  198,  198,  198,  198,  198,   88,
-       88,   88,   88,  212,  212,  212,  813,  860,  860,  339,
-      860,  861,  862,  863,  813,  864,  286,  864,  813,  349,
-      864,  813,  352,  352,  813,  352,  813,  813,  222,  222,
-      222,  222,  222,  222,  222,  222,  222,  222,  818,  818,
-      818,  818,  818,  813,  813,  813,  834,  818,  818,  818,
-      865,  866,  813,   88,  321,  859,  859,  198,  198,  198,
-      198,  198,  198,   88,   88,   88,   88,   88,  818,  818,
-
-      212,  212,  818,  867,  867,  868,  869,  813,  813,  870,
-      871,  813,  872,  872,  873,  355,  873,  813,  418,  873,
-      813,  421,  421,  813,  421,  813,  426,  426,  426,  426,
-      426,  426,  426,  426,  818,  818,  818,  818,  818,  813,
-      813,  874,  818,  818,  818,  813,  813,  875,  875,  813,
-      859,  859,  198,  859,  198,  198,  198,  198,   88,   88,
-       88,   88,   88,  818,  464,  464,  813,  876,  877,  408,
-      813,  471,  471,  813,  471,  813,  813,  878,  878,  813,
-      813,  879,  879,  880,  424,  880,  813,  487,  880,  813,
-      490,  490,  813,  490,  813,  495,  495,  813,  813,  495,
-
-      495,  495,  495,  813,  813,  813,  813,  818,  813,  813,
-      881,  818,  818,  818,  882,  883,  813,  884,  884,  884,
-      884,  813,  522,  885,  818,  818,  818,  527,  527,  813,
-      886,  813,  887,  474,  887,  813,  536,  887,  813,  539,
-      539,  813,  539,  888,  889,  813,  813,  890,  890,  891,
-      892,  891,  813,  553,  891,  813,  556,  556,  556,  813,
-      560,  560,  560,  560,  560,  560,  818,  813,  813,  893,
-      818,  818,  818,  813,  813,  894,  894,  813,  895,  895,
-      895,  895,  813,  583,  896,  818,  586,  586,  586,  813,
-      897,  898,  813,  899,  899,  900,  542,  900,  813,  599,
-
-      900,  813,  602,  602,  813,  602,  813,  813,  901,  901,
-      813,  813,  902,  902,  903,  903,  813,  617,  903,  560,
-      560,  560,  560,  560,  813,  813,  813,  813,  813,  813,
-      904,  893,  818,  905,  906,  907,  908,  813,  907,  909,
-      909,  909,  909,  818,  818,  818,  646,  646,  818,  813,
-      813,  910,  910,  813,  813,  911,  911,  912,  605,  912,
-      813,  661,  912,  813,  664,  664,  813,  664,  913,  914,
-      813,  813,  915,  915,  560,  813,  813,  560,  560,  560,
-      813,  904,  904,  813,  893,  818,  905,  905,  905,  905,
-      916,  905,  917,  917,  813,  813,  907,  907,  813,  813,
-
-      909,  909,  909,  646,  646,  646,  918,  919,  813,  813,
-      920,  920,  921,  667,  921,  813,  716,  921,  813,  719,
-      719,  922,  813,  913,  913,  813,  813,  813,  813,  560,
-      560,  813,  893,  813,  813,  923,  924,  813,  909,  909,
-      646,  818,  646,  646,  818,  813,  813,  918,  918,  813,
-      813,  925,  925,  926,  926,  926,  756,  926,  813,  813,
-      560,  927,  813,  813,  923,  923,  813,  909,  646,  646,
-      646,  813,  813,  813,  813,  928,  928,  813,  813,  927,
-      927,  813,  929,  930,  813,  646,  818,  646,  646,  818,
-      813,  813,  813,  813,  813,  813,  813,  929,  929,  813,
-
-      818,  818,  818,  813,  813,  813,  818,  818,  818,  813,
-      813,  813,    0,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813
+      841,    1,    1,    1,  842,  842,  843,  843,  844,  844,
+      845,  845,  841,   13,  841,  846,  841,  841,  841,  841,
+      847,  848,  841,  841,  849,  841,  850,  846,   28,   28,
+      851,  841,  841,  841,   34,   34,   34,   34,   38,   38,
+       38,   38,   38,   38,  846,   28,  846,  841,  847,   34,
+       34,   38,   38,   38,  841,  852,  841,  853,   38,   38,
+      846,  854,  841,  854,  841,  854,  841,  847,  841,  855,
+      856,  841,  856,  841,  856,  841,  857,  858,  858,  858,
+      841,  841,  859,  860,  861,  841,   86,   86,   86,  841,
+       90,   90,   90,   90,   94,   94,   94,   94,   86,   89,
+
+       89,  846,  846,  841,  841,  862,  841,  863,  841,  848,
+      864,  859,  848,  849,  849,  850,  865,  846,  846,   28,
+      866,  120,  120,  120,  120,  867,  868,   38,  128,  129,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      846,  841,  846,  846,  841,  841,  841,  841,  841,  841,
+      862,  846,  120,  846,  846,  846,  841,  841,  841,  841,
+      869,  870,  846,  846,  871,  871,  841,  841,  841,  863,
+      841,  872,  873,  873,  841,  841,  873,  873,  874,  841,
+      874,  874,  841,  841,  859,  859,  859,  875,  876,   89,
+      875,  877,  841,  841,   86,  195,  195,  195,  195,  841,
+
+      200,  201,  878,  201,  201,  201,  201,  201,  201,   89,
+       89,  862,  879,  841,  841,  846,  216,  216,  120,  219,
+      880,  841,  881,  841,  129,  225,  226,  226,  226,  226,
+      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
+      846,  846,  841,  841,  841,  841,  841,  862,  846,  219,
+      846,  846,  846,  841,  846,  841,  882,  883,  841,   89,
+      260,  200,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,   89,   89,  879,  846,  846,  216,  216,
+      216,  846,  884,  885,  885,  285,  886,  885,  887,  224,
+      841,  291,  291,  841,  291,  226,  226,  226,  226,  226,
+
+      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
+      846,  846,  846,  846,  841,  841,  841,  841,  841,  862,
+      846,  846,  846,  846,  841,  841,  882,  882,  841,  260,
+      200,  201,  201,  888,  201,  201,  201,  201,  201,  201,
+      201,   89,   89,   89,   89,  216,  216,  216,  841,  889,
+      889,  351,  889,  890,  891,  892,  841,  893,  294,  893,
+      841,  361,  893,  841,  364,  364,  841,  364,  841,  841,
+      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
+      226,  226,  846,  846,  846,  846,  846,  841,  841,  841,
+      862,  846,  846,  846,  894,  895,  841,   89,  331,  201,
+
+      888,  888,  201,  201,  201,  201,  201,  201,  201,   89,
+       89,   89,   89,   89,  846,  846,  216,  216,  846,  896,
+      896,  897,  898,  841,  841,  899,  900,  841,  901,  901,
+      902,  367,  902,  841,  434,  902,  841,  437,  437,  841,
+      437,  841,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  846,  846,  846,  846,  846,  841,  841,  903,
+      846,  846,  846,  841,  841,  904,  904,  841,  201,  888,
+      888,  201,  201,  888,  201,  201,  201,  201,   89,   89,
+       89,   89,   89,  846,  484,  484,  841,  905,  906,  424,
+      841,  491,  491,  841,  491,  841,  841,  907,  907,  841,
+
+      841,  908,  908,  909,  440,  909,  841,  507,  909,  841,
+      510,  510,  841,  510,  841,  841,  841,  517,  517,  841,
+      841,  517,  517,  517,  517,  517,  841,  841,  841,  841,
+      846,  841,  841,  910,  846,  846,  846,  911,  912,  841,
+      913,  913,  841,  913,  913,  543,  543,  914,  846,  846,
+      846,  551,  551,  841,  915,  841,  916,  494,  916,  916,
+      560,  916,  841,  563,  563,  841,  563,  917,  918,  841,
+      841,  919,  919,  920,  921,  920,  841,  577,  920,  841,
+      580,  580,  580,  841,  584,  584,  584,  584,  584,  584,
+      584,  846,  841,  841,  922,  846,  846,  846,  841,  841,
+
+      923,  923,  841,  924,  924,  841,  924,  924,  606,  606,
+      925,  846,  612,  612,  612,  841,  926,  927,  841,  928,
+      928,  929,  566,  929,  929,  625,  929,  841,  628,  628,
+      841,  628,  841,  841,  930,  930,  841,  841,  931,  931,
+      932,  932,  932,  643,  932,  584,  584,  584,  841,  841,
+      584,  584,  841,  841,  841,  841,  841,  841,  933,  922,
+      846,  934,  935,  936,  937,  841,  936,  938,  938,  938,
+      938,  846,  846,  846,  674,  674,  846,  841,  841,  939,
+      939,  841,  841,  940,  940,  941,  631,  941,  941,  689,
+      941,  841,  692,  692,  841,  692,  942,  943,  841,  841,
+
+      944,  944,  584,  841,  841,  584,  584,  584,  841,  933,
+      933,  841,  922,  846,  934,  934,  934,  934,  945,  934,
+      946,  946,  841,  841,  936,  936,  841,  841,  938,  938,
+      938,  674,  674,  674,  947,  948,  841,  841,  949,  949,
+      950,  695,  950,  950,  744,  950,  841,  747,  747,  747,
+      841,  942,  942,  841,  841,  841,  841,  584,  584,  841,
+      922,  841,  841,  951,  952,  841,  938,  938,  674,  846,
+      674,  674,  846,  841,  841,  947,  947,  841,  841,  953,
+      953,  954,  954,  954,  784,  784,  841,  841,  584,  955,
+      841,  841,  951,  951,  841,  938,  674,  674,  674,  841,
+
+      841,  841,  841,  956,  956,  841,  841,  955,  955,  841,
+      957,  958,  841,  674,  846,  674,  674,  846,  841,  841,
+      841,  841,  841,  841,  841,  957,  957,  841,  846,  846,
+      846,  841,  841,  841,  846,  846,  846,  841,  841,  841,
+        0,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841
     } ;
 
-static yyconst short int yy_nxt[5675] =
+static yyconst flex_int16_t yy_nxt[5659] =
     {   0,
        16,   17,   18,   19,   20,   21,   22,   23,   24,   16,
        25,   26,   16,   16,   27,   28,   29,   30,   28,   28,
        28,   28,   28,   28,   28,   31,   32,   33,   16,   34,
-       35,   35,   35,   36,   37,   37,   37,   37,   38,   37,
-       39,   37,   40,   41,   42,   43,   37,   37,   37,   37,
-       37,   44,   16,   45,   45,   45,   45,   45,   45,   16,
-       16,   16,   16,   16,   16,   16,   16,   46,   16,   16,
-       47,  532,   54,  130,   48,  135,   55,  127,  131,  127,
-       54,  127,   56,  534,   55,   57,   78,   18,   79,   80,
-       56,  109,  129,   57,  133,   17,   62,   63,  150,   64,
-
-       49,   50,  149,  152,   51,   64,  168,  139,  134,   58,
-      101,  110,   52,   59,   37,   53,   37,   58,  154,   64,
-       65,   59,   37,  105,   37,   17,   62,   63,  155,   64,
-      796,   78,   18,   79,   80,   64,   81,  111,   60,  175,
-      139,  172,  101,  115,  115,   66,   60,  115,  115,   64,
-       65,  140,  142,  178,   17,   18,   19,   71,   67,  173,
-      141,  168,  139,   72,   73,   74,  171,  115,  122,  122,
-      122,  122,  122,  123,  179,   66,   17,   18,   19,   75,
-       67,   81,  143,  144,  171,  242,  145,  101,  101,  180,
-      181,  116,  176,  236,  146,  198,  140,  147,   17,   18,
-
-       19,   71,   67,  177,   76,  161,  201,   72,   73,   74,
-      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
-      101,  796,  177,   75,  179,  249,   68,   69,   69,   69,
-       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
-       69,   69,   69,   69,   69,   17,   18,   19,   76,   67,
-      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
-      195,  195,  195,  195,  195,  196,  206,  100,  119,  100,
-      100,  100,  177,  100,  100,  207,  101,  100,  107,  107,
-      107,  107,  107,  107,  107,  107,  107,  107,  101,  243,
-      235,  100,  100,  100,  101,   68,   69,   69,   69,   69,
-
-       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
-       69,   69,   69,   69,   33,   17,   18,   19,   33,   33,
-       82,   23,   24,   33,   83,   26,   33,   33,   84,   85,
-       86,   87,   85,   85,   85,   85,   85,   85,   85,   31,
-       88,   33,   33,   89,   90,   90,   90,   91,   92,   92,
-       92,   92,   93,   92,   94,   92,   95,   92,   96,   92,
-       92,   92,   92,   92,   92,   68,   33,   97,   97,   97,
-       97,   97,   97,   98,   98,   98,   98,   98,   98,   98,
-       98,   99,   98,   98,  105,  218,  101,  796,  109,  168,
-      139,  269,  247,  178,  106,  796,  220,  107,  107,  107,
-
-      107,  107,  107,  107,  107,  107,  107,  117,  183,  118,
-      118,  118,  118,  118,  118,  118,  118,  118,  118,  119,
-      101,  180,  181,  120,  120,  120,  120,  120,  101,  101,
-      357,  159,  159,  246,  184,  159,  159,  216,  216,  216,
-      216,  216,  216,  177,  245,  101,  154,  120,  120,  120,
-      120,  120,  120,  100,  358,  159,  155,  127,  101,  100,
-      313,  563,  100,  100,  101,  100,  100,  100,  126,  126,
-      126,  126,  126,  126,  126,  126,  126,  126,  119,  160,
-      311,  100,  126,  126,  126,  126,  126,  127,  127,  127,
-      127,  128,  127,  127,  127,  127,  127,  127,  127,  127,
-
-      127,  127,  127,  127,  101,  127,  120,  120,  120,  120,
-      120,  120,  100,  100,  100,  100,  100,  100,  100,  100,
-      100,  100,  100,  127,  127,  127,  127,  127,  127,  127,
-      127,  127,  127,  813,  218,  796,  105,  127,  127,  127,
-      127,  127,  101,  100,  101,  282,  127,  107,  107,  107,
-      107,  107,  107,  107,  107,  107,  107,  101,  304,  311,
-      372,  100,  100,  100,  100,  100,  100,  138,  139,  100,
-      100,  100,  311,  100,  100,  101,  378,  100,  216,  216,
-      216,  216,  216,  216,  216,  216,  216,  216,  244,  310,
-      813,  100,  100,  100,  100,  101,  120,  120,  120,  120,
-
-      120,  120,  120,  120,  120,  120,  105,  164,  139,  165,
-      813,  166,  101,  109,  436,  165,  106,  166,  373,  107,
-      107,  107,  107,  107,  107,  107,  107,  107,  107,  226,
-      101,  166,  166,  813,  227,  311,  111,  218,  228,  170,
-      229,  185,  170,  170,  101,  168,  139,  185,  282,  170,
-      185,  115,  115,  185,  185,  115,  115,  166,  813,  184,
-      782,  371,  168,  139,  170,  148,  105,  187,  360,  185,
-      109,  301,  302,  361,  303,  115,  167,  101,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  101,
-      813,  314,  188,  185,  115,  101,  532,  115,  115,  116,
-
-      115,  115,  115,  115,  184,  101,  115,  115,  108,  714,
-      108,  108,  171,  101,  108,  108,  184,  435,  108,  380,
-      187,  115,  115,  216,  216,  216,  216,  216,  216,  216,
-      216,  216,  216,  108,  108,  107,  107,  107,  107,  107,
-      107,  107,  107,  107,  107,  190,  115,  187,  105,  101,
-      191,  187,  192,  192,  192,  192,  192,  192,  192,  192,
-      192,  192,  119,  187,  357,  357,  193,  193,  193,  193,
-      193,  187,  187,  187,  187,  187,  187,  187,  187,  187,
-      187,  187,  187,  187,  187,  187,  187,  187,  358,  358,
-      193,  193,  193,  193,  193,  193,  187,  187,  187,  187,
-
-      187,  187,  187,  187,  187,  187,  187,  813,  377,  187,
-      187,  187,  187,  187,  187,  187,  187,  187,  187,  813,
-      341,  341,  341,  187,  187,  187,  187,  187,  330,  331,
-      112,  332,  112,  112,  112,  394,  112,  112,  395,  437,
-      112,  255,  255,  255,  255,  255,  255,  187,  187,  187,
-      187,  187,  187,  187,  112,  112,  112,  187,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  119,  187,
-      498,  101,  197,  197,  197,  197,  197,  198,  198,  198,
-      198,  199,  198,  198,  198,  198,  198,  198,  198,  198,
-      198,  198,  198,  198,  499,  200,  193,  193,  193,  193,
-
-      193,  193,  187,  187,  187,  187,  187,  187,  187,  187,
-      187,  187,  187,  198,  198,  198,  198,  198,  198,  198,
-      198,  198,  198,  813,  105,  101,  443,  198,  198,  198,
-      198,  198,  260,  218,  159,  159,  198,  261,  159,  159,
-      386,  262,  513,  263,  282,  387,  369,  142,  101,  370,
-      504,  187,  187,  187,  187,  187,  187,  813,  159,  193,
-      193,  193,  193,  193,  193,  193,  193,  193,  193,  114,
-      763,  100,  100,  114,  505,  100,  100,  143,  144,  114,
-      101,  145,  160,  272,  272,  272,  272,  272,  273,  146,
-      438,  442,  147,  114,  114,  100,  212,  213,  214,  212,
-
-      212,  212,  212,  212,  212,  212,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  345,  218,  763,  158,
-      101,  100,  100,  158,  101,  100,  100,  763,  347,  158,
-      399,  444,  101,  215,  215,  215,  215,  215,  215,  215,
-      215,  215,  215,  158,  158,  100,  506,  215,  215,  215,
-      215,  215,  251,  252,  253,  251,  251,  251,  251,  251,
-      251,  251,  100,  100,  100,  100,  496,  127,  101,  813,
-      507,  215,  215,  215,  215,  215,  215,  221,  221,  221,
-      221,  221,  221,  221,  221,  221,  221,  119,  119,  498,
-      532,  221,  221,  221,  221,  221,  255,  255,  255,  255,
-
-      255,  255,  255,  255,  255,  255,  350,  350,  350,  350,
-      350,  351,  714,  499,  101,  215,  215,  215,  215,  215,
-      215,  127,  127,  127,  127,  127,  127,  127,  127,  127,
-      127,  813,  379,  622,  127,  127,  127,  127,  127,  127,
-      182,  218,  182,  182,  101,  185,  182,  182,  101,  439,
-      182,  185,  282,  445,  185,  813,  218,  185,  185,  100,
-      100,  100,  100,  100,  100,  182,  182,  347,  218,  127,
-      127,  187,  497,  185,  185,  562,  185,  185,  185,  347,
-      185,  185,  498,  659,  185,  255,  255,  255,  255,  255,
-      255,  255,  255,  255,  255,  525,  188,  185,  185,  185,
-
-      185,  115,  345,  218,  115,  115,  499,  115,  115,  115,
-      115,  115,  127,  115,  115,  115,  565,  502,  345,  218,
-      127,  115,  345,  218,  127,  504,  500,  187,  115,  115,
-      347,  501,  101,  127,  416,  115,  115,  211,  211,  211,
-      211,  211,  211,  211,  211,  211,  211,  503,  101,  505,
-      127,  198,  190,  115,  254,  254,  254,  254,  254,  254,
-      254,  254,  254,  254,  746,  567,  584,  127,  254,  254,
-      254,  254,  254,  211,  211,  211,  211,  211,  211,  211,
-      211,  211,  211,  315,  105,  316,  316,  316,  316,  316,
-      316,  101,  254,  254,  254,  254,  254,  254,  187,  746,
-
-      101,  508,  187,  256,  256,  256,  256,  256,  256,  256,
-      256,  256,  256,  119,  187,  105,  572,  256,  256,  256,
-      256,  256,  198,  198,  198,  198,  198,  198,  198,  198,
-      198,  198,  198,  198,  198,  198,  198,  198,  198,  570,
-      200,  254,  254,  254,  254,  254,  254,  187,  187,  187,
-      187,  187,  187,  187,  187,  187,  187,  187,  198,  198,
-      198,  198,  198,  198,  198,  198,  198,  198,  813,  511,
-      504,  506,  198,  198,  198,  198,  198,  271,  271,  271,
-      271,  271,  271,  271,  271,  271,  271,  419,  419,  419,
-      419,  419,  420,  506,  505,  507,  187,  187,  187,  187,
-
-      187,  187,  269,  746,  270,  270,  270,  270,  270,  270,
-      270,  270,  270,  270,  159,  520,  763,  507,  159,  101,
-      521,  621,  763,  127,  159,  287,  287,  287,  287,  287,
-      287,  287,  287,  287,  287,  127,  573,  218,  159,  159,
-      101,  100,  101,  274,  274,  274,  274,  274,  274,  274,
-      274,  274,  274,  512,  624,  627,  127,  274,  274,  274,
-      274,  274,  349,  349,  349,  349,  349,  349,  349,  349,
-      349,  349,  488,  488,  488,  488,  488,  489,  101,  628,
-      633,  274,  274,  274,  274,  274,  274,  276,  277,  278,
-      278,  278,  278,  278,  278,  278,  278,  279,  649,  649,
-
-      649,  280,  280,  280,  280,  280,  381,  382,  383,  381,
-      381,  381,  381,  381,  381,  381,  446,  218,  447,  447,
-      447,  447,  447,  447,  218,  280,  280,  280,  280,  280,
-      280,  218,  283,  284,  285,  283,  283,  283,  283,  283,
-      283,  283,  286,  625,  813,  218,  287,  287,  287,  287,
-      287,  410,  411,  412,  410,  410,  410,  410,  410,  410,
-      410,  528,  528,  528,  528,  528,  529,  626,  679,  127,
-      287,  287,  287,  287,  287,  287,  288,  288,  288,  288,
-      288,  288,  288,  288,  288,  288,  119,  627,  625,  127,
-      288,  288,  288,  288,  288,  356,  356,  356,  356,  356,
-
-      356,  356,  356,  356,  356,  537,  537,  537,  537,  537,
-      538,  628,  626,  218,  274,  274,  274,  274,  274,  274,
-      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
-      813,  683,  684,  127,  127,  127,  127,  127,  127,  345,
-      218,  414,  414,  414,  414,  414,  414,  678,  659,  127,
-      399,  347,  400,  400,  400,  400,  400,  400,  100,  100,
-      100,  100,  100,  100,  315,  627,  318,  318,  318,  318,
-      318,  319,  316,  316,  316,  316,  320,  320,  320,  320,
-      320,  320,  320,  320,  320,  320,  119,  597,  101,  628,
-      320,  320,  320,  320,  320,  418,  418,  418,  418,  418,
-
-      418,  418,  418,  418,  418,  476,  746,  477,  477,  477,
-      477,  477,  477,  746,  320,  320,  320,  320,  320,  320,
-      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
-      100,  100,  100,  100,  321,  321,  321,  321,  321,  425,
-      425,  425,  425,  425,  425,  425,  425,  425,  425,  554,
-      554,  554,  554,  554,  555,  345,  218,  695,  320,  320,
-      320,  320,  320,  320,  334,  335,  336,  334,  334,  334,
-      334,  334,  334,  334,  813,  218,  345,  218,  483,  483,
-      483,  483,  483,  483,  731,  127,  416,  813,  416,  487,
-      487,  487,  487,  487,  487,  487,  487,  487,  487,  534,
-
-      101,  339,  339,  340,  341,  341,  341,  341,  341,  341,
-      341,  279,  345,  218,  346,  346,  346,  346,  346,  346,
-      346,  346,  346,  346,  347,  101,  683,  684,  348,  348,
-      348,  348,  348,  631,  105,  514,  515,  516,  517,  515,
-      515,  515,  515,  515,  515,  515,  600,  600,  600,  600,
-      600,  601,  348,  348,  348,  348,  348,  348,  218,  352,
-      353,  354,  352,  352,  352,  352,  352,  352,  352,  355,
-      730,  695,  127,  356,  356,  356,  356,  356,  527,  527,
-      527,  527,  527,  527,  527,  527,  527,  527,  632,  623,
-      695,  680,  675,  218,  127,  127,  127,  356,  356,  356,
-
-      356,  356,  356,  813,  347,  348,  348,  348,  348,  348,
-      348,  348,  348,  348,  348,  384,  384,  384,  384,  384,
-      384,  384,  384,  384,  384,  695,  676,  676,  813,  384,
-      384,  384,  384,  384,  475,  475,  475,  475,  475,  475,
-      475,  475,  475,  475,  618,  618,  618,  618,  618,  619,
-      677,  677,  813,  384,  384,  384,  384,  384,  384,  385,
-      385,  385,  385,  385,  385,  385,  385,  385,  385,  703,
-      634,  694,  127,  385,  385,  385,  385,  385,  536,  536,
-      536,  536,  536,  536,  536,  536,  536,  536,  100,  100,
-      100,  100,  634,  218,  634,  634,  734,  384,  384,  384,
-
-      384,  384,  384,  399,  416,  400,  400,  400,  400,  400,
-      400,  400,  400,  400,  400,  399,  532,  401,  401,  401,
-      401,  401,  401,  401,  401,  401,  401,  399,  534,  402,
-      402,  402,  402,  402,  403,  400,  400,  400,  400,  405,
-      405,  405,  405,  405,  405,  405,  405,  405,  405,  279,
-      345,  218,  414,  414,  414,  414,  414,  414,  414,  414,
-      414,  414,  347,  634,  105,  101,  413,  413,  413,  413,
-      413,  544,  545,  546,  544,  544,  544,  544,  544,  544,
-      544,  686,  761,  107,  127,  634,  107,  634,  635,  644,
-      413,  413,  413,  413,  413,  413,  345,  218,  415,  415,
-
-      415,  415,  415,  415,  415,  415,  415,  415,  416,  345,
-      218,  101,  417,  417,  417,  417,  417,  345,  218,  813,
-      218,  416,  127,  127,  127,  762,  105,  101,  733,  485,
-      676,  485,  561,  564,  101,  566,  417,  417,  417,  417,
-      417,  417,  218,  421,  422,  423,  421,  421,  421,  421,
-      421,  421,  421,  424,  677,  684,  813,  425,  425,  425,
-      425,  425,  494,  494,  494,  494,  494,  494,  494,  494,
-      494,  494,  662,  662,  662,  662,  662,  663,  101,  105,
-      813,  425,  425,  425,  425,  425,  425,  813,  571,  417,
-      417,  417,  417,  417,  417,  417,  417,  417,  417,  446,
-
-      701,  449,  449,  449,  449,  449,  450,  447,  447,  447,
-      447,  384,  384,  384,  384,  384,  384,  384,  384,  384,
-      384,  781,  782,  781,  782,  384,  384,  384,  384,  384,
-      345,  218,  549,  549,  549,  549,  549,  549,  685,  575,
-      575,  607,  485,  608,  608,  608,  608,  608,  608,  384,
-      384,  384,  384,  384,  384,  464,  465,  466,  464,  464,
-      464,  464,  464,  464,  464,  553,  553,  553,  553,  553,
-      553,  553,  553,  553,  553,  591,  592,  593,  591,  591,
-      591,  591,  591,  591,  591,  695,  732,  700,  700,  700,
-      644,  101,  399,  532,  400,  400,  400,  400,  400,  400,
-
-      400,  400,  400,  400,  399,  597,  400,  400,  400,  400,
-      400,  400,  400,  400,  400,  400,  471,  472,  473,  471,
-      471,  471,  471,  471,  471,  471,  474,  728,  101,  728,
-      475,  475,  475,  475,  475,  543,  543,  543,  543,  543,
-      543,  543,  543,  543,  543,  127,  211,  741,  786,  211,
-      218,  729,  218,  729,  475,  475,  475,  475,  475,  475,
-      476,  416,  479,  479,  479,  479,  479,  480,  477,  477,
-      477,  477,  345,  218,  483,  483,  483,  483,  483,  483,
-      483,  483,  483,  483,  416,  101,  101,  218,  482,  482,
-      482,  482,  482,  532,  813,  595,  595,  595,  595,  595,
+       35,   35,   35,   36,   37,   38,   38,   38,   38,   39,
+       38,   40,   38,   41,   42,   43,   44,   38,   38,   38,
+       38,   38,   45,   16,   46,   46,   46,   46,   46,   46,
+       16,   16,   16,   16,   16,   16,   16,   16,   47,   16,
+       16,   48,  129,   55,  181,   49,  129,   56,  136,  129,
+      138,   55,  132,   57,  129,   56,   58,  131,   17,   63,
+       64,   57,   65,  137,   58,  157,  175,  152,   65,  133,
+
+      111,   50,   51,  153,  134,  158,   52,  103,  155,  171,
+      142,   59,   65,   66,   53,   60,   38,   54,   38,   59,
+      112,  201,  174,   60,   38,  180,   38,   17,   63,   64,
+      176,   65,  204,   79,   18,   80,   81,   65,  182,   67,
+       61,   79,   18,   80,   81,  117,  117,  113,   61,  117,
+      117,   65,   66,  178,  142,  210,  174,   17,   18,   19,
+       72,   68,  183,  184,  211,  179,   73,   74,   75,  117,
+      124,  124,  124,  124,  124,  125,  111,  103,   67,   17,
+       18,   19,   76,   68,   82,  103,  143,  180,  103,  222,
+      201,  103,   82,  205,  118,  144,  186,  143,  249,  385,
+
+      224,   17,   18,   19,   72,   68,  164,  251,   77,  841,
+       73,   74,   75,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  187,  145,  103,   76,  241,  103,  841,
+       69,   70,   70,   70,   70,   70,   70,   70,   70,   70,
+       70,   70,   70,   70,   70,   70,   70,   70,   70,   17,
+       18,   19,   77,   68,  146,  147,  113,  824,  157,  148,
+      198,  198,  198,  198,  198,  199,  410,  149,  158,  411,
+      150,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  109,  109,  109,  109,  109,  109,  109,  109,  109,
+      109,  220,  220,  220,  220,  220,  220,  171,  142,  824,
+
+       69,   70,   70,   70,   70,   70,   70,   70,   70,   70,
+       70,   70,   70,   70,   70,   70,   70,   70,   70,   33,
+       17,   18,   19,   33,   33,   83,   23,   24,   33,   84,
+       26,   33,   33,   85,   86,   87,   88,   86,   86,   86,
+       86,   86,   86,   86,   31,   89,   33,   33,   90,   91,
+       91,   91,   92,   93,   94,   94,   94,   94,   95,   94,
+       96,   94,   97,   94,   98,   94,   94,   94,   94,   94,
+       94,   69,   33,   99,   99,   99,   99,   99,   99,  100,
+      100,  100,  100,  100,  100,  100,  100,  101,  100,  100,
+      107,  103,  171,  142,  171,  142,  242,  103,  102,  107,
+
+      108,  103,  255,  109,  109,  109,  109,  109,  109,  109,
+      109,  109,  109,  119,  252,  120,  120,  120,  120,  120,
+      120,  120,  120,  120,  120,  121,  183,  184,  277,  122,
+      122,  122,  122,  122,  122,  222,  181,  162,  162,  231,
+      232,  162,  162,  103,  250,  233,  290,  103,  103,  234,
+      103,  235,  103,  253,  122,  122,  122,  122,  122,  122,
+      102,  162,  248,  103,  314,  321,  102,  103,  321,  102,
+      102,  824,  102,  102,  102,  128,  128,  128,  128,  128,
+      128,  128,  128,  128,  128,  121,  163,  180,  102,  128,
+      128,  128,  128,  128,  128,  129,  129,  129,  129,  130,
+
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  129,  103,  129,  122,  122,  122,  122,  122,  122,
+      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
+      102,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  841,  103,  107,  323,  129,  129,  129,  129,  129,
+      129,  103,  453,  171,  142,  129,  109,  109,  109,  109,
+      109,  109,  109,  109,  109,  109,  321,  103,  103,  392,
+      102,  102,  102,  102,  102,  102,  141,  142,  102,  102,
+      102,  324,  102,  102,  824,  103,  102,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  320,  182,  824,
+
+      102,  102,  102,  102,  174,  122,  122,  122,  122,  122,
+      122,  122,  122,  122,  122,  107,  167,  142,  168,  111,
+      169,  353,  353,  353,  168,  108,  169,  103,  109,  109,
+      109,  109,  109,  109,  109,  109,  109,  109,  145,  841,
+      169,  169,  342,  343,  536,  344,  102,  180,  102,  102,
+      102,  188,  102,  102,  841,  173,  102,  188,  173,  173,
+      188,  121,  107,  188,  188,  173,  187,  169,  146,  147,
+      102,  102,  102,  148,  841,  151,  107,  190,  369,  188,
+      173,  149,  373,  369,  150,  810,  170,  374,  103,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  222,
+
+      103,  187,  370,  191,  188,  117,  387,  370,  117,  117,
+      290,  117,  117,  117,  117,  556,  222,  117,  117,  110,
+      386,  110,  110,  391,  103,  110,  110,  290,  455,  110,
+      394,  190,  117,  117,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  110,  110,  109,  109,  109,  109,
+      109,  109,  109,  109,  109,  109,  103,  193,  117,  190,
+      103,  103,  194,  190,  195,  195,  195,  195,  195,  195,
+      195,  195,  195,  195,  121,  190,  321,  369,  196,  196,
+      196,  196,  196,  196,  190,  190,  190,  190,  190,  190,
+      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
+
+      190,  370,  742,  196,  196,  196,  196,  196,  196,  190,
+      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
+      841,  791,  190,  190,  190,  190,  190,  190,  190,  190,
+      190,  190,  841,  357,  222,  791,  190,  190,  190,  190,
+      190,  190,  103,  791,  114,  359,  114,  114,  114,  383,
+      114,  114,  384,  462,  114,  261,  261,  261,  261,  261,
+      261,  190,  190,  190,  190,  190,  190,  190,  114,  114,
+      114,  190,  200,  200,  200,  200,  200,  200,  200,  200,
+      200,  200,  121,  190,  103,  107,  200,  200,  200,  200,
+      200,  200,  201,  201,  201,  201,  202,  201,  201,  201,
+
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  454,
+      203,  196,  196,  196,  196,  196,  196,  190,  190,  190,
+      190,  190,  190,  190,  190,  190,  190,  190,  201,  201,
+      201,  201,  201,  201,  201,  201,  201,  201,  841,  107,
+      103,  595,  201,  201,  201,  201,  201,  201,  401,  103,
+      117,  117,  201,  402,  117,  117,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  592,  190,  190,  190,
+      190,  190,  190,  841,  117,  196,  196,  196,  196,  196,
+      196,  196,  196,  196,  196,  116,  111,  102,  102,  116,
+      415,  102,  102,  311,  312,  116,  313,  456,  841,  118,
+
+      280,  280,  280,  280,  280,  281,  841,  460,  461,  116,
+      116,  102,  216,  217,  218,  216,  216,  216,  216,  216,
+      216,  216,  162,  162,  267,  268,  162,  162,  103,  103,
+      269,  103,  103,  187,  270,  103,  271,  161,  103,  102,
+      102,  161,  556,  102,  102,  531,  162,  161,  537,  103,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      129,  161,  161,  102,  219,  219,  219,  219,  219,  219,
+      585,  163,  257,  258,  259,  257,  257,  257,  257,  257,
+      257,  257,  102,  102,  102,  102,  610,  201,  742,  219,
+      219,  219,  219,  219,  219,  225,  225,  225,  225,  225,
+
+      225,  225,  225,  225,  225,  121,  121,  520,  527,  225,
+      225,  225,  225,  225,  225,  261,  261,  261,  261,  261,
+      261,  261,  261,  261,  261,  362,  362,  362,  362,  362,
+      363,  521,  528,  103,  219,  219,  219,  219,  219,  219,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      841,  393,  841,  222,  129,  129,  129,  129,  129,  129,
+      185,  222,  185,  185,  359,  188,  185,  185,  103,  107,
+      185,  188,  290,  457,  188,  687,  129,  188,  188,  102,
+      102,  102,  102,  102,  102,  185,  185,  103,  587,  841,
+      117,  190,  463,  188,  117,  188,  774,  188,  188,  188,
+
+      117,  188,  188,  529,  325,  188,  326,  326,  326,  326,
+      326,  326,  222,  841,  117,  117,  103,  191,  188,  188,
+      188,  188,  117,  359,  534,  117,  117,  530,  117,  117,
+      117,  117,  517,  598,  117,  117,  261,  261,  261,  261,
+      261,  261,  261,  261,  261,  261,  774,  841,  190,  117,
+      117,  215,  215,  215,  215,  215,  215,  215,  215,  215,
+      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
+      215,  841,  103,  774,  193,  117,  260,  260,  260,  260,
+      260,  260,  260,  260,  260,  260,  648,  129,  597,  518,
+      260,  260,  260,  260,  260,  260,  279,  279,  279,  279,
+
+      279,  279,  279,  279,  279,  279,  435,  435,  435,  435,
+      435,  436,  357,  222,  515,  260,  260,  260,  260,  260,
+      260,  190,  357,  222,  359,  190,  262,  262,  262,  262,
+      262,  262,  262,  262,  262,  262,  121,  190,  516,  520,
+      262,  262,  262,  262,  262,  262,  201,  201,  201,  201,
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  521,  203,  260,  260,  260,  260,  260,
+      260,  190,  190,  190,  190,  190,  190,  190,  190,  190,
+      190,  190,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  841,  791,  841,  841,  201,  201,  201,  201,
+
+      201,  201,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  102,  102,  102,  102,  357,  222,  841,  841,
+      841,  190,  190,  190,  190,  190,  190,  277,  432,  278,
+      278,  278,  278,  278,  278,  278,  278,  278,  278,  162,
+      519,  841,  525,  162,  841,  609,  841,  222,  556,  162,
+      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
+      558,  522,  201,  162,  162,  841,  103,  102,  103,  282,
+      282,  282,  282,  282,  282,  282,  282,  282,  282,  535,
+      791,  526,  527,  282,  282,  282,  282,  282,  282,  395,
+      396,  397,  395,  395,  395,  395,  395,  395,  395,  508,
+
+      508,  508,  508,  508,  509,  222,  528,  549,  282,  282,
+      282,  282,  282,  282,  284,  285,  286,  286,  286,  286,
+      286,  286,  286,  286,  287,  647,  222,  129,  288,  288,
+      288,  288,  288,  288,  426,  427,  428,  426,  426,  426,
+      426,  426,  426,  426,  464,  103,  465,  465,  465,  465,
+      465,  465,  672,  288,  288,  288,  288,  288,  288,  222,
+      291,  292,  293,  291,  291,  291,  291,  291,  291,  291,
+      294,  222,  529,  515,  295,  295,  295,  295,  295,  295,
+      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
+      544,  103,  129,  520,  527,  545,  530,  516,  586,  295,
+
+      295,  295,  295,  295,  295,  296,  296,  296,  296,  296,
+      296,  296,  296,  296,  296,  121,  107,  521,  528,  296,
+      296,  296,  296,  296,  296,  357,  222,  430,  430,  430,
+      430,  430,  430,  652,  103,  129,  661,  359,  552,  552,
+      552,  552,  552,  553,  282,  282,  282,  282,  282,  282,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      841,  222,  659,  107,  129,  129,  129,  129,  129,  129,
+      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
+      415,  761,  416,  416,  416,  416,  416,  416,  687,  102,
+      102,  102,  102,  102,  102,  325,  529,  328,  328,  328,
+
+      328,  328,  329,  326,  326,  326,  326,  330,  330,  330,
+      330,  330,  330,  330,  330,  330,  330,  121,  660,  103,
+      530,  330,  330,  330,  330,  330,  330,  441,  441,  441,
+      441,  441,  441,  441,  441,  441,  441,  561,  561,  561,
+      561,  561,  562,  677,  677,  677,  330,  330,  330,  330,
+      330,  330,  331,  331,  331,  331,  331,  331,  331,  331,
+      331,  331,  841,  222,  653,  623,  331,  331,  331,  331,
+      331,  331,  222,  222,  432,  357,  222,  503,  503,  503,
+      503,  503,  503,  359,  432,  129,  774,  432,  654,  588,
+      774,  330,  330,  330,  330,  330,  330,  346,  347,  348,
+
+      346,  346,  346,  346,  346,  346,  346,  507,  507,  507,
+      507,  507,  507,  507,  507,  507,  507,  538,  539,  540,
+      538,  538,  538,  538,  538,  538,  538,  578,  578,  578,
+      578,  578,  579,  723,  103,  351,  351,  352,  353,  353,
+      353,  353,  353,  353,  353,  287,  357,  222,  358,  358,
+      358,  358,  358,  358,  358,  358,  358,  358,  359,  707,
+      129,  655,  360,  360,  360,  360,  360,  360,  551,  551,
+      551,  551,  551,  551,  551,  551,  551,  551,  590,  651,
+      706,  841,  129,  129,  129,  656,  723,  360,  360,  360,
+      360,  360,  360,  222,  364,  365,  366,  364,  364,  364,
+
+      364,  364,  364,  364,  367,  841,  357,  222,  368,  368,
+      368,  368,  368,  368,  708,  723,  649,  523,  432,  129,
+      711,  712,  524,  495,  495,  495,  495,  495,  495,  495,
+      495,  495,  495,  368,  368,  368,  368,  368,  368,  841,
+      650,  360,  360,  360,  360,  360,  360,  360,  360,  360,
+      360,  398,  398,  398,  398,  398,  398,  398,  398,  398,
+      398,  703,  723,  129,  129,  398,  398,  398,  398,  398,
+      398,  560,  560,  560,  560,  560,  560,  560,  560,  560,
+      560,  496,  653,  497,  497,  497,  497,  497,  497,  672,
+      398,  398,  398,  398,  398,  398,  399,  399,  399,  399,
+
+      399,  399,  399,  399,  399,  399,  654,  722,  649,  653,
+      399,  399,  399,  399,  399,  399,  568,  569,  570,  568,
+      568,  568,  568,  568,  568,  568,  357,  222,  103,  129,
+      357,  222,  650,  654,  762,  398,  398,  398,  398,  398,
+      398,  415,  505,  416,  416,  416,  416,  416,  416,  416,
+      416,  416,  416,  415,  841,  417,  417,  417,  417,  417,
+      417,  417,  417,  417,  417,  415,  558,  418,  418,  418,
+      418,  418,  419,  416,  416,  416,  416,  421,  421,  421,
+      421,  421,  421,  421,  421,  421,  421,  287,  357,  222,
+      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
+
+      359,  103,  655,  655,  429,  429,  429,  429,  429,  429,
+      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
+      626,  626,  626,  626,  626,  627,  656,  656,  712,  429,
+      429,  429,  429,  429,  429,  357,  222,  431,  431,  431,
+      431,  431,  431,  431,  431,  431,  431,  432,  841,  222,
+      129,  433,  433,  433,  433,  433,  433,  107,  556,  129,
+      505,  357,  222,  573,  573,  573,  573,  573,  573,  589,
+      558,  704,  704,  505,  759,  129,  433,  433,  433,  433,
+      433,  433,  222,  437,  438,  439,  437,  437,  437,  437,
+      437,  437,  437,  440,  760,  705,  705,  441,  441,  441,
+
+      441,  441,  441,  577,  577,  577,  577,  577,  577,  577,
+      577,  577,  577,  102,  102,  102,  102,  713,  129,  129,
+      711,  712,  441,  441,  441,  441,  441,  441,  841,  591,
+      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
+      464,  704,  467,  467,  467,  467,  467,  468,  465,  465,
+      465,  465,  398,  398,  398,  398,  398,  398,  398,  398,
+      398,  398,  103,  790,  107,  705,  398,  398,  398,  398,
+      398,  398,  596,  617,  618,  619,  617,  617,  617,  617,
+      617,  617,  617,  644,  644,  644,  644,  644,  645,  809,
+      810,  398,  398,  398,  398,  398,  398,  484,  485,  486,
+
+      484,  484,  484,  484,  484,  484,  484,  567,  567,  567,
+      567,  567,  567,  567,  567,  567,  567,  556,  556,  621,
+      621,  621,  621,  621,  621,  222,  758,  129,  129,  558,
+      623,  789,  103,  129,  103,  415,  432,  416,  416,  416,
+      416,  416,  416,  416,  416,  416,  416,  415,  714,  416,
+      416,  416,  416,  416,  416,  416,  416,  416,  416,  491,
+      492,  493,  491,  491,  491,  491,  491,  491,  491,  494,
+      326,  662,  326,  495,  495,  495,  495,  495,  495,  625,
+      625,  625,  625,  625,  625,  625,  625,  625,  625,  804,
+      804,  804,  804,  662,  222,  662,  662,  222,  495,  495,
+
+      495,  495,  495,  495,  496,  505,  499,  499,  499,  499,
+      499,  500,  497,  497,  497,  497,  357,  222,  503,  503,
+      503,  503,  503,  503,  503,  503,  503,  503,  432,  357,
+      222,  841,  502,  502,  502,  502,  502,  502,  357,  222,
+      841,  505,  841,  222,  690,  690,  690,  690,  690,  691,
+      575,  222,  623,  841,  575,  841,  222,  502,  502,  502,
+      502,  502,  502,  357,  222,  504,  504,  504,  504,  504,
+      504,  504,  504,  504,  504,  505,  729,  841,  623,  506,
+      506,  506,  506,  506,  506,  357,  222,  640,  640,  640,
+      640,  640,  640,  809,  810,  731,  633,  575,  634,  634,
+
+      634,  634,  634,  634,  506,  506,  506,  506,  506,  506,
+      222,  510,  511,  512,  510,  510,  510,  510,  510,  510,
+      510,  513,  662,  558,  841,  514,  514,  514,  514,  514,
+      514,  643,  643,  643,  643,  643,  643,  643,  643,  643,
+      643,  172,  172,  172,  662,  556,  662,  663,  841,  756,
+      514,  514,  514,  514,  514,  514,  841,  623,  506,  506,
+      506,  506,  506,  506,  506,  506,  506,  506,  102,  515,
+      730,  103,  109,  757,  102,  109,  215,  102,  102,  215,
+      102,  102,  102,  129,  129,  129,  129,  129,  129,  129,
+      129,  129,  129,  516,  600,  600,  102,  129,  129,  129,
+
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      103,  129,  102,  102,  102,  102,  102,  102,  102,  102,
+      102,  102,  102,  102,  102,  102,  102,  102,  102,  549,
+      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
+      664,  665,  666,  667,  664,  664,  664,  664,  664,  664,
+      599,  600,  600,  600,  600,  600,  600,  674,  674,  674,
+      674,  674,  674,  674,  674,  674,  674,  103,  556,  556,
+      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
+      558,  687,  601,  601,  559,  559,  559,  559,  559,  559,
+
+      675,  675,  675,  675,  675,  676,  677,  677,  677,  677,
+      357,  222,  702,  702,  702,  702,  702,  702,  678,  559,
+      559,  559,  559,  559,  559,  563,  564,  565,  563,  563,
+      563,  563,  563,  563,  563,  566,  678,  756,  787,  567,
+      567,  567,  567,  567,  567,  632,  632,  632,  632,  632,
+      632,  632,  632,  632,  632,  723,  769,  728,  728,  728,
+      222,  757,  788,  678,  567,  567,  567,  567,  567,  567,
+      841,  505,  559,  559,  559,  559,  559,  559,  559,  559,
+      559,  559,  357,  222,  573,  573,  573,  573,  573,  573,
+      573,  573,  573,  573,  505,  103,  756,  841,  572,  572,
+
+      572,  572,  572,  572,  556,  723,  685,  685,  685,  685,
+      685,  685,  172,  172,  172,  716,  623,  717,  718,  719,
+      757,  841,  814,  572,  572,  572,  572,  572,  572,  357,
+      222,  574,  574,  574,  574,  574,  574,  574,  574,  574,
+      574,  575,  767,  129,  841,  576,  576,  576,  576,  576,
+      576,  689,  689,  689,  689,  689,  689,  689,  689,  689,
+      689,  103,  723,  787,  841,  787,  720,  327,  841,  327,
+      576,  576,  576,  576,  576,  576,  222,  580,  581,  582,
+      580,  580,  580,  580,  580,  580,  580,  788,  841,  788,
+      768,  583,  583,  583,  583,  583,  583,  697,  698,  699,
+
+      697,  697,  697,  697,  697,  697,  697,  600,  600,  796,
+      129,  806,  222,  806,  751,  751,  583,  583,  583,  583,
+      583,  583,  841,  575,  576,  576,  576,  576,  576,  576,
+      576,  576,  576,  576,  102,  807,  465,  807,  465,  709,
+      102,  715,  715,  102,  102,  715,  102,  102,  102,  129,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  715,
+      715,  715,  102,  129,  129,  129,  129,  129,  129,  129,
+      129,  584,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  129,  129,  129,  129,  129,  103,  129,  102,  102,
+      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
+
+      102,  102,  102,  102,  102,  599,  602,  602,  602,  602,
+      602,  603,  600,  600,  600,  600,  190,  752,  752,  841,
+      190,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  687,  190,  633,  633,  201,  201,  201,  201,  201,
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  201,  201,  606,  201,  201,  633,  203,
+      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
+      190,  190,  190,  190,  190,  190,  190,  612,  613,  614,
+      615,  612,  612,  612,  612,  612,  612,  357,  222,  716,
+      558,  717,  718,  719,  466,  497,  466,  497,  556,  575,
+
+      735,  736,  737,  735,  735,  735,  735,  735,  735,  735,
+      687,  498,  678,  498,  103,  549,  550,  550,  550,  550,
+      550,  550,  550,  550,  550,  550,  678,  678,  679,  679,
+      679,  679,  679,  679,  745,  745,  745,  745,  745,  746,
+      722,  696,  696,  696,  696,  696,  696,  696,  696,  696,
+      696,  490,  763,  103,  556,  763,  621,  621,  621,  621,
+      621,  621,  621,  621,  621,  621,  558,  556,  556,  622,
+      622,  622,  622,  622,  622,  622,  622,  622,  622,  623,
+      742,  671,  670,  624,  624,  624,  624,  624,  624,  556,
+      669,  740,  740,  740,  740,  740,  740,  465,  668,  465,
+
+      841,  687,  841,  841,  841,  497,  599,  497,  624,  624,
+      624,  624,  624,  624,  628,  629,  630,  628,  628,  628,
+      628,  628,  628,  628,  631,  634,  599,  634,  632,  632,
+      632,  632,  632,  632,  744,  744,  744,  744,  744,  744,
+      744,  744,  744,  744,  635,  679,  635,  679,  680,  222,
+      680,  720,  599,  632,  632,  632,  632,  632,  632,  841,
+      575,  624,  624,  624,  624,  624,  624,  624,  624,  624,
+      624,  633,  103,  636,  636,  636,  636,  636,  637,  634,
+      634,  634,  634,  357,  222,  640,  640,  640,  640,  640,
+      640,  640,  640,  640,  640,  575,  806,  658,  657,  639,
+
+      639,  639,  639,  639,  639,  716,  103,  717,  718,  719,
+      841,  841,  717,  718,  719,  841,  222,  841,  841,  719,
+      807,  633,  633,  742,  639,  639,  639,  639,  639,  639,
+      357,  222,  641,  641,  641,  641,  641,  641,  641,  641,
+      641,  641,  556,  129,  490,  355,  642,  642,  642,  642,
+      642,  642,  611,  634,  742,  634,  720,  724,  725,  724,
+      725,  720,  679,  775,  679,  775,  720,  776,  792,  776,
+      792,  642,  642,  642,  642,  642,  642,  841,  608,  642,
+      642,  642,  642,  642,  642,  642,  642,  642,  642,  102,
+      721,  607,  721,  721,  721,  102,  721,  721,  102,  102,
+
+      721,  102,  102,  102,  129,  129,  129,  129,  129,  129,
+      129,  129,  129,  129,  721,  721,  721,  102,  129,  129,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  129,  129,  129,  129,  129,  129,  646,  129,  129,
+      129,  103,  129,  102,  102,  102,  102,  102,  102,  102,
+      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
+      649,  723,  605,  724,  724,  724,  724,  724,  724,  190,
+      793,  604,  793,  190,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  201,  650,  190,  599,  599,  201,  201,
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  594,  203,  190,  190,  190,  190,  190,  190,  190,
+      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
+      672,  593,  673,  673,  673,  673,  673,  673,  673,  673,
+      673,  673,  764,  765,  766,  764,  764,  764,  764,  764,
+      764,  764,  750,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  785,  785,  785,  785,  785,  786,  496,  103,
+      678,  496,  681,  681,  681,  681,  681,  682,  679,  679,
+      679,  679,  556,  496,  685,  685,  685,  685,  685,  685,
+      685,  685,  685,  685,  623,  556,  490,  686,  686,  686,
+
+      686,  686,  686,  686,  686,  686,  686,  687,  825,  355,
+      825,  688,  688,  688,  688,  688,  688,  556,  287,  781,
+      781,  781,  781,  781,  781,  826,  548,  826,  774,  742,
+      775,  775,  775,  775,  775,  775,  688,  688,  688,  688,
+      688,  688,  692,  693,  694,  692,  692,  692,  692,  692,
+      692,  692,  695,  547,  546,  543,  696,  696,  696,  696,
+      696,  696,  784,  784,  784,  784,  784,  784,  784,  784,
+      784,  784,  222,  751,  751,  751,  751,  751,  751,  542,
+      541,  696,  696,  696,  696,  696,  696,  841,  464,  688,
+      688,  688,  688,  688,  688,  688,  688,  688,  688,  357,
+
+      222,  702,  702,  702,  702,  702,  702,  702,  702,  702,
+      702,  723,  464,  726,  726,  726,  726,  726,  727,  728,
+      728,  728,  728,  732,  733,  734,  732,  732,  732,  732,
+      732,  732,  732,  763,  763,  763,  763,  763,  763,  763,
+      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
+      763,  763,  763,  819,  819,  819,  819,  819,  819,  464,
+      103,  672,  533,  673,  673,  673,  673,  673,  673,  673,
+      673,  673,  673,  532,  103,  103,  769,  103,  770,  770,
+      770,  770,  770,  770,  800,  801,  802,  800,  800,  800,
+      800,  800,  800,  800,  838,  838,  838,  838,  838,  838,
+
+      103,  556,  103,  740,  740,  740,  740,  740,  740,  740,
+      740,  740,  740,  687,  556,  103,  741,  741,  741,  741,
+      741,  741,  741,  741,  741,  741,  742,  496,  496,  490,
+      743,  743,  743,  743,  743,  743,  811,  812,  813,  811,
+      811,  811,  811,  811,  811,  811,  791,  355,  792,  792,
+      792,  792,  792,  792,  287,  743,  743,  743,  743,  743,
+      743,  747,  748,  749,  747,  747,  747,  747,  747,  747,
+      747,  287,  483,  482,  481,  750,  750,  750,  750,  750,
+      750,  819,  819,  819,  819,  819,  819,  819,  819,  819,
+      819,  814,  480,  815,  815,  815,  815,  815,  815,  479,
+
+      750,  750,  750,  750,  750,  750,  841,  478,  743,  743,
+      743,  743,  743,  743,  743,  743,  743,  743,  222,  753,
+      753,  753,  753,  753,  754,  751,  751,  751,  751,  769,
+      103,  770,  770,  770,  770,  770,  770,  770,  770,  770,
+      770,  769,  477,  771,  771,  771,  771,  771,  771,  771,
+      771,  771,  771,  769,  476,  772,  772,  772,  772,  772,
+      773,  770,  770,  770,  770,  774,  475,  777,  777,  777,
+      777,  777,  778,  775,  775,  775,  775,  556,  474,  781,
+      781,  781,  781,  781,  781,  781,  781,  781,  781,  742,
+      556,  473,  782,  782,  782,  782,  782,  782,  782,  782,
+
+      782,  782,  472,  471,  470,  469,  783,  783,  783,  783,
+      783,  783,  820,  820,  820,  820,  820,  820,  820,  820,
+      820,  820,  824,  841,  825,  825,  825,  825,  825,  825,
+      464,  783,  783,  783,  783,  783,  783,  841,  464,  783,
+      783,  783,  783,  783,  783,  783,  783,  783,  783,  791,
+      388,  794,  794,  794,  794,  794,  795,  792,  792,  792,
+      792,  102,  459,  797,  798,  799,  797,  797,  797,  797,
+      797,  797,  797,  769,  458,  770,  770,  770,  770,  770,
+      770,  770,  770,  770,  770,  769,  452,  770,  770,  770,
+      770,  770,  770,  770,  770,  770,  770,  556,  451,  805,
+
+      805,  805,  805,  805,  805,  805,  805,  805,  805,  814,
+      450,  815,  815,  815,  815,  815,  815,  815,  815,  815,
+      815,  814,  449,  816,  816,  816,  816,  816,  816,  816,
+      816,  816,  816,  814,  448,  817,  817,  817,  817,  817,
+      818,  815,  815,  815,  815,  821,  821,  821,  821,  821,
+      822,  819,  819,  819,  819,  824,  447,  827,  827,  827,
+      827,  827,  828,  825,  825,  825,  825,  102,  446,  829,
+      830,  831,  829,  829,  829,  829,  829,  829,  829,  814,
+      445,  815,  815,  815,  815,  815,  815,  815,  815,  815,
+      815,  814,  444,  815,  815,  815,  815,  815,  815,  815,
 
-      595,  169,  169,  169,  218,  534,  597,  688,  759,  689,
-      690,  691,  482,  482,  482,  482,  482,  482,  345,  218,
-      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
-      485,  316,  760,  316,  486,  486,  486,  486,  486,  599,
-      599,  599,  599,  599,  599,  599,  599,  599,  599,  574,
-      575,  575,  575,  575,  575,  575,  597,  692,  486,  486,
-      486,  486,  486,  486,  218,  490,  491,  492,  490,  490,
-      490,  490,  490,  490,  490,  493,  218,  345,  218,  494,
-      494,  494,  494,  494,  345,  218,  218,  485,  218,  485,
-      813,  218,  169,  169,  169,  534,  551,  485,  532,  551,
-
-      759,  813,  551,  494,  494,  494,  494,  494,  494,  813,
-      597,  486,  486,  486,  486,  486,  486,  486,  486,  486,
-      486,  100,  650,  778,  760,  813,  317,  100,  317,  735,
-      100,  100,  735,  100,  100,  100,  127,  127,  127,  127,
-      127,  127,  127,  127,  127,  127,  702,  779,  650,  100,
-      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
-      127,  127,  127,  127,  495,  127,  127,  127,  127,  127,
-      127,  127,  101,  127,  100,  100,  100,  100,  100,  100,
-      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
-      100,  525,  526,  526,  526,  526,  526,  526,  526,  526,
-
-      526,  526,  345,  218,  614,  614,  614,  614,  614,  614,
-      447,  650,  447,  532,  551,  617,  617,  617,  617,  617,
-      617,  617,  617,  617,  617,  659,  576,  576,  101,  532,
-      813,  533,  533,  533,  533,  533,  533,  533,  533,  533,
-      533,  534,  659,  695,  813,  535,  535,  535,  535,  535,
-      636,  637,  638,  639,  636,  636,  636,  636,  636,  636,
-      345,  218,  674,  674,  674,  674,  674,  674,  813,  535,
-      535,  535,  535,  535,  535,  539,  540,  541,  539,  539,
-      539,  539,  539,  539,  539,  542,  778,  695,  739,  543,
-      543,  543,  543,  543,  646,  646,  646,  646,  646,  646,
-
-      646,  646,  646,  646,  448,  477,  448,  477,  345,  218,
-      779,  575,  575,  543,  543,  543,  543,  543,  543,  813,
-      551,  535,  535,  535,  535,  535,  535,  535,  535,  535,
-      535,  345,  218,  549,  549,  549,  549,  549,  549,  549,
-      549,  549,  549,  485,  728,  681,  813,  548,  548,  548,
-      548,  548,  647,  647,  647,  647,  647,  648,  649,  649,
-      649,  649,  688,  607,  689,  690,  691,  478,  729,  478,
-      813,  548,  548,  548,  548,  548,  548,  345,  218,  550,
-      550,  550,  550,  550,  550,  550,  550,  550,  550,  551,
-      127,  740,  813,  552,  552,  552,  552,  552,  606,  606,
-
-      606,  606,  606,  606,  606,  606,  606,  606,  447,  477,
-      447,  477,  694,  608,  607,  608,  813,  552,  552,  552,
-      552,  552,  552,  218,  556,  557,  558,  556,  556,  556,
-      556,  556,  556,  556,  607,  609,  768,  609,  559,  559,
-      559,  559,  559,  532,  534,  657,  657,  657,  657,  657,
-      657,  651,  650,  651,  650,  597,  651,  651,  651,  651,
-      651,  651,  559,  559,  559,  559,  559,  559,  813,  532,
-      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
-      100,  659,  652,  608,  652,  608,  100,  687,  687,  100,
-      100,  687,  100,  100,  100,  127,  127,  127,  127,  127,
-
-      127,  127,  127,  127,  127,  687,  687,  687,  100,  127,
-      127,  127,  127,  127,  127,  127,  560,  127,  127,  127,
-      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
-      127,  101,  127,  100,  100,  100,  100,  100,  100,  100,
-      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
-      574,  577,  577,  577,  577,  577,  578,  575,  575,  575,
-      575,  187,  723,  723,  532,  187,  198,  198,  198,  198,
-      198,  198,  198,  198,  198,  198,  714,  187,  724,  724,
-      198,  198,  198,  583,  198,  198,  198,  198,  198,  198,
-      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
-
-      198,  198,  650,  200,  187,  187,  187,  187,  187,  187,
-      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
-      187,  586,  587,  588,  589,  586,  586,  586,  586,  586,
-      586,  661,  661,  661,  661,  661,  661,  661,  661,  661,
-      661,  669,  670,  671,  669,  669,  669,  669,  669,  669,
-      669,  717,  717,  717,  717,  717,  718,  101,  525,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  707,
-      708,  709,  707,  707,  707,  707,  707,  707,  707,  668,
-      668,  668,  668,  668,  668,  668,  668,  668,  668,  757,
-      757,  757,  757,  757,  758,  101,  532,  813,  595,  595,
-
-      595,  595,  595,  595,  595,  595,  595,  595,  534,  714,
-      470,  643,  594,  594,  594,  594,  594,  532,  532,  712,
-      712,  712,  712,  712,  712,  696,  697,  696,  697,  659,
-      714,  813,  218,  813,  813,  813,  594,  594,  594,  594,
-      594,  594,  532,  551,  596,  596,  596,  596,  596,  596,
-      596,  596,  596,  596,  597,  759,  642,  641,  598,  598,
-      598,  598,  598,  716,  716,  716,  716,  716,  716,  716,
-      716,  716,  716,  688,  640,  689,  690,  691,  651,  760,
-      651,  692,  598,  598,  598,  598,  598,  598,  602,  603,
-      604,  602,  602,  602,  602,  602,  602,  602,  605,  574,
-
-      574,  127,  606,  606,  606,  606,  606,  736,  737,  738,
-      736,  736,  736,  736,  736,  736,  736,  791,  791,  791,
-      791,  791,  791,  692,  574,  101,  606,  606,  606,  606,
-      606,  606,  813,  630,  598,  598,  598,  598,  598,  598,
-      598,  598,  598,  598,  607,  629,  610,  610,  610,  610,
-      610,  611,  608,  608,  608,  608,  345,  218,  614,  614,
-      614,  614,  614,  614,  614,  614,  614,  614,  551,  101,
-      218,  778,  613,  613,  613,  613,  613,  813,  607,  689,
-      690,  691,  813,  607,  813,  813,  691,  695,  470,  696,
-      696,  696,  696,  696,  696,  779,  613,  613,  613,  613,
-
-      613,  613,  345,  218,  615,  615,  615,  615,  615,  615,
-      615,  615,  615,  615,  747,  343,  747,  127,  616,  616,
-      616,  616,  616,  748,  764,  748,  764,  692,  765,  797,
-      765,  797,  692,  218,  723,  723,  723,  723,  723,  723,
-      585,  582,  616,  616,  616,  616,  616,  616,  813,  581,
-      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
-      100,  693,  580,  693,  693,  693,  100,  693,  693,  100,
-      100,  693,  100,  100,  100,  127,  127,  127,  127,  127,
-      127,  127,  127,  127,  127,  693,  693,  693,  100,  127,
-      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
-
-      127,  127,  127,  127,  127,  127,  127,  620,  127,  127,
-      127,  101,  127,  100,  100,  100,  100,  100,  100,  100,
-      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
-      625,  746,  579,  747,  747,  747,  747,  747,  747,  187,
-      798,  574,  798,  187,  198,  198,  198,  198,  198,  198,
-      198,  198,  198,  198,  626,  187,  574,  569,  198,  198,
-      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
-      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
-      568,  200,  187,  187,  187,  187,  187,  187,  187,  187,
-      187,  187,  187,  187,  187,  187,  187,  187,  187,  644,
-
-      476,  645,  645,  645,  645,  645,  645,  645,  645,  645,
-      645,  722,  722,  722,  722,  722,  722,  722,  722,  722,
-      722,  532,  476,  753,  753,  753,  753,  753,  753,  755,
-      476,  470,  755,  714,  343,  279,  755,  101,  650,  524,
-      653,  653,  653,  653,  653,  654,  651,  651,  651,  651,
-      532,  523,  657,  657,  657,  657,  657,  657,  657,  657,
-      657,  657,  597,  522,  519,  518,  656,  656,  656,  656,
-      656,  756,  756,  756,  756,  756,  756,  756,  756,  756,
-      756,  532,  446,  777,  777,  777,  777,  777,  777,  446,
-      656,  656,  656,  656,  656,  656,  532,  446,  658,  658,
-
-      658,  658,  658,  658,  658,  658,  658,  658,  659,  510,
-      509,  101,  660,  660,  660,  660,  660,  735,  735,  735,
-      735,  735,  735,  735,  735,  735,  735,  763,  101,  764,
-      764,  764,  764,  764,  764,  101,  660,  660,  660,  660,
-      660,  660,  664,  665,  666,  664,  664,  664,  664,  664,
-      664,  664,  667,  101,  476,  476,  668,  668,  668,  668,
-      668,  735,  735,  735,  735,  735,  735,  735,  735,  735,
-      735,  470,  741,  343,  742,  742,  742,  742,  742,  742,
-      668,  668,  668,  668,  668,  668,  813,  279,  660,  660,
-      660,  660,  660,  660,  660,  660,  660,  660,  345,  218,
-
-      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
-      101,  279,  463,  462,  673,  673,  673,  673,  673,  772,
-      773,  774,  772,  772,  772,  772,  772,  772,  772,  796,
-      461,  797,  797,  797,  797,  797,  797,  460,  673,  673,
-      673,  673,  673,  673,  695,  459,  698,  698,  698,  698,
-      698,  699,  700,  700,  700,  700,  704,  705,  706,  704,
-      704,  704,  704,  704,  704,  704,  783,  784,  785,  783,
-      783,  783,  783,  783,  783,  783,  791,  791,  791,  791,
-      791,  791,  791,  791,  791,  791,  810,  810,  810,  810,
-      810,  810,  101,  644,  458,  645,  645,  645,  645,  645,
-
-      645,  645,  645,  645,  645,  792,  792,  792,  792,  792,
-      792,  792,  792,  792,  792,  793,  793,  793,  793,  793,
-      794,  791,  791,  791,  791,  457,  795,  456,  455,  795,
-      454,  101,  532,  795,  712,  712,  712,  712,  712,  712,
-      712,  712,  712,  712,  659,  453,  452,  451,  711,  711,
-      711,  711,  711,  786,  813,  787,  787,  787,  787,  787,
-      787,  791,  791,  791,  791,  791,  791,  791,  791,  791,
-      791,  446,  711,  711,  711,  711,  711,  711,  532,  446,
-      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
-      714,  101,  374,  441,  715,  715,  715,  715,  715,  791,
-
-      791,  791,  791,  791,  791,  791,  791,  791,  791,  440,
-      434,  433,  432,  431,  430,  429,  428,  427,  715,  715,
-      715,  715,  715,  715,  719,  720,  721,  719,  719,  719,
-      719,  719,  719,  719,  426,  408,  343,  279,  722,  722,
-      722,  722,  722,  804,  805,  806,  804,  804,  804,  804,
-      804,  804,  804,  404,  279,  125,  807,  807,  807,  807,
-      807,  807,  722,  722,  722,  722,  722,  722,  813,  398,
-      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
-      218,  725,  725,  725,  725,  725,  726,  723,  723,  723,
-      723,  741,  101,  742,  742,  742,  742,  742,  742,  742,
-
-      742,  742,  742,  741,  397,  743,  743,  743,  743,  743,
-      743,  743,  743,  743,  743,  741,  396,  744,  744,  744,
-      744,  744,  745,  742,  742,  742,  742,  746,  393,  749,
-      749,  749,  749,  749,  750,  747,  747,  747,  747,  532,
-      392,  753,  753,  753,  753,  753,  753,  753,  753,  753,
-      753,  714,  391,  390,  389,  752,  752,  752,  752,  752,
-      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
-      388,  315,  315,  315,  374,  376,  374,  375,  374,  752,
-      752,  752,  752,  752,  752,  532,  368,  754,  754,  754,
-      754,  754,  754,  754,  754,  754,  754,  367,  366,  365,
-
-      364,  755,  755,  755,  755,  755,  804,  804,  804,  804,
-      804,  804,  804,  804,  804,  804,  363,  362,  359,  119,
-      279,  343,  279,  125,  105,  755,  755,  755,  755,  755,
-      755,  763,  333,  766,  766,  766,  766,  766,  767,  764,
-      764,  764,  764,  100,  329,  769,  770,  771,  769,  769,
-      769,  769,  769,  769,  769,  741,  328,  742,  742,  742,
-      742,  742,  742,  742,  742,  742,  742,  741,  327,  742,
-      742,  742,  742,  742,  742,  742,  742,  742,  742,  532,
-      326,  777,  777,  777,  777,  777,  777,  777,  777,  777,
-      777,  786,  325,  787,  787,  787,  787,  787,  787,  787,
-
-      787,  787,  787,  786,  324,  788,  788,  788,  788,  788,
-      788,  788,  788,  788,  788,  786,  323,  789,  789,  789,
-      789,  789,  790,  787,  787,  787,  787,  796,  322,  799,
-      799,  799,  799,  799,  800,  797,  797,  797,  797,  100,
-      191,  801,  802,  803,  801,  801,  801,  801,  801,  801,
-      801,  786,  315,  787,  787,  787,  787,  787,  787,  787,
-      787,  787,  787,  786,  315,  787,  787,  787,  787,  787,
-      787,  787,  787,  787,  787,  807,  807,  807,  807,  807,
-      807,  807,  807,  807,  807,  811,  811,  811,  811,  811,
-      812,  810,  810,  810,  810,  810,  810,  810,  810,  810,
-
-      810,  810,  810,  810,  810,  250,  312,  309,  308,  307,
-      306,  101,  801,  801,  801,  801,  801,  801,  801,  801,
-      801,  801,  305,  300,  299,  298,  297,  296,  295,  294,
-      293,  292,  291,  290,  289,  125,  117,  105,  105,  267,
-      266,  265,  264,  259,  258,  257,  813,  188,  101,  808,
-      808,  808,  808,  808,  809,  807,  807,  807,  807,  250,
-      176,  177,  171,  171,  163,  248,  157,  157,  241,  240,
-      239,  238,  237,  234,  233,  232,  231,  230,  225,  224,
-      223,  222,  125,  100,  125,  101,  807,  807,  807,  807,
-      807,  807,  807,  807,  807,  807,  190,  113,  210,  105,
-
-      103,  102,  101,  205,  204,  203,  202,  198,  177,  171,
-      163,  133,  131,  157,  156,  153,  151,  137,  136,  135,
-      132,  127,  101,   61,   61,   61,   61,   61,   61,   61,
-       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
-       61,   61,   61,   61,   33,   33,   33,   33,   33,   33,
+      815,  815,  815,  819,  819,  819,  819,  819,  819,  819,
+      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
+      819,  819,  819,  832,  833,  834,  832,  832,  832,  832,
+      832,  832,  832,  835,  835,  835,  835,  835,  835,  835,
+      835,  835,  835,  838,  838,  838,  838,  838,  838,  838,
+      838,  838,  838,  832,  832,  832,  832,  832,  832,  832,
+      832,  832,  832,  835,  835,  835,  835,  835,  835,  443,
+      103,  829,  829,  829,  829,  829,  829,  829,  829,  829,
+      829,  839,  839,  839,  839,  839,  840,  838,  838,  838,
+      838,  823,  442,  424,  823,  355,  287,  420,  823,  287,
+
+      103,  127,  414,  413,  412,  409,  408,  407,  103,  836,
+      836,  836,  836,  836,  837,  835,  835,  835,  835,  838,
+      838,  838,  838,  838,  838,  838,  838,  838,  838,  406,
+      405,  404,  403,  400,  325,  325,  325,  388,  390,  388,
+      389,  388,  382,  381,  380,  379,  103,  835,  835,  835,
+      835,  835,  835,  835,  835,  835,  835,  378,  377,  376,
+      375,  372,  371,  121,  287,  355,  287,  127,  107,  345,
+      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
+      194,  325,  325,  256,  103,   62,   62,   62,   62,   62,
+       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
+
+       62,   62,   62,   62,   62,   62,   33,   33,   33,   33,
        33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
-       33,   33,   33,   33,   33,   70,   70,   70,   70,   70,
-       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
-       70,   70,   70,   70,   70,   70,   77,   77,   77,   77,
-       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
-
-       77,   77,   77,   77,   77,   77,   77,  100,  125,  113,
-      103,  102,  101,  813,  100,  813,  100,  100,  100,  100,
-      813,  813,  100,  100,  100,  100,  100,  100,  104,  104,
-      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
-      104,  104,  104,  104,  104,  104,  104,  104,  104,  108,
-      813,  813,  813,  813,  108,  813,  108,  813,  108,  108,
-      108,  108,  108,  813,  108,  108,  108,  108,  108,  108,
-      112,  813,  813,  813,  813,  813,  813,  112,  813,  112,
-      112,  112,  112,  813,  813,  112,  112,  112,  112,  112,
-      112,  114,  813,  813,  114,  114,  813,  114,  114,  813,
-
-      114,  114,  114,  114,  813,  813,  114,  114,  114,  114,
-      114,  114,  124,  124,  813,  124,  813,  813,  813,  124,
-      158,  813,  813,  158,  158,  813,  158,  158,  813,  158,
-      158,  158,  158,  813,  813,  158,  158,  158,  158,  158,
-      158,  162,  813,  813,  162,  162,  813,  162,  162,  813,
-      162,  162,  162,  162,  813,  162,  162,  162,  813,  162,
-      162,  162,  170,  813,  813,  170,  813,  813,  170,  170,
-      813,  170,  170,  170,  170,  170,  813,  170,  170,  170,
-      170,  170,  170,  174,  174,  174,  174,  174,  174,  174,
-      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
-
-      174,  174,  174,  174,  176,  176,  813,  176,  813,  176,
-      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
-      176,  176,  176,  176,  176,  182,  813,  813,  813,  813,
-      182,  813,  182,  813,  182,  182,  182,  182,  182,  813,
-      182,  182,  182,  182,  182,  182,  186,  813,  813,  813,
-      813,  813,  813,  186,  813,  186,  186,  186,  186,  813,
-      186,  186,  186,  186,  186,  186,  186,  189,  813,  813,
-      189,  189,  813,  189,  189,  813,  189,  189,  189,  189,
-      813,  189,  189,  189,  189,  189,  189,  189,  208,  208,
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
-
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  209,
-      209,  813,  209,  209,  209,  209,  209,  209,  209,  209,
-      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
-      115,  813,  813,  115,  115,  813,  115,  115,  813,  115,
-      115,  115,  115,  813,  813,  115,  115,  115,  115,  115,
-      115,  124,  124,  813,  124,  813,  813,  813,  124,  217,
-      217,  813,  217,  813,  813,  813,  217,  219,  219,  219,
-      813,  219,  813,  813,  813,  219,  158,  813,  813,  158,
-      158,  813,  158,  158,  813,  158,  158,  158,  158,  813,
-      813,  158,  158,  158,  158,  158,  158,  159,  813,  813,
-
-      159,  159,  813,  159,  159,  813,  159,  159,  159,  159,
-      813,  813,  159,  159,  159,  159,  159,  159,  162,  813,
-      813,  162,  162,  813,  162,  162,  813,  162,  162,  162,
-      162,  813,  162,  162,  162,  813,  162,  162,  162,  170,
-      813,  813,  170,  813,  813,  170,  170,  813,  170,  170,
-      170,  170,  170,  813,  170,  170,  170,  170,  170,  170,
-      185,  813,  813,  813,  813,  813,  813,  185,  813,  185,
-      185,  185,  185,  813,  813,  185,  185,  185,  185,  185,
-      185,  186,  813,  813,  813,  813,  813,  813,  186,  813,
-      186,  186,  186,  186,  813,  186,  186,  186,  186,  186,
-
-      186,  186,  189,  813,  813,  189,  189,  813,  189,  189,
-      813,  189,  189,  189,  189,  813,  189,  189,  189,  189,
-      189,  189,  189,  200,  813,  813,  200,  200,  813,  200,
-      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
-      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
-      268,  275,  275,  813,  275,  813,  813,  813,  275,  281,
-      281,  281,  813,  281,  813,  813,  813,  281,  337,  337,
-      813,  337,  813,  813,  813,  337,  338,  338,  813,  338,
-      813,  813,  813,  338,  342,  342,  813,  342,  813,  813,
-      813,  342,  344,  344,  344,  813,  344,  813,  813,  813,
-
-      344,  200,  813,  813,  200,  200,  813,  200,  404,  404,
-      813,  404,  813,  813,  813,  404,  406,  406,  813,  406,
-      813,  813,  813,  406,  407,  407,  813,  407,  813,  813,
-      813,  407,  409,  409,  409,  813,  409,  813,  813,  813,
-      409,  413,  413,  413,  413,  813,  413,  813,  813,  813,
-      413,  467,  467,  813,  467,  813,  813,  813,  467,  468,
-      468,  813,  468,  813,  813,  813,  468,  469,  469,  813,
-      469,  813,  813,  813,  469,  481,  481,  481,  813,  481,
-      813,  813,  813,  481,  482,  482,  482,  482,  813,  482,
-      813,  813,  813,  482,  208,  208,  208,  208,  208,  208,
-
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
-      208,  208,  208,  208,  208,  530,  530,  813,  530,  813,
-      813,  813,  530,  531,  531,  813,  531,  813,  813,  813,
-      531,  547,  547,  547,  813,  547,  813,  813,  813,  547,
-      548,  548,  548,  548,  813,  548,  813,  813,  813,  548,
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
-      208,  200,  813,  813,  200,  200,  813,  200,  187,  813,
-      813,  813,  187,  187,  813,  187,  187,  187,  813,  813,
-      187,  187,  590,  590,  813,  590,  813,  813,  813,  590,
-
-      594,  813,  594,  594,  813,  594,  813,  813,  813,  594,
-      612,  612,  612,  813,  612,  813,  813,  813,  612,  613,
-      613,  613,  613,  813,  613,  813,  813,  813,  613,  559,
-      559,  813,  813,  559,  813,  813,  813,  559,  208,  208,
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  200,
-      813,  813,  200,  200,  813,  200,  187,  813,  813,  813,
-      187,  187,  813,  187,  187,  187,  813,  813,  187,  187,
-      655,  655,  813,  655,  813,  813,  813,  655,  656,  813,
-      656,  656,  813,  656,  813,  813,  813,  656,  672,  672,
-
-      672,  813,  672,  813,  813,  813,  672,  673,  673,  673,
-      813,  813,  673,  813,  813,  813,  673,  682,  682,  682,
-      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
-      682,  682,  682,  682,  682,  682,  682,  682,  687,  687,
-      813,  687,  687,  687,  813,  687,  813,  687,  687,  687,
-      687,  813,  813,  687,  687,  687,  687,  687,  687,  693,
-      693,  813,  693,  693,  693,  813,  693,  813,  693,  693,
-      693,  693,  813,  813,  693,  693,  693,  693,  693,  693,
-      200,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  200,  200,  813,  200,  200,  813,  200,  710,  710,
-
-      813,  710,  813,  813,  813,  710,  711,  813,  711,  711,
-      813,  711,  813,  813,  813,  711,  727,  727,  813,  813,
-      727,  813,  813,  813,  727,  693,  813,  813,  813,  813,
-      813,  813,  693,  813,  693,  693,  693,  693,  813,  813,
-      693,  693,  693,  693,  693,  693,  751,  751,  813,  751,
-      813,  813,  813,  751,  752,  813,  752,  752,  813,  752,
-      813,  813,  813,  752,  775,  775,  813,  775,  813,  813,
-      813,  775,  776,  813,  776,  813,  813,  776,  813,  813,
-      813,  776,  780,  780,  780,  780,  780,  780,  780,  780,
-      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
-
-      780,  780,  780,   15,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813
+       33,   33,   33,   33,   33,   33,   33,   71,   71,   71,
+       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
+       71,   71,   71,   71,   71,   71,   71,   71,   78,   78,
+       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
+       78,   78,   78,   78,   78,   78,   78,   78,   78,  102,
+      322,  319,  318,  317,  316,  315,  102,  310,  102,  102,
+      102,  102,  309,  308,  102,  102,  102,  102,  102,  102,
+      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
+
+      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
+      106,  110,  307,  306,  305,  304,  110,  303,  110,  302,
+      110,  110,  110,  110,  110,  301,  110,  110,  110,  110,
+      110,  110,  114,  300,  299,  298,  297,  127,  119,  114,
+      107,  114,  114,  114,  114,  107,  275,  114,  114,  114,
+      114,  114,  114,  116,  274,  273,  116,  116,  272,  116,
+      116,  266,  116,  116,  116,  116,  265,  264,  116,  116,
+      116,  116,  116,  116,  126,  126,  263,  126,  841,  191,
+      256,  126,  161,  179,  180,  161,  161,  174,  161,  161,
+      174,  161,  161,  161,  161,  166,  254,  161,  161,  161,
+
+      161,  161,  161,  165,  160,  160,  165,  165,  247,  165,
+      165,  246,  165,  165,  165,  165,  245,  165,  165,  165,
+      244,  165,  165,  165,  173,  243,  240,  173,  239,  238,
+      173,  173,  237,  173,  173,  173,  173,  173,  236,  173,
+      173,  173,  173,  173,  173,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  179,  179,  230,  179,
+      229,  179,  179,  179,  179,  179,  179,  179,  179,  179,
+      179,  179,  179,  179,  179,  179,  179,  185,  228,  227,
+      226,  127,  185,  102,  185,  127,  185,  185,  185,  185,
+
+      185,  193,  185,  185,  185,  185,  185,  185,  189,  115,
+      214,  107,  105,  104,  103,  189,  209,  189,  189,  189,
+      189,  208,  189,  189,  189,  189,  189,  189,  189,  192,
+      207,  206,  192,  192,  201,  192,  192,  180,  192,  192,
+      192,  192,  174,  192,  192,  192,  192,  192,  192,  192,
+      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  213,  213,  166,  213,  213,  213,  213,  213,  213,
+      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
+      213,  213,  117,  136,  134,  117,  117,  160,  117,  117,
+
+      159,  117,  117,  117,  117,  156,  154,  117,  117,  117,
+      117,  117,  117,  126,  126,  140,  126,  139,  138,  135,
+      126,  221,  221,  129,  221,  127,  115,  105,  221,  223,
+      223,  223,  104,  223,  103,  841,  841,  223,  161,  841,
+      841,  161,  161,  841,  161,  161,  841,  161,  161,  161,
+      161,  841,  841,  161,  161,  161,  161,  161,  161,  162,
+      841,  841,  162,  162,  841,  162,  162,  841,  162,  162,
+      162,  162,  841,  841,  162,  162,  162,  162,  162,  162,
+      165,  841,  841,  165,  165,  841,  165,  165,  841,  165,
+      165,  165,  165,  841,  165,  165,  165,  841,  165,  165,
+
+      165,  173,  841,  841,  173,  841,  841,  173,  173,  841,
+      173,  173,  173,  173,  173,  841,  173,  173,  173,  173,
+      173,  173,  179,  179,  841,  179,  841,  179,  179,  179,
+      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
+      179,  179,  179,  188,  841,  841,  841,  841,  841,  841,
+      188,  841,  188,  188,  188,  188,  841,  841,  188,  188,
+      188,  188,  188,  188,  189,  841,  841,  841,  841,  841,
+      841,  189,  841,  189,  189,  189,  189,  841,  189,  189,
+      189,  189,  189,  189,  189,  192,  841,  841,  192,  192,
+      841,  192,  192,  841,  192,  192,  192,  192,  841,  192,
+
+      192,  192,  192,  192,  192,  192,  203,  841,  841,  203,
+      203,  841,  203,  276,  276,  276,  276,  276,  276,  276,
+      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
+      276,  276,  276,  276,  283,  283,  841,  283,  841,  841,
+      841,  283,  289,  289,  289,  841,  289,  841,  841,  841,
+      289,  349,  349,  841,  349,  841,  841,  841,  349,  350,
+      350,  841,  350,  841,  841,  841,  350,  354,  354,  841,
+      354,  841,  841,  841,  354,  356,  356,  356,  841,  356,
+      841,  841,  841,  356,  203,  841,  841,  203,  203,  841,
+      203,  420,  420,  841,  420,  841,  841,  841,  420,  422,
+
+      422,  841,  422,  841,  841,  841,  422,  423,  423,  841,
+      423,  841,  841,  841,  423,  425,  425,  425,  841,  425,
+      841,  841,  841,  425,  429,  429,  429,  429,  841,  429,
+      841,  841,  841,  429,  487,  487,  841,  487,  841,  841,
+      841,  487,  488,  488,  841,  488,  841,  841,  841,  488,
+      489,  489,  841,  489,  841,  841,  841,  489,  501,  501,
+      501,  841,  501,  841,  841,  841,  501,  502,  502,  502,
+      502,  841,  502,  841,  841,  841,  502,  212,  212,  212,
+      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  212,  212,  212,  212,  212,  212,  554,  554,
+
+      841,  554,  841,  841,  841,  554,  555,  555,  841,  555,
+      841,  841,  841,  555,  571,  571,  571,  841,  571,  841,
+      841,  841,  571,  572,  572,  572,  572,  841,  572,  841,
+      841,  841,  572,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  212,  212,  203,  841,  841,  203,  203,  841,
+      203,  190,  841,  841,  841,  190,  190,  841,  190,  190,
+      190,  841,  841,  190,  190,  616,  616,  841,  616,  841,
+      841,  841,  616,  620,  841,  620,  620,  841,  620,  841,
+      841,  841,  620,  638,  638,  638,  841,  638,  841,  841,
+
+      841,  638,  639,  639,  639,  639,  841,  639,  841,  841,
+      841,  639,  583,  583,  841,  841,  583,  841,  841,  841,
+      583,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  203,  841,  841,  203,  203,  841,  203,  190,
+      841,  841,  841,  190,  190,  841,  190,  190,  190,  841,
+      841,  190,  190,  683,  683,  841,  683,  841,  841,  841,
+      683,  684,  841,  684,  684,  841,  684,  841,  841,  841,
+      684,  700,  700,  700,  841,  700,  841,  841,  841,  700,
+      701,  701,  701,  841,  841,  701,  841,  841,  841,  701,
+
+      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
+      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
+      710,  715,  715,  841,  715,  715,  715,  841,  715,  841,
+      715,  715,  715,  715,  841,  841,  715,  715,  715,  715,
+      715,  715,  721,  721,  841,  721,  721,  721,  841,  721,
+      841,  721,  721,  721,  721,  841,  841,  721,  721,  721,
+      721,  721,  721,  203,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  203,  203,  841,  203,  203,  841,
+      203,  738,  738,  841,  738,  841,  841,  841,  738,  739,
+      841,  739,  739,  841,  739,  841,  841,  841,  739,  755,
+
+      755,  841,  841,  755,  841,  841,  841,  755,  721,  841,
+      841,  841,  841,  841,  841,  721,  841,  721,  721,  721,
+      721,  841,  841,  721,  721,  721,  721,  721,  721,  779,
+      779,  841,  779,  841,  841,  841,  779,  780,  841,  780,
+      780,  841,  780,  841,  841,  841,  780,  803,  803,  841,
+      803,  841,  841,  841,  803,  804,  841,  804,  841,  841,
+      804,  841,  841,  841,  804,  808,  808,  808,  808,  808,
+      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
+      808,  808,  808,  808,  808,  808,   15,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841
     } ;
 
-static yyconst short int yy_chk[5675] =
+static yyconst flex_int16_t yy_chk[5659] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -1294,628 +1395,629 @@ static yyconst short int yy_chk[5675] =
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        2,  533,    3,   38,    2,   52,    3,   49,   38,   50,
-        4,   36,    3,  533,    4,    3,   11,   11,   11,   11,
-        4,   22,   36,    4,   40,    5,    5,    5,   50,    5,
-
-        2,    2,   49,   52,    2,    5,   68,   68,   40,    3,
-      807,   22,    2,    3,    3,    2,    3,    4,   54,    5,
-        5,    4,    4,  148,    4,    6,    6,    6,   54,    6,
-      799,   12,   12,   12,   12,    6,   11,   22,    3,   76,
-       76,   72,   46,   27,   27,    5,    4,   27,   27,    6,
-        6,   46,   47,   78,    9,    9,    9,    9,    9,   74,
-       46,  164,  164,    9,    9,    9,   72,   27,   30,   30,
-       30,   30,   30,   30,   79,    6,    7,    7,    7,    9,
-        7,   12,   47,   47,   74,  148,   47,   60,  141,   81,
-       81,   27,   81,  141,   47,   91,   60,   47,   10,   10,
-
-       10,   10,   10,   78,    9,   60,   91,   10,   10,   10,
-       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
-      161,  798,   79,   10,  179,  161,    7,    7,    7,    7,
+        1,    2,   50,    3,   79,    2,   36,    3,   41,   37,
+       53,    4,   37,    3,   51,    4,    3,   36,    5,    5,
+        5,    4,    5,   41,    4,   55,   73,   50,    5,   39,
+
+       22,    2,    2,   51,   39,   55,    2,  835,   53,   69,
+       69,    3,    5,    5,    2,    3,    3,    2,    3,    4,
+       22,   92,   73,    4,    4,   79,    4,    6,    6,    6,
+       75,    6,   92,   11,   11,   11,   11,    6,   80,    5,
+        3,   12,   12,   12,   12,   27,   27,   22,    4,   27,
+       27,    6,    6,   77,   77,  101,   75,    9,    9,    9,
+        9,    9,   82,   82,  101,   82,    9,    9,    9,   27,
+       30,   30,   30,   30,   30,   30,   83,   47,    6,    7,
+        7,    7,    9,    7,   11,  152,   47,   80,   61,  127,
+       93,  154,   12,   93,   27,   47,   83,   61,  152,  312,
+
+      127,   10,   10,   10,   10,   10,   61,  154,    9,  110,
+       10,   10,   10,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   83,   48,  143,   10,  143,  312,  110,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
-        7,    7,    7,    7,    7,    8,    8,    8,   10,    8,
-       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
-       87,   87,   87,   87,   87,   87,   99,  101,  274,  101,
-      101,  101,  179,  101,  101,   99,  149,  101,  106,  106,
-      106,  106,  106,  106,  106,  106,  106,  106,  140,  149,
-      140,  101,  101,  101,  274,    8,    8,    8,    8,    8,
+        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
+        8,    8,   10,    8,   48,   48,  110,  827,  157,   48,
+       88,   88,   88,   88,   88,   88,  342,   48,  157,  342,
+       48,   87,   87,   87,   87,   87,   87,   87,   87,   87,
+       87,  108,  108,  108,  108,  108,  108,  108,  108,  108,
+      108,  125,  125,  125,  125,  125,  125,  167,  167,  826,
 
         8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
-        8,    8,    8,    8,   13,   13,   13,   13,   13,   13,
+        8,    8,    8,    8,    8,    8,    8,    8,    8,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   13,   13,   21,  125,  153,  797,   82,  168,
-      168,  270,  153,  178,   21,  784,  125,   21,   21,   21,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       21,  144,  141,  141,  171,  171,  144,  164,  153,  151,
 
-       21,   21,   21,   21,   21,   21,   21,   28,   82,   28,
-       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
-      152,  180,  180,   28,   28,   28,   28,   28,  151,  270,
-      289,   57,   57,  152,   82,   57,   57,  123,  123,  123,
-      123,  123,  123,  178,  151,   28,  154,   28,   28,   28,
-       28,   28,   28,   34,  289,   57,  154,  500,  246,   34,
-      246,  500,   34,   34,  313,   34,   34,   34,   34,   34,
-       34,   34,   34,   34,   34,   34,   34,   34,   34,   57,
-      313,   34,   34,   34,   34,   34,   34,   34,   34,   34,
+       21,  155,  164,   21,   21,   21,   21,   21,   21,   21,
+       21,   21,   21,   28,  155,   28,   28,   28,   28,   28,
+       28,   28,   28,   28,   28,   28,  183,  183,  278,   28,
+       28,   28,   28,   28,   28,  223,  181,   58,   58,  135,
+      135,   58,   58,  141,  153,  135,  223,  156,  251,  135,
+      242,  135,   28,  156,   28,   28,   28,   28,   28,   28,
+       34,   58,  151,  249,  242,  251,   34,  278,  249,   34,
+       34,  825,   34,   34,   34,   34,   34,   34,   34,   34,
+       34,   34,   34,   34,   34,   34,   58,  181,   34,   34,
        34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
 
        34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
        34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
-       34,   34,   34,   37,   37,   37,   37,   37,   37,   37,
-       37,   37,   37,   37,  219,  783,  242,   37,   37,   37,
-       37,   37,  245,  150,  236,  219,   37,  107,  107,  107,
-      107,  107,  107,  107,  107,  107,  107,  247,  236,  245,
-      303,   37,   37,   37,   37,   37,   37,   44,   44,   44,
-       44,   44,  247,   44,   44,  311,  311,   44,  121,  121,
-      121,  121,  121,  121,  121,  121,  121,  121,  150,  242,
-      108,   44,   44,   44,   45,  303,   45,   45,   45,   45,
-
-       45,   45,   45,   45,   45,   45,   48,   66,   66,   66,
-      108,   66,  304,  110,  370,   66,   48,   66,  304,   48,
-       48,   48,   48,   48,   48,   48,   48,   48,   48,  132,
-      243,   66,   66,  110,  132,  243,  108,  281,  132,  171,
-      132,   83,  171,  171,  370,  138,  138,   83,  281,  171,
-       83,  114,  114,   83,   83,  114,  114,   66,  182,  110,
-      780,  302,  175,  175,  171,   48,   67,   83,  291,   83,
-      183,  235,  235,  291,  235,  114,   67,  249,  182,   67,
-       67,   67,   67,   67,   67,   67,   67,   67,   67,  302,
-      183,  249,   83,   83,   84,  138,  777,   84,   84,  114,
-
-       84,   84,   84,   84,  182,  235,   84,   84,  111,  775,
-      111,  111,  175,  314,  111,  111,  183,  369,  111,  314,
-       84,   84,   84,  122,  122,  122,  122,  122,  122,  122,
-      122,  122,  122,  111,  111,  156,  156,  156,  156,  156,
-      156,  156,  156,  156,  156,   84,   84,   85,  310,  369,
-       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
-       85,   85,   85,   85,  322,  357,   85,   85,   85,   85,
-       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
-       85,   85,   85,   85,   85,   85,   85,   85,  322,  357,
-       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
-
-       85,   85,   85,   85,   85,   85,   85,   88,  310,   88,
-       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
-      278,  278,  278,   88,   88,   88,   88,   88,  266,  266,
-      113,  266,  113,  113,  113,  330,  113,  113,  330,  371,
-      113,  196,  196,  196,  196,  196,  196,   88,   88,   88,
-       88,   88,   88,   89,  113,  113,  113,   89,   89,   89,
-       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
-      453,  371,   89,   89,   89,   89,   89,   89,   89,   89,
-       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
-       89,   89,   89,   89,  453,   89,   89,   89,   89,   89,
-
-       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
-       89,   89,   89,   92,   92,   92,   92,   92,   92,   92,
-       92,   92,   92,   92,  377,  444,  378,   92,   92,   92,
-       92,   92,  203,  344,  158,  158,   92,  203,  158,  158,
-      323,  203,  444,  203,  344,  323,  301,  142,  378,  301,
-      457,   92,   92,   92,   92,   92,   92,   97,  158,   97,
-       97,   97,   97,   97,   97,   97,   97,   97,   97,  116,
-      766,  116,  116,  116,  457,  116,  116,  142,  142,  116,
-      301,  142,  158,  214,  214,  214,  214,  214,  214,  142,
-      372,  377,  142,  116,  116,  116,  117,  117,  117,  117,
-
-      117,  117,  117,  117,  117,  117,  167,  167,  167,  167,
-      167,  167,  167,  167,  167,  167,  346,  346,  765,  160,
-      379,  160,  160,  160,  372,  160,  160,  764,  346,  160,
-      400,  379,  117,  118,  118,  118,  118,  118,  118,  118,
-      118,  118,  118,  160,  160,  160,  458,  118,  118,  118,
-      118,  118,  191,  191,  191,  191,  191,  191,  191,  191,
-      191,  191,  273,  273,  273,  273,  427,  427,  400,  755,
-      458,  118,  118,  118,  118,  118,  118,  126,  126,  126,
-      126,  126,  126,  126,  126,  126,  126,  126,  312,  498,
-      754,  126,  126,  126,  126,  126,  194,  194,  194,  194,
-
-      194,  194,  194,  194,  194,  194,  285,  285,  285,  285,
-      285,  285,  752,  498,  312,  126,  126,  126,  126,  126,
-      126,  127,  127,  127,  127,  127,  127,  127,  127,  127,
-      127,  127,  312,  562,  562,  127,  127,  127,  127,  127,
-      184,  409,  184,  184,  373,  186,  184,  184,  380,  373,
-      184,  186,  409,  380,  186,  348,  348,  186,  186,  127,
-      127,  127,  127,  127,  127,  184,  184,  348,  413,  497,
-      428,  186,  428,  186,  188,  497,  188,  188,  188,  413,
-      188,  188,  429,  751,  188,  195,  195,  195,  195,  195,
-      195,  195,  195,  195,  195,  526,  186,  186,  188,  188,
-
-      188,  189,  615,  615,  189,  189,  429,  189,  189,  189,
-      189,  190,  431,  189,  189,  190,  502,  431,  414,  414,
-      502,  190,  415,  415,  429,  433,  430,  189,  189,  189,
-      414,  430,  526,  430,  415,  190,  190,  210,  210,  210,
-      210,  210,  210,  210,  210,  210,  210,  432,  508,  433,
-      432,  523,  189,  189,  192,  192,  192,  192,  192,  192,
-      192,  192,  192,  192,  749,  508,  523,  433,  192,  192,
-      192,  192,  192,  211,  211,  211,  211,  211,  211,  211,
-      211,  211,  211,  319,  511,  319,  319,  319,  319,  319,
-      319,  439,  192,  192,  192,  192,  192,  192,  197,  748,
-
-      513,  439,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  442,  513,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  511,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  198,  198,
-      198,  198,  198,  198,  198,  198,  198,  198,  198,  442,
-      504,  506,  198,  198,  198,  198,  198,  213,  213,  213,
-      213,  213,  213,  213,  213,  213,  213,  354,  354,  354,
-      354,  354,  354,  434,  504,  506,  198,  198,  198,  198,
-
-      198,  198,  212,  747,  212,  212,  212,  212,  212,  212,
-      212,  212,  212,  212,  248,  454,  737,  434,  248,  514,
-      454,  561,  736,  561,  248,  282,  282,  282,  282,  282,
-      282,  282,  282,  282,  282,  434,  514,  727,  248,  248,
-      212,  215,  443,  215,  215,  215,  215,  215,  215,  215,
-      215,  215,  215,  443,  564,  584,  564,  215,  215,  215,
-      215,  215,  284,  284,  284,  284,  284,  284,  284,  284,
-      284,  284,  423,  423,  423,  423,  423,  423,  571,  584,
-      571,  215,  215,  215,  215,  215,  215,  218,  218,  218,
-      218,  218,  218,  218,  218,  218,  218,  218,  589,  589,
-
-      589,  218,  218,  218,  218,  218,  315,  315,  315,  315,
-      315,  315,  315,  315,  315,  315,  450,  725,  450,  450,
-      450,  450,  450,  450,  724,  218,  218,  218,  218,  218,
-      218,  220,  220,  220,  220,  220,  220,  220,  220,  220,
-      220,  220,  220,  565,  616,  616,  220,  220,  220,  220,
-      220,  345,  345,  345,  345,  345,  345,  345,  345,  345,
-      345,  466,  466,  466,  466,  466,  466,  565,  623,  623,
-      220,  220,  220,  220,  220,  220,  221,  221,  221,  221,
-      221,  221,  221,  221,  221,  221,  221,  566,  625,  565,
-      221,  221,  221,  221,  221,  347,  347,  347,  347,  347,
-
-      347,  347,  347,  347,  347,  473,  473,  473,  473,  473,
-      473,  566,  625,  723,  221,  221,  221,  221,  221,  221,
-      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
-      222,  631,  631,  566,  222,  222,  222,  222,  222,  351,
-      351,  351,  351,  351,  351,  351,  351,  622,  711,  622,
-      403,  351,  403,  403,  403,  403,  403,  403,  222,  222,
-      222,  222,  222,  222,  253,  627,  253,  253,  253,  253,
-      253,  253,  253,  253,  253,  253,  254,  254,  254,  254,
-      254,  254,  254,  254,  254,  254,  254,  710,  403,  627,
-      254,  254,  254,  254,  254,  353,  353,  353,  353,  353,
-
-      353,  353,  353,  353,  353,  480,  708,  480,  480,  480,
-      480,  480,  480,  707,  254,  254,  254,  254,  254,  254,
-      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
-      529,  529,  529,  529,  256,  256,  256,  256,  256,  416,
-      416,  416,  416,  416,  416,  416,  416,  416,  416,  492,
-      492,  492,  492,  492,  492,  674,  674,  700,  256,  256,
-      256,  256,  256,  256,  269,  269,  269,  269,  269,  269,
-      269,  269,  269,  269,  417,  417,  420,  420,  420,  420,
-      420,  420,  420,  420,  680,  680,  417,  535,  420,  422,
-      422,  422,  422,  422,  422,  422,  422,  422,  422,  535,
-
-      269,  277,  277,  277,  277,  277,  277,  277,  277,  277,
-      277,  277,  283,  283,  283,  283,  283,  283,  283,  283,
-      283,  283,  283,  283,  283,  445,  683,  683,  283,  283,
-      283,  283,  283,  570,  570,  445,  446,  446,  446,  446,
-      446,  446,  446,  446,  446,  446,  541,  541,  541,  541,
-      541,  541,  283,  283,  283,  283,  283,  283,  286,  286,
-      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
-      679,  698,  679,  286,  286,  286,  286,  286,  465,  465,
-      465,  465,  465,  465,  465,  465,  465,  465,  570,  563,
-      697,  624,  620,  481,  563,  620,  624,  286,  286,  286,
-
-      286,  286,  286,  287,  481,  287,  287,  287,  287,  287,
-      287,  287,  287,  287,  287,  320,  320,  320,  320,  320,
-      320,  320,  320,  320,  320,  696,  621,  640,  643,  320,
-      320,  320,  320,  320,  470,  470,  470,  470,  470,  470,
-      470,  470,  470,  470,  558,  558,  558,  558,  558,  558,
-      621,  640,  643,  320,  320,  320,  320,  320,  320,  321,
-      321,  321,  321,  321,  321,  321,  321,  321,  321,  643,
-      630,  693,  621,  321,  321,  321,  321,  321,  472,  472,
-      472,  472,  472,  472,  472,  472,  472,  472,  648,  648,
-      648,  648,  630,  482,  630,  630,  691,  321,  321,  321,
-
-      321,  321,  321,  334,  482,  334,  334,  334,  334,  334,
-      334,  334,  334,  334,  334,  335,  595,  335,  335,  335,
-      335,  335,  335,  335,  335,  335,  335,  336,  595,  336,
-      336,  336,  336,  336,  336,  336,  336,  336,  336,  339,
-      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
-      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
-      349,  349,  349,  572,  685,  633,  349,  349,  349,  349,
-      349,  476,  476,  476,  476,  476,  476,  476,  476,  476,
-      476,  633,  731,  824,  731,  572,  824,  572,  572,  645,
-      349,  349,  349,  349,  349,  349,  352,  352,  352,  352,
-
-      352,  352,  352,  352,  352,  352,  352,  352,  352,  483,
-      483,  572,  352,  352,  352,  352,  352,  484,  484,  486,
-      486,  483,  496,  501,  503,  733,  733,  645,  685,  484,
-      676,  486,  496,  501,  686,  503,  352,  352,  352,  352,
-      352,  352,  355,  355,  355,  355,  355,  355,  355,  355,
-      355,  355,  355,  355,  676,  682,  641,  355,  355,  355,
-      355,  355,  485,  485,  485,  485,  485,  485,  485,  485,
-      485,  485,  604,  604,  604,  604,  604,  604,  512,  632,
-      641,  355,  355,  355,  355,  355,  355,  356,  512,  356,
-      356,  356,  356,  356,  356,  356,  356,  356,  356,  383,
-
-      641,  383,  383,  383,  383,  383,  383,  383,  383,  383,
-      383,  384,  384,  384,  384,  384,  384,  384,  384,  384,
-      384,  762,  762,  781,  781,  384,  384,  384,  384,  384,
-      489,  489,  489,  489,  489,  489,  489,  489,  632,  882,
-      882,  611,  489,  611,  611,  611,  611,  611,  611,  384,
-      384,  384,  384,  384,  384,  399,  399,  399,  399,  399,
-      399,  399,  399,  399,  399,  491,  491,  491,  491,  491,
-      491,  491,  491,  491,  491,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  639,  681,  639,  639,  639,
-      649,  399,  401,  596,  401,  401,  401,  401,  401,  401,
-
-      401,  401,  401,  401,  402,  596,  402,  402,  402,  402,
-      402,  402,  402,  402,  402,  402,  408,  408,  408,  408,
-      408,  408,  408,  408,  408,  408,  408,  701,  649,  728,
-      408,  408,  408,  408,  408,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  675,  836,  742,  787,  836,
-      547,  701,  673,  728,  408,  408,  408,  408,  408,  408,
-      412,  547,  412,  412,  412,  412,  412,  412,  412,  412,
-      412,  412,  418,  418,  418,  418,  418,  418,  418,  418,
-      418,  418,  418,  418,  418,  742,  787,  670,  418,  418,
-      418,  418,  418,  538,  598,  538,  538,  538,  538,  538,
-
-      538,  827,  827,  827,  669,  538,  598,  634,  739,  634,
-      634,  634,  418,  418,  418,  418,  418,  418,  421,  421,
-      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
-      421,  853,  739,  853,  421,  421,  421,  421,  421,  540,
-      540,  540,  540,  540,  540,  540,  540,  540,  540,  578,
-      578,  578,  578,  578,  578,  578,  656,  634,  421,  421,
-      421,  421,  421,  421,  424,  424,  424,  424,  424,  424,
-      424,  424,  424,  424,  424,  424,  548,  549,  549,  424,
-      424,  424,  424,  424,  550,  550,  612,  548,  613,  549,
-      552,  552,  844,  844,  844,  655,  550,  612,  657,  613,
-
-      759,  642,  552,  424,  424,  424,  424,  424,  424,  425,
-      657,  425,  425,  425,  425,  425,  425,  425,  425,  425,
-      425,  426,  653,  768,  759,  642,  854,  426,  854,  916,
-      426,  426,  916,  426,  426,  426,  426,  426,  426,  426,
-      426,  426,  426,  426,  426,  426,  642,  768,  652,  426,
-      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
-      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
-      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
-      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
-      426,  464,  464,  464,  464,  464,  464,  464,  464,  464,
-
-      464,  464,  555,  555,  555,  555,  555,  555,  555,  555,
-      865,  651,  865,  658,  555,  557,  557,  557,  557,  557,
-      557,  557,  557,  557,  557,  658,  883,  883,  464,  471,
-      660,  471,  471,  471,  471,  471,  471,  471,  471,  471,
-      471,  471,  660,  637,  702,  471,  471,  471,  471,  471,
-      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
-      619,  619,  619,  619,  619,  619,  619,  619,  702,  471,
-      471,  471,  471,  471,  471,  474,  474,  474,  474,  474,
-      474,  474,  474,  474,  474,  474,  778,  636,  702,  474,
-      474,  474,  474,  474,  587,  587,  587,  587,  587,  587,
-
-      587,  587,  587,  587,  866,  870,  866,  870,  614,  614,
-      778,  894,  894,  474,  474,  474,  474,  474,  474,  475,
-      614,  475,  475,  475,  475,  475,  475,  475,  475,  475,
-      475,  487,  487,  487,  487,  487,  487,  487,  487,  487,
-      487,  487,  487,  487,  678,  629,  703,  487,  487,  487,
-      487,  487,  588,  588,  588,  588,  588,  588,  588,  588,
-      588,  588,  635,  610,  635,  635,  635,  871,  678,  871,
-      703,  487,  487,  487,  487,  487,  487,  490,  490,  490,
-      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
-      678,  703,  740,  490,  490,  490,  490,  490,  597,  597,
-
-      597,  597,  597,  597,  597,  597,  597,  597,  875,  878,
-      875,  878,  635,  888,  609,  888,  740,  490,  490,  490,
-      490,  490,  490,  493,  493,  493,  493,  493,  493,  493,
-      493,  493,  493,  493,  608,  889,  740,  889,  493,  493,
-      493,  493,  493,  601,  594,  601,  601,  601,  601,  601,
-      601,  897,  592,  897,  654,  601,  654,  654,  654,  654,
-      654,  654,  493,  493,  493,  493,  493,  493,  494,  712,
-      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
-      495,  712,  898,  901,  898,  901,  495,  692,  692,  495,
-      495,  692,  495,  495,  495,  495,  495,  495,  495,  495,
-
-      495,  495,  495,  495,  495,  692,  692,  692,  495,  495,
-      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
-      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
-      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
-      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
+       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
+       34,   38,   38,   38,   38,   38,   38,   38,   38,   38,
+       38,   38,  252,  248,  252,   38,   38,   38,   38,   38,
+       38,  253,  383,  178,  178,   38,  109,  109,  109,  109,
+      109,  109,  109,  109,  109,  109,  253,  255,  321,  321,
+       38,   38,   38,   38,   38,   38,   45,   45,   45,   45,
+       45,  255,   45,   45,  812,  383,   45,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  248,  182,  811,
+
+       45,   45,   45,   46,  178,   46,   46,   46,   46,   46,
+       46,   46,   46,   46,   46,   49,   67,   67,   67,  112,
+       67,  286,  286,  286,   67,   49,   67,  462,   49,   49,
+       49,   49,   49,   49,   49,   49,   49,   49,  145,  112,
+       67,   67,  274,  274,  462,  274,  103,  182,  103,  103,
+      103,   84,  103,  103,  185,  174,  103,   84,  174,  174,
+       84,  282,  320,   84,   84,  174,  112,   67,  145,  145,
+      103,  103,  103,  145,  185,   49,   68,   84,  297,   84,
+      174,  145,  300,  332,  145,  808,   68,  300,  282,   68,
+       68,   68,   68,   68,   68,   68,   68,   68,   68,  289,
+
+      314,  185,  297,   84,   84,   85,  314,  332,   85,   85,
+      289,   85,   85,   85,   85,  805,  356,   85,   85,  113,
+      313,  113,  113,  320,  324,  113,  113,  356,  385,  113,
+      324,   85,   85,   85,  124,  124,  124,  124,  124,  124,
+      124,  124,  124,  124,  113,  113,  159,  159,  159,  159,
+      159,  159,  159,  159,  159,  159,  313,   85,   85,   86,
+      323,  385,   86,   86,   86,   86,   86,   86,   86,   86,
+       86,   86,   86,   86,   86,   86,  323,  369,   86,   86,
+       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
+       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
+
+       86,  369,  803,   86,   86,   86,   86,   86,   86,   86,
+       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
+       89,  794,   89,   89,   89,   89,   89,   89,   89,   89,
+       89,   89,   89,  358,  358,  793,   89,   89,   89,   89,
+       89,   89,  393,  792,  115,  358,  115,  115,  115,  311,
+      115,  115,  311,  393,  115,  199,  199,  199,  199,  199,
+      199,   89,   89,   89,   89,   89,   89,   90,  115,  115,
+      115,   90,   90,   90,   90,   90,   90,   90,   90,   90,
+       90,   90,   90,   90,  311,  534,   90,   90,   90,   90,
+       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
+
+       90,   90,   90,   90,   90,   90,   90,   90,   90,  384,
+       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
+       90,   90,   90,   90,   90,   90,   90,   90,   94,   94,
+       94,   94,   94,   94,   94,   94,   94,   94,   94,  391,
+      384,  534,   94,   94,   94,   94,   94,   94,  334,  531,
+      116,  116,   94,  334,  116,  116,  170,  170,  170,  170,
+      170,  170,  170,  170,  170,  170,  531,   94,   94,   94,
+       94,   94,   94,   99,  116,   99,   99,   99,   99,   99,
+       99,   99,   99,   99,   99,  118,  186,  118,  118,  118,
+      416,  118,  118,  241,  241,  118,  241,  386,  783,  116,
+
+      218,  218,  218,  218,  218,  218,  186,  391,  392,  118,
+      118,  118,  119,  119,  119,  119,  119,  119,  119,  119,
+      119,  119,  161,  161,  207,  207,  161,  161,  241,  416,
+      207,  392,  386,  186,  207,  457,  207,  163,  463,  163,
+      163,  163,  782,  163,  163,  457,  161,  163,  463,  119,
+      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
+      518,  163,  163,  163,  120,  120,  120,  120,  120,  120,
+      518,  161,  194,  194,  194,  194,  194,  194,  194,  194,
+      194,  194,  281,  281,  281,  281,  547,  547,  780,  120,
+      120,  120,  120,  120,  120,  128,  128,  128,  128,  128,
+
+      128,  128,  128,  128,  128,  128,  322,  446,  451,  128,
+      128,  128,  128,  128,  128,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  293,  293,  293,  293,  293,
+      293,  446,  451,  322,  128,  128,  128,  128,  128,  128,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  322,  360,  360,  129,  129,  129,  129,  129,  129,
+      187,  425,  187,  187,  360,  189,  187,  187,  387,  460,
+      187,  189,  425,  387,  189,  779,  522,  189,  189,  129,
+      129,  129,  129,  129,  129,  187,  187,  394,  522,  443,
+      193,  189,  394,  189,  193,  191,  777,  191,  191,  191,
+
+      193,  191,  191,  452,  329,  191,  329,  329,  329,  329,
+      329,  329,  429,  443,  193,  193,  537,  189,  189,  191,
+      191,  191,  192,  429,  460,  192,  192,  452,  192,  192,
+      192,  192,  443,  537,  192,  192,  198,  198,  198,  198,
+      198,  198,  198,  198,  198,  198,  776,  444,  192,  192,
+      192,  214,  214,  214,  214,  214,  214,  214,  214,  214,
+      214,  215,  215,  215,  215,  215,  215,  215,  215,  215,
+      215,  444,  536,  775,  192,  192,  195,  195,  195,  195,
+      195,  195,  195,  195,  195,  195,  586,  586,  536,  444,
+      195,  195,  195,  195,  195,  195,  217,  217,  217,  217,
+
+      217,  217,  217,  217,  217,  217,  366,  366,  366,  366,
+      366,  366,  430,  430,  469,  195,  195,  195,  195,  195,
+      195,  200,  641,  641,  430,  200,  200,  200,  200,  200,
+      200,  200,  200,  200,  200,  200,  200,  200,  469,  472,
+      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
+      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
+      200,  200,  200,  472,  200,  200,  200,  200,  200,  200,
+      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
+      200,  200,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  765,  449,  445,  201,  201,  201,  201,
+
+      201,  201,  290,  290,  290,  290,  290,  290,  290,  290,
+      290,  290,  553,  553,  553,  553,  431,  431,  449,  445,
+      447,  201,  201,  201,  201,  201,  201,  216,  431,  216,
+      216,  216,  216,  216,  216,  216,  216,  216,  216,  254,
+      445,  450,  449,  254,  447,  546,  642,  642,  557,  254,
+      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
+      557,  447,  546,  254,  254,  450,  216,  219,  461,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  461,
+      764,  450,  477,  219,  219,  219,  219,  219,  219,  325,
+      325,  325,  325,  325,  325,  325,  325,  325,  325,  439,
+
+      439,  439,  439,  439,  439,  755,  477,  550,  219,  219,
+      219,  219,  219,  219,  222,  222,  222,  222,  222,  222,
+      222,  222,  222,  222,  222,  585,  753,  585,  222,  222,
+      222,  222,  222,  222,  357,  357,  357,  357,  357,  357,
+      357,  357,  357,  357,  468,  550,  468,  468,  468,  468,
+      468,  468,  673,  222,  222,  222,  222,  222,  222,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  752,  478,  515,  224,  224,  224,  224,  224,  224,
+      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
+      474,  673,  519,  520,  527,  474,  478,  515,  519,  224,
+
+      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
+      225,  225,  225,  225,  225,  225,  713,  520,  527,  225,
+      225,  225,  225,  225,  225,  363,  363,  363,  363,  363,
+      363,  363,  363,  589,  596,  589,  596,  363,  486,  486,
+      486,  486,  486,  486,  225,  225,  225,  225,  225,  225,
+      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
+      226,  751,  595,  595,  226,  226,  226,  226,  226,  226,
+      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
+      419,  713,  419,  419,  419,  419,  419,  419,  739,  226,
+      226,  226,  226,  226,  226,  259,  529,  259,  259,  259,
+
+      259,  259,  259,  259,  259,  259,  259,  260,  260,  260,
+      260,  260,  260,  260,  260,  260,  260,  260,  595,  419,
+      529,  260,  260,  260,  260,  260,  260,  432,  432,  432,
+      432,  432,  432,  432,  432,  432,  432,  493,  493,  493,
+      493,  493,  493,  615,  615,  615,  260,  260,  260,  260,
+      260,  260,  262,  262,  262,  262,  262,  262,  262,  262,
+      262,  262,  433,  433,  609,  738,  262,  262,  262,  262,
+      262,  262,  501,  502,  433,  436,  436,  436,  436,  436,
+      436,  436,  436,  501,  502,  523,  736,  436,  609,  523,
+      735,  262,  262,  262,  262,  262,  262,  277,  277,  277,
+
+      277,  277,  277,  277,  277,  277,  277,  438,  438,  438,
+      438,  438,  438,  438,  438,  438,  438,  464,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  512,  512,  512,
+      512,  512,  512,  728,  277,  285,  285,  285,  285,  285,
+      285,  285,  285,  285,  285,  285,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  651,
+      651,  610,  291,  291,  291,  291,  291,  291,  485,  485,
+      485,  485,  485,  485,  485,  485,  485,  485,  525,  588,
+      648,  448,  648,  525,  588,  610,  726,  291,  291,  291,
+      291,  291,  291,  294,  294,  294,  294,  294,  294,  294,
+
+      294,  294,  294,  294,  294,  448,  503,  503,  294,  294,
+      294,  294,  294,  294,  652,  725,  587,  448,  503,  652,
+      659,  659,  448,  490,  490,  490,  490,  490,  490,  490,
+      490,  490,  490,  294,  294,  294,  294,  294,  294,  295,
+      587,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  330,  330,  330,  330,  330,  330,  330,  330,  330,
+      330,  646,  724,  587,  646,  330,  330,  330,  330,  330,
+      330,  492,  492,  492,  492,  492,  492,  492,  492,  492,
+      492,  500,  590,  500,  500,  500,  500,  500,  500,  677,
+      330,  330,  330,  330,  330,  330,  331,  331,  331,  331,
+
+      331,  331,  331,  331,  331,  331,  590,  721,  649,  653,
+      331,  331,  331,  331,  331,  331,  496,  496,  496,  496,
+      496,  496,  496,  496,  496,  496,  702,  702,  677,  590,
+      504,  504,  649,  653,  719,  331,  331,  331,  331,  331,
+      331,  346,  504,  346,  346,  346,  346,  346,  346,  346,
+      346,  346,  346,  347,  559,  347,  347,  347,  347,  347,
+      347,  347,  347,  347,  347,  348,  559,  348,  348,  348,
+      348,  348,  348,  348,  348,  348,  348,  351,  351,  351,
+      351,  351,  351,  351,  351,  351,  351,  351,  361,  361,
+      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
+
+      361,  714,  655,  591,  361,  361,  361,  361,  361,  361,
+      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
+      565,  565,  565,  565,  565,  565,  655,  591,  710,  361,
+      361,  361,  361,  361,  361,  364,  364,  364,  364,  364,
+      364,  364,  364,  364,  364,  364,  364,  364,  506,  506,
+      591,  364,  364,  364,  364,  364,  364,  660,  621,  524,
+      506,  509,  509,  509,  509,  509,  509,  509,  509,  524,
+      621,  668,  647,  509,  708,  708,  364,  364,  364,  364,
+      364,  364,  367,  367,  367,  367,  367,  367,  367,  367,
+      367,  367,  367,  367,  709,  668,  647,  367,  367,  367,
+
+      367,  367,  367,  511,  511,  511,  511,  511,  511,  511,
+      511,  511,  511,  676,  676,  676,  676,  660,  526,  647,
+      711,  711,  367,  367,  367,  367,  367,  367,  368,  526,
+      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
+      397,  704,  397,  397,  397,  397,  397,  397,  397,  397,
+      397,  397,  398,  398,  398,  398,  398,  398,  398,  398,
+      398,  398,  535,  761,  761,  704,  398,  398,  398,  398,
+      398,  398,  535,  556,  556,  556,  556,  556,  556,  556,
+      556,  556,  556,  582,  582,  582,  582,  582,  582,  790,
+      790,  398,  398,  398,  398,  398,  398,  415,  415,  415,
+
+      415,  415,  415,  415,  415,  415,  415,  558,  558,  558,
+      558,  558,  558,  558,  558,  558,  558,  562,  622,  562,
+      562,  562,  562,  562,  562,  571,  707,  703,  707,  562,
+      622,  759,  661,  759,  415,  417,  571,  417,  417,  417,
+      417,  417,  417,  417,  417,  417,  417,  418,  661,  418,
+      418,  418,  418,  418,  418,  418,  418,  418,  418,  424,
+      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
+      882,  658,  882,  424,  424,  424,  424,  424,  424,  564,
+      564,  564,  564,  564,  564,  564,  564,  564,  564,  786,
+      786,  786,  786,  658,  572,  658,  658,  701,  424,  424,
+
+      424,  424,  424,  424,  428,  572,  428,  428,  428,  428,
+      428,  428,  428,  428,  428,  428,  434,  434,  434,  434,
+      434,  434,  434,  434,  434,  434,  434,  434,  434,  573,
+      573,  669,  434,  434,  434,  434,  434,  434,  574,  574,
+      624,  573,  576,  576,  630,  630,  630,  630,  630,  630,
+      574,  698,  624,  671,  576,  669,  697,  434,  434,  434,
+      434,  434,  434,  437,  437,  437,  437,  437,  437,  437,
+      437,  437,  437,  437,  437,  437,  669,  671,  684,  437,
+      437,  437,  437,  437,  437,  579,  579,  579,  579,  579,
+      579,  579,  579,  809,  809,  671,  637,  579,  637,  637,
+
+      637,  637,  637,  637,  437,  437,  437,  437,  437,  437,
+      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
+      440,  440,  597,  683,  670,  440,  440,  440,  440,  440,
+      440,  581,  581,  581,  581,  581,  581,  581,  581,  581,
+      581,  855,  855,  855,  597,  685,  597,  597,  670,  729,
+      440,  440,  440,  440,  440,  440,  441,  685,  441,  441,
+      441,  441,  441,  441,  441,  441,  441,  441,  442,  442,
+      670,  597,  852,  729,  442,  852,  864,  442,  442,  864,
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  442,  442,  911,  911,  442,  442,  442,  442,
+
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  484,
+      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
+      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
+      603,  603,  603,  603,  603,  603,  603,  613,  613,  613,
+      613,  613,  613,  613,  613,  613,  613,  484,  491,  686,
+      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
+      491,  686,  912,  912,  491,  491,  491,  491,  491,  491,
+
+      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
+      645,  645,  645,  645,  645,  645,  645,  645,  681,  491,
+      491,  491,  491,  491,  491,  494,  494,  494,  494,  494,
+      494,  494,  494,  494,  494,  494,  680,  756,  767,  494,
+      494,  494,  494,  494,  494,  623,  623,  623,  623,  623,
+      623,  623,  623,  623,  623,  667,  770,  667,  667,  667,
+      638,  756,  767,  679,  494,  494,  494,  494,  494,  494,
+      495,  638,  495,  495,  495,  495,  495,  495,  495,  495,
+      495,  495,  507,  507,  507,  507,  507,  507,  507,  507,
+      507,  507,  507,  507,  507,  770,  706,  730,  507,  507,
+
+      507,  507,  507,  507,  627,  665,  627,  627,  627,  627,
+      627,  627,  872,  872,  872,  662,  627,  662,  662,  662,
+      706,  730,  815,  507,  507,  507,  507,  507,  507,  510,
+      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
+      510,  510,  730,  706,  731,  510,  510,  510,  510,  510,
+      510,  629,  629,  629,  629,  629,  629,  629,  629,  629,
+      629,  815,  664,  758,  768,  787,  662,  883,  731,  883,
+      510,  510,  510,  510,  510,  510,  513,  513,  513,  513,
+      513,  513,  513,  513,  513,  513,  513,  758,  768,  787,
+      731,  513,  513,  513,  513,  513,  513,  633,  633,  633,
+
+      633,  633,  633,  633,  633,  633,  633,  923,  923,  768,
+      758,  796,  639,  806,  942,  942,  513,  513,  513,  513,
+      513,  513,  514,  639,  514,  514,  514,  514,  514,  514,
+      514,  514,  514,  514,  517,  796,  894,  806,  894,  657,
+      517,  720,  720,  517,  517,  720,  517,  517,  517,  517,
+      517,  517,  517,  517,  517,  517,  517,  517,  517,  720,
+      720,  720,  517,  517,  517,  517,  517,  517,  517,  517,
+      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
+      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
       517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
-      517,  522,  913,  913,  713,  522,  522,  522,  522,  522,
-      522,  522,  522,  522,  522,  522,  713,  522,  914,  914,
-      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
-      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
-
-      522,  522,  591,  522,  522,  522,  522,  522,  522,  522,
-      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
-      522,  525,  525,  525,  525,  525,  525,  525,  525,  525,
-      525,  603,  603,  603,  603,  603,  603,  603,  603,  603,
-      603,  607,  607,  607,  607,  607,  607,  607,  607,  607,
-      607,  666,  666,  666,  666,  666,  666,  525,  527,  527,
-      527,  527,  527,  527,  527,  527,  527,  527,  527,  650,
-      650,  650,  650,  650,  650,  650,  650,  650,  650,  659,
-      659,  659,  659,  659,  659,  659,  659,  659,  659,  721,
-      721,  721,  721,  721,  721,  527,  536,  715,  536,  536,
-
-      536,  536,  536,  536,  536,  536,  536,  536,  536,  715,
-      590,  582,  536,  536,  536,  536,  536,  663,  753,  663,
-      663,  663,  663,  663,  663,  907,  908,  907,  908,  663,
-      753,  687,  672,  687,  687,  687,  536,  536,  536,  536,
-      536,  536,  539,  672,  539,  539,  539,  539,  539,  539,
-      539,  539,  539,  539,  539,  730,  581,  580,  539,  539,
-      539,  539,  539,  665,  665,  665,  665,  665,  665,  665,
-      665,  665,  665,  688,  579,  688,  688,  688,  910,  730,
-      910,  687,  539,  539,  539,  539,  539,  539,  542,  542,
-      542,  542,  542,  542,  542,  542,  542,  542,  542,  577,
-
-      576,  730,  542,  542,  542,  542,  542,  695,  695,  695,
-      695,  695,  695,  695,  695,  695,  695,  794,  794,  794,
-      794,  794,  794,  688,  575,  573,  542,  542,  542,  542,
-      542,  542,  543,  569,  543,  543,  543,  543,  543,  543,
-      543,  543,  543,  543,  546,  568,  546,  546,  546,  546,
-      546,  546,  546,  546,  546,  546,  553,  553,  553,  553,
-      553,  553,  553,  553,  553,  553,  553,  553,  553,  567,
-      551,  761,  553,  553,  553,  553,  553,  689,  545,  689,
-      689,  689,  690,  544,  690,  690,  690,  699,  531,  699,
-      699,  699,  699,  699,  699,  761,  553,  553,  553,  553,
-
-      553,  553,  556,  556,  556,  556,  556,  556,  556,  556,
-      556,  556,  556,  556,  918,  530,  918,  761,  556,  556,
-      556,  556,  556,  919,  923,  919,  923,  689,  924,  929,
-      924,  929,  690,  726,  726,  726,  726,  726,  726,  726,
-      524,  521,  556,  556,  556,  556,  556,  556,  559,  520,
-      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
-      560,  694,  519,  694,  694,  694,  560,  694,  694,  560,
-      560,  694,  560,  560,  560,  560,  560,  560,  560,  560,
-      560,  560,  560,  560,  560,  694,  694,  694,  560,  560,
-      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
-
-      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
-      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
-      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
-      583,  750,  518,  750,  750,  750,  750,  750,  750,  583,
-      930,  516,  930,  583,  583,  583,  583,  583,  583,  583,
-      583,  583,  583,  583,  583,  583,  515,  510,  583,  583,
-      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
-      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
-      509,  583,  583,  583,  583,  583,  583,  583,  583,  583,
-      583,  583,  583,  583,  583,  583,  583,  583,  583,  586,
-
-      479,  586,  586,  586,  586,  586,  586,  586,  586,  586,
-      586,  714,  714,  714,  714,  714,  714,  714,  714,  714,
-      714,  718,  478,  718,  718,  718,  718,  718,  718,  922,
-      477,  469,  922,  718,  468,  467,  922,  586,  593,  463,
-      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
-      599,  456,  599,  599,  599,  599,  599,  599,  599,  599,
-      599,  599,  599,  455,  452,  451,  599,  599,  599,  599,
-      599,  720,  720,  720,  720,  720,  720,  720,  720,  720,
-      720,  758,  449,  758,  758,  758,  758,  758,  758,  448,
-      599,  599,  599,  599,  599,  599,  602,  447,  602,  602,
-
-      602,  602,  602,  602,  602,  602,  602,  602,  602,  441,
-      440,  438,  602,  602,  602,  602,  602,  734,  734,  734,
-      734,  734,  734,  734,  734,  734,  734,  767,  437,  767,
-      767,  767,  767,  767,  767,  436,  602,  602,  602,  602,
-      602,  602,  605,  605,  605,  605,  605,  605,  605,  605,
-      605,  605,  605,  435,  411,  410,  605,  605,  605,  605,
-      605,  735,  735,  735,  735,  735,  735,  735,  735,  735,
-      735,  407,  745,  406,  745,  745,  745,  745,  745,  745,
-      605,  605,  605,  605,  605,  605,  606,  405,  606,  606,
-      606,  606,  606,  606,  606,  606,  606,  606,  617,  617,
-
-      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
-      745,  404,  398,  397,  617,  617,  617,  617,  617,  746,
-      746,  746,  746,  746,  746,  746,  746,  746,  746,  800,
-      396,  800,  800,  800,  800,  800,  800,  395,  617,  617,
-      617,  617,  617,  617,  638,  394,  638,  638,  638,  638,
-      638,  638,  638,  638,  638,  638,  644,  644,  644,  644,
-      644,  644,  644,  644,  644,  644,  763,  763,  763,  763,
-      763,  763,  763,  763,  763,  763,  772,  772,  772,  772,
-      772,  772,  772,  772,  772,  772,  812,  812,  812,  812,
-      812,  812,  644,  646,  393,  646,  646,  646,  646,  646,
-
-      646,  646,  646,  646,  646,  773,  773,  773,  773,  773,
-      773,  773,  773,  773,  773,  774,  774,  774,  774,  774,
-      774,  774,  774,  774,  774,  392,  928,  391,  390,  928,
-      389,  646,  661,  928,  661,  661,  661,  661,  661,  661,
-      661,  661,  661,  661,  661,  388,  387,  386,  661,  661,
-      661,  661,  661,  790,  385,  790,  790,  790,  790,  790,
-      790,  792,  792,  792,  792,  792,  792,  792,  792,  792,
-      792,  382,  661,  661,  661,  661,  661,  661,  664,  381,
-      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
-      664,  790,  376,  375,  664,  664,  664,  664,  664,  793,
-
-      793,  793,  793,  793,  793,  793,  793,  793,  793,  374,
-      368,  366,  365,  364,  363,  362,  361,  360,  664,  664,
-      664,  664,  664,  664,  667,  667,  667,  667,  667,  667,
-      667,  667,  667,  667,  359,  343,  342,  341,  667,  667,
-      667,  667,  667,  796,  796,  796,  796,  796,  796,  796,
-      796,  796,  796,  340,  338,  337,  809,  809,  809,  809,
-      809,  809,  667,  667,  667,  667,  667,  667,  668,  333,
-      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
-      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
-      671,  704,  809,  704,  704,  704,  704,  704,  704,  704,
-
-      704,  704,  704,  705,  332,  705,  705,  705,  705,  705,
-      705,  705,  705,  705,  705,  706,  331,  706,  706,  706,
-      706,  706,  706,  706,  706,  706,  706,  709,  329,  709,
-      709,  709,  709,  709,  709,  709,  709,  709,  709,  716,
-      328,  716,  716,  716,  716,  716,  716,  716,  716,  716,
-      716,  716,  327,  326,  325,  716,  716,  716,  716,  716,
-      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
-      324,  318,  317,  316,  309,  308,  307,  306,  305,  716,
-      716,  716,  716,  716,  716,  719,  299,  719,  719,  719,
-      719,  719,  719,  719,  719,  719,  719,  297,  296,  295,
-
-      294,  719,  719,  719,  719,  719,  805,  805,  805,  805,
-      805,  805,  805,  805,  805,  805,  293,  292,  290,  288,
-      280,  279,  276,  275,  268,  719,  719,  719,  719,  719,
-      719,  738,  267,  738,  738,  738,  738,  738,  738,  738,
-      738,  738,  738,  741,  265,  741,  741,  741,  741,  741,
-      741,  741,  741,  741,  741,  743,  264,  743,  743,  743,
-      743,  743,  743,  743,  743,  743,  743,  744,  263,  744,
-      744,  744,  744,  744,  744,  744,  744,  744,  744,  756,
-      262,  756,  756,  756,  756,  756,  756,  756,  756,  756,
-      756,  769,  261,  769,  769,  769,  769,  769,  769,  769,
-
-      769,  769,  769,  770,  260,  770,  770,  770,  770,  770,
-      770,  770,  770,  770,  770,  771,  259,  771,  771,  771,
-      771,  771,  771,  771,  771,  771,  771,  785,  258,  785,
-      785,  785,  785,  785,  785,  785,  785,  785,  785,  786,
-      255,  786,  786,  786,  786,  786,  786,  786,  786,  786,
-      786,  788,  252,  788,  788,  788,  788,  788,  788,  788,
-      788,  788,  788,  789,  251,  789,  789,  789,  789,  789,
-      789,  789,  789,  789,  789,  801,  801,  801,  801,  801,
-      801,  801,  801,  801,  801,  806,  806,  806,  806,  806,
-      806,  806,  806,  806,  806,  811,  811,  811,  811,  811,
-
-      811,  811,  811,  811,  811,  250,  244,  241,  240,  239,
-      238,  801,  802,  802,  802,  802,  802,  802,  802,  802,
-      802,  802,  237,  234,  233,  232,  231,  230,  229,  228,
-      227,  226,  225,  224,  223,  217,  216,  209,  208,  207,
-      206,  205,  204,  202,  201,  199,  193,  185,  802,  803,
-      803,  803,  803,  803,  803,  803,  803,  803,  803,  181,
-      177,  176,  174,  170,  163,  159,  157,  155,  147,  146,
-      145,  144,  143,  137,  136,  135,  134,  133,  131,  130,
-      129,  128,  124,  120,  119,  803,  808,  808,  808,  808,
-      808,  808,  808,  808,  808,  808,  115,  112,  109,  104,
-
-      103,  102,  100,   96,   95,   94,   93,   90,   77,   70,
-       63,   59,   58,   56,   55,   53,   51,   43,   42,   41,
-       39,   35,  808,  814,  814,  814,  814,  814,  814,  814,
-      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
-      814,  814,  814,  814,  815,  815,  815,  815,  815,  815,
-      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
-      815,  815,  815,  815,  815,  816,  816,  816,  816,  816,
-      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
-      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
-      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
-
-      817,  817,  817,  817,  817,  817,  817,  818,   31,   25,
-       19,   17,   16,   15,  818,    0,  818,  818,  818,  818,
-        0,    0,  818,  818,  818,  818,  818,  818,  819,  819,
-      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
-      819,  819,  819,  819,  819,  819,  819,  819,  819,  820,
-        0,    0,    0,    0,  820,    0,  820,    0,  820,  820,
-      820,  820,  820,    0,  820,  820,  820,  820,  820,  820,
-      821,    0,    0,    0,    0,    0,    0,  821,    0,  821,
-      821,  821,  821,    0,    0,  821,  821,  821,  821,  821,
-      821,  822,    0,    0,  822,  822,    0,  822,  822,    0,
-
-      822,  822,  822,  822,    0,    0,  822,  822,  822,  822,
-      822,  822,  823,  823,    0,  823,    0,    0,    0,  823,
-      825,    0,    0,  825,  825,    0,  825,  825,    0,  825,
-      825,  825,  825,    0,    0,  825,  825,  825,  825,  825,
-      825,  826,    0,    0,  826,  826,    0,  826,  826,    0,
-      826,  826,  826,  826,    0,  826,  826,  826,    0,  826,
-      826,  826,  828,    0,    0,  828,    0,    0,  828,  828,
-        0,  828,  828,  828,  828,  828,    0,  828,  828,  828,
-      828,  828,  828,  829,  829,  829,  829,  829,  829,  829,
-      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
-
-      829,  829,  829,  829,  830,  830,    0,  830,    0,  830,
-      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
-      830,  830,  830,  830,  830,  831,    0,    0,    0,    0,
-      831,    0,  831,    0,  831,  831,  831,  831,  831,    0,
-      831,  831,  831,  831,  831,  831,  832,    0,    0,    0,
-        0,    0,    0,  832,    0,  832,  832,  832,  832,    0,
-      832,  832,  832,  832,  832,  832,  832,  833,    0,    0,
-      833,  833,    0,  833,  833,    0,  833,  833,  833,  833,
-        0,  833,  833,  833,  833,  833,  833,  833,  834,  834,
-      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
-
-      834,  834,  834,  834,  834,  834,  834,  834,  834,  835,
-      835,    0,  835,  835,  835,  835,  835,  835,  835,  835,
-      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
-      837,    0,    0,  837,  837,    0,  837,  837,    0,  837,
-      837,  837,  837,    0,    0,  837,  837,  837,  837,  837,
-      837,  838,  838,    0,  838,    0,    0,    0,  838,  839,
-      839,    0,  839,    0,    0,    0,  839,  840,  840,  840,
-        0,  840,    0,    0,    0,  840,  841,    0,    0,  841,
-      841,    0,  841,  841,    0,  841,  841,  841,  841,    0,
-        0,  841,  841,  841,  841,  841,  841,  842,    0,    0,
-
-      842,  842,    0,  842,  842,    0,  842,  842,  842,  842,
-        0,    0,  842,  842,  842,  842,  842,  842,  843,    0,
-        0,  843,  843,    0,  843,  843,    0,  843,  843,  843,
-      843,    0,  843,  843,  843,    0,  843,  843,  843,  845,
-        0,    0,  845,    0,    0,  845,  845,    0,  845,  845,
-      845,  845,  845,    0,  845,  845,  845,  845,  845,  845,
-      846,    0,    0,    0,    0,    0,    0,  846,    0,  846,
-      846,  846,  846,    0,    0,  846,  846,  846,  846,  846,
-      846,  847,    0,    0,    0,    0,    0,    0,  847,    0,
-      847,  847,  847,  847,    0,  847,  847,  847,  847,  847,
-
-      847,  847,  848,    0,    0,  848,  848,    0,  848,  848,
-        0,  848,  848,  848,  848,    0,  848,  848,  848,  848,
-      848,  848,  848,  849,    0,    0,  849,  849,    0,  849,
-      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
-      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
-      850,  851,  851,    0,  851,    0,    0,    0,  851,  852,
-      852,  852,    0,  852,    0,    0,    0,  852,  855,  855,
-        0,  855,    0,    0,    0,  855,  856,  856,    0,  856,
-        0,    0,    0,  856,  857,  857,    0,  857,    0,    0,
-        0,  857,  858,  858,  858,    0,  858,    0,    0,    0,
-
-      858,  859,    0,    0,  859,  859,    0,  859,  860,  860,
-        0,  860,    0,    0,    0,  860,  861,  861,    0,  861,
-        0,    0,    0,  861,  862,  862,    0,  862,    0,    0,
-        0,  862,  863,  863,  863,    0,  863,    0,    0,    0,
-      863,  864,  864,  864,  864,    0,  864,    0,    0,    0,
-      864,  867,  867,    0,  867,    0,    0,    0,  867,  868,
-      868,    0,  868,    0,    0,    0,  868,  869,  869,    0,
-      869,    0,    0,    0,  869,  872,  872,  872,    0,  872,
-        0,    0,    0,  872,  873,  873,  873,  873,    0,  873,
-        0,    0,    0,  873,  874,  874,  874,  874,  874,  874,
 
+      517,  517,  517,  517,  517,  540,  540,  540,  540,  540,
+      540,  540,  540,  540,  540,  540,  543,  943,  943,  688,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  688,  543,  636,  635,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  634,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  549,  549,  549,
+      549,  549,  549,  549,  549,  549,  549,  640,  640,  663,
+      620,  663,  663,  663,  895,  899,  895,  899,  740,  640,
+
+      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
+      740,  900,  618,  900,  549,  551,  551,  551,  551,  551,
+      551,  551,  551,  551,  551,  551,  682,  617,  682,  682,
+      682,  682,  682,  682,  694,  694,  694,  694,  694,  694,
+      663,  687,  687,  687,  687,  687,  687,  687,  687,  687,
+      687,  616,  945,  551,  560,  945,  560,  560,  560,  560,
+      560,  560,  560,  560,  560,  560,  560,  563,  741,  563,
+      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
+      741,  608,  607,  563,  563,  563,  563,  563,  563,  691,
+      605,  691,  691,  691,  691,  691,  691,  904,  604,  904,
+
+      715,  691,  715,  715,  715,  907,  602,  907,  563,  563,
+      563,  563,  563,  563,  566,  566,  566,  566,  566,  566,
+      566,  566,  566,  566,  566,  917,  601,  917,  566,  566,
+      566,  566,  566,  566,  693,  693,  693,  693,  693,  693,
+      693,  693,  693,  693,  918,  926,  918,  926,  927,  700,
+      927,  715,  600,  566,  566,  566,  566,  566,  566,  567,
+      700,  567,  567,  567,  567,  567,  567,  567,  567,  567,
+      567,  570,  598,  570,  570,  570,  570,  570,  570,  570,
+      570,  570,  570,  577,  577,  577,  577,  577,  577,  577,
+      577,  577,  577,  577,  577,  577,  789,  594,  593,  577,
+
+      577,  577,  577,  577,  577,  716,  592,  716,  716,  716,
+      717,  743,  717,  717,  717,  718,  575,  718,  718,  718,
+      789,  569,  568,  743,  577,  577,  577,  577,  577,  577,
+      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
+      580,  580,  781,  789,  555,  554,  580,  580,  580,  580,
+      580,  580,  548,  930,  781,  930,  716,  936,  937,  936,
+      937,  717,  939,  947,  939,  947,  718,  948,  951,  948,
+      951,  580,  580,  580,  580,  580,  580,  583,  545,  583,
+      583,  583,  583,  583,  583,  583,  583,  583,  583,  584,
+      722,  544,  722,  722,  722,  584,  722,  722,  584,  584,
+
+      722,  584,  584,  584,  584,  584,  584,  584,  584,  584,
+      584,  584,  584,  584,  722,  722,  722,  584,  584,  584,
+      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
+      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
+      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
+      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
+      606,  727,  542,  727,  727,  727,  727,  727,  727,  606,
+      952,  541,  952,  606,  606,  606,  606,  606,  606,  606,
+      606,  606,  606,  606,  606,  606,  539,  538,  606,  606,
+      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
+
+      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
+      606,  533,  606,  606,  606,  606,  606,  606,  606,  606,
+      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
+      612,  532,  612,  612,  612,  612,  612,  612,  612,  612,
+      612,  612,  723,  723,  723,  723,  723,  723,  723,  723,
+      723,  723,  742,  742,  742,  742,  742,  742,  742,  742,
+      742,  742,  749,  749,  749,  749,  749,  749,  499,  612,
+      619,  498,  619,  619,  619,  619,  619,  619,  619,  619,
+      619,  619,  625,  497,  625,  625,  625,  625,  625,  625,
+      625,  625,  625,  625,  625,  628,  489,  628,  628,  628,
+
+      628,  628,  628,  628,  628,  628,  628,  628,  957,  488,
+      957,  628,  628,  628,  628,  628,  628,  746,  487,  746,
+      746,  746,  746,  746,  746,  958,  483,  958,  778,  746,
+      778,  778,  778,  778,  778,  778,  628,  628,  628,  628,
+      628,  628,  631,  631,  631,  631,  631,  631,  631,  631,
+      631,  631,  631,  476,  475,  473,  631,  631,  631,  631,
+      631,  631,  748,  748,  748,  748,  748,  748,  748,  748,
+      748,  748,  754,  754,  754,  754,  754,  754,  754,  471,
+      470,  631,  631,  631,  631,  631,  631,  632,  467,  632,
+      632,  632,  632,  632,  632,  632,  632,  632,  632,  643,
+
+      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
+      643,  666,  466,  666,  666,  666,  666,  666,  666,  666,
+      666,  666,  666,  672,  672,  672,  672,  672,  672,  672,
+      672,  672,  672,  762,  762,  762,  762,  762,  762,  762,
+      762,  762,  762,  763,  763,  763,  763,  763,  763,  763,
+      763,  763,  763,  822,  822,  822,  822,  822,  822,  465,
+      672,  674,  459,  674,  674,  674,  674,  674,  674,  674,
+      674,  674,  674,  458,  456,  455,  773,  454,  773,  773,
+      773,  773,  773,  773,  774,  774,  774,  774,  774,  774,
+      774,  774,  774,  774,  840,  840,  840,  840,  840,  840,
+
+      674,  689,  453,  689,  689,  689,  689,  689,  689,  689,
+      689,  689,  689,  689,  692,  773,  692,  692,  692,  692,
+      692,  692,  692,  692,  692,  692,  692,  427,  426,  423,
+      692,  692,  692,  692,  692,  692,  791,  791,  791,  791,
+      791,  791,  791,  791,  791,  791,  795,  422,  795,  795,
+      795,  795,  795,  795,  421,  692,  692,  692,  692,  692,
+      692,  695,  695,  695,  695,  695,  695,  695,  695,  695,
+      695,  420,  414,  413,  412,  695,  695,  695,  695,  695,
+      695,  800,  800,  800,  800,  800,  800,  800,  800,  800,
+      800,  818,  411,  818,  818,  818,  818,  818,  818,  410,
+
+      695,  695,  695,  695,  695,  695,  696,  409,  696,  696,
+      696,  696,  696,  696,  696,  696,  696,  696,  699,  699,
+      699,  699,  699,  699,  699,  699,  699,  699,  699,  732,
+      818,  732,  732,  732,  732,  732,  732,  732,  732,  732,
+      732,  733,  408,  733,  733,  733,  733,  733,  733,  733,
+      733,  733,  733,  734,  407,  734,  734,  734,  734,  734,
+      734,  734,  734,  734,  734,  737,  406,  737,  737,  737,
+      737,  737,  737,  737,  737,  737,  737,  744,  405,  744,
+      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
+      747,  404,  747,  747,  747,  747,  747,  747,  747,  747,
+
+      747,  747,  403,  402,  401,  400,  747,  747,  747,  747,
+      747,  747,  801,  801,  801,  801,  801,  801,  801,  801,
+      801,  801,  828,  399,  828,  828,  828,  828,  828,  828,
+      396,  747,  747,  747,  747,  747,  747,  750,  395,  750,
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  766,
+      390,  766,  766,  766,  766,  766,  766,  766,  766,  766,
+      766,  769,  389,  769,  769,  769,  769,  769,  769,  769,
+      769,  769,  769,  771,  388,  771,  771,  771,  771,  771,
+      771,  771,  771,  771,  771,  772,  382,  772,  772,  772,
+      772,  772,  772,  772,  772,  772,  772,  784,  380,  784,
+
+      784,  784,  784,  784,  784,  784,  784,  784,  784,  797,
+      379,  797,  797,  797,  797,  797,  797,  797,  797,  797,
+      797,  798,  378,  798,  798,  798,  798,  798,  798,  798,
+      798,  798,  798,  799,  377,  799,  799,  799,  799,  799,
+      799,  799,  799,  799,  799,  802,  802,  802,  802,  802,
+      802,  802,  802,  802,  802,  813,  376,  813,  813,  813,
+      813,  813,  813,  813,  813,  813,  813,  814,  375,  814,
+      814,  814,  814,  814,  814,  814,  814,  814,  814,  816,
+      374,  816,  816,  816,  816,  816,  816,  816,  816,  816,
+      816,  817,  373,  817,  817,  817,  817,  817,  817,  817,
+
+      817,  817,  817,  820,  820,  820,  820,  820,  820,  820,
+      820,  820,  820,  821,  821,  821,  821,  821,  821,  821,
+      821,  821,  821,  824,  824,  824,  824,  824,  824,  824,
+      824,  824,  824,  829,  829,  829,  829,  829,  829,  829,
+      829,  829,  829,  832,  832,  832,  832,  832,  832,  832,
+      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
+      833,  833,  833,  837,  837,  837,  837,  837,  837,  372,
+      829,  830,  830,  830,  830,  830,  830,  830,  830,  830,
+      830,  834,  834,  834,  834,  834,  834,  834,  834,  834,
+      834,  956,  371,  355,  956,  354,  353,  352,  956,  350,
+
+      837,  349,  345,  344,  343,  341,  340,  339,  830,  831,
+      831,  831,  831,  831,  831,  831,  831,  831,  831,  839,
+      839,  839,  839,  839,  839,  839,  839,  839,  839,  338,
+      337,  336,  335,  333,  328,  327,  326,  319,  318,  317,
+      316,  315,  309,  307,  306,  305,  831,  836,  836,  836,
+      836,  836,  836,  836,  836,  836,  836,  304,  303,  302,
+      301,  299,  298,  296,  288,  287,  284,  283,  276,  275,
+      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
+      261,  258,  257,  256,  836,  842,  842,  842,  842,  842,
+      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
+
+      842,  842,  842,  842,  842,  842,  843,  843,  843,  843,
+      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
+      843,  843,  843,  843,  843,  843,  843,  844,  844,  844,
+      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
+      844,  844,  844,  844,  844,  844,  844,  844,  845,  845,
+      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
+      845,  845,  845,  845,  845,  845,  845,  845,  845,  846,
+      250,  247,  246,  245,  244,  243,  846,  240,  846,  846,
+      846,  846,  239,  238,  846,  846,  846,  846,  846,  846,
+      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
+
+      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
+      847,  848,  237,  236,  235,  234,  848,  233,  848,  232,
+      848,  848,  848,  848,  848,  231,  848,  848,  848,  848,
+      848,  848,  849,  230,  229,  228,  227,  221,  220,  849,
+      213,  849,  849,  849,  849,  212,  211,  849,  849,  849,
+      849,  849,  849,  850,  210,  209,  850,  850,  208,  850,
+      850,  206,  850,  850,  850,  850,  205,  204,  850,  850,
+      850,  850,  850,  850,  851,  851,  202,  851,  196,  188,
+      184,  851,  853,  180,  179,  853,  853,  177,  853,  853,
+      173,  853,  853,  853,  853,  166,  162,  853,  853,  853,
+
+      853,  853,  853,  854,  160,  158,  854,  854,  150,  854,
+      854,  149,  854,  854,  854,  854,  148,  854,  854,  854,
+      147,  854,  854,  854,  856,  146,  140,  856,  139,  138,
+      856,  856,  137,  856,  856,  856,  856,  856,  136,  856,
+      856,  856,  856,  856,  856,  857,  857,  857,  857,  857,
+      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
+      857,  857,  857,  857,  857,  857,  858,  858,  134,  858,
+      133,  858,  858,  858,  858,  858,  858,  858,  858,  858,
+      858,  858,  858,  858,  858,  858,  858,  859,  132,  131,
+      130,  126,  859,  122,  859,  121,  859,  859,  859,  859,
+
+      859,  117,  859,  859,  859,  859,  859,  859,  860,  114,
+      111,  106,  105,  104,  102,  860,   98,  860,  860,  860,
+      860,   97,  860,  860,  860,  860,  860,  860,  860,  861,
+       96,   95,  861,  861,   91,  861,  861,   78,  861,  861,
+      861,  861,   71,  861,  861,  861,  861,  861,  861,  861,
+      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
+      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
+      862,  863,  863,   64,  863,  863,  863,  863,  863,  863,
+      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
+      863,  863,  865,   60,   59,  865,  865,   57,  865,  865,
+
+       56,  865,  865,  865,  865,   54,   52,  865,  865,  865,
+      865,  865,  865,  866,  866,   44,  866,   43,   42,   40,
+      866,  867,  867,   35,  867,   31,   25,   19,  867,  868,
+      868,  868,   17,  868,   16,   15,    0,  868,  869,    0,
+        0,  869,  869,    0,  869,  869,    0,  869,  869,  869,
+      869,    0,    0,  869,  869,  869,  869,  869,  869,  870,
+        0,    0,  870,  870,    0,  870,  870,    0,  870,  870,
+      870,  870,    0,    0,  870,  870,  870,  870,  870,  870,
+      871,    0,    0,  871,  871,    0,  871,  871,    0,  871,
+      871,  871,  871,    0,  871,  871,  871,    0,  871,  871,
+
+      871,  873,    0,    0,  873,    0,    0,  873,  873,    0,
+      873,  873,  873,  873,  873,    0,  873,  873,  873,  873,
+      873,  873,  874,  874,    0,  874,    0,  874,  874,  874,
       874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
-      874,  874,  874,  874,  874,  876,  876,    0,  876,    0,
-        0,    0,  876,  877,  877,    0,  877,    0,    0,    0,
-      877,  879,  879,  879,    0,  879,    0,    0,    0,  879,
-      880,  880,  880,  880,    0,  880,    0,    0,    0,  880,
-      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
-      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
-      881,  884,    0,    0,  884,  884,    0,  884,  885,    0,
-        0,    0,  885,  885,    0,  885,  885,  885,    0,    0,
-      885,  885,  886,  886,    0,  886,    0,    0,    0,  886,
-
-      887,    0,  887,  887,    0,  887,    0,    0,    0,  887,
-      890,  890,  890,    0,  890,    0,    0,    0,  890,  891,
-      891,  891,  891,    0,  891,    0,    0,    0,  891,  892,
-      892,    0,    0,  892,    0,    0,    0,  892,  893,  893,
-      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
-      893,  893,  893,  893,  893,  893,  893,  893,  893,  895,
-        0,    0,  895,  895,    0,  895,  896,    0,    0,    0,
-      896,  896,    0,  896,  896,  896,    0,    0,  896,  896,
-      899,  899,    0,  899,    0,    0,    0,  899,  900,    0,
-      900,  900,    0,  900,    0,    0,    0,  900,  902,  902,
-
+      874,  874,  874,  875,    0,    0,    0,    0,    0,    0,
+      875,    0,  875,  875,  875,  875,    0,    0,  875,  875,
+      875,  875,  875,  875,  876,    0,    0,    0,    0,    0,
+        0,  876,    0,  876,  876,  876,  876,    0,  876,  876,
+      876,  876,  876,  876,  876,  877,    0,    0,  877,  877,
+        0,  877,  877,    0,  877,  877,  877,  877,    0,  877,
+
+      877,  877,  877,  877,  877,  877,  878,    0,    0,  878,
+      878,    0,  878,  879,  879,  879,  879,  879,  879,  879,
+      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
+      879,  879,  879,  879,  880,  880,    0,  880,    0,    0,
+        0,  880,  881,  881,  881,    0,  881,    0,    0,    0,
+      881,  884,  884,    0,  884,    0,    0,    0,  884,  885,
+      885,    0,  885,    0,    0,    0,  885,  886,  886,    0,
+      886,    0,    0,    0,  886,  887,  887,  887,    0,  887,
+        0,    0,    0,  887,  888,    0,    0,  888,  888,    0,
+      888,  889,  889,    0,  889,    0,    0,    0,  889,  890,
+
+      890,    0,  890,    0,    0,    0,  890,  891,  891,    0,
+      891,    0,    0,    0,  891,  892,  892,  892,    0,  892,
+        0,    0,    0,  892,  893,  893,  893,  893,    0,  893,
+        0,    0,    0,  893,  896,  896,    0,  896,    0,    0,
+        0,  896,  897,  897,    0,  897,    0,    0,    0,  897,
+      898,  898,    0,  898,    0,    0,    0,  898,  901,  901,
+      901,    0,  901,    0,    0,    0,  901,  902,  902,  902,
       902,    0,  902,    0,    0,    0,  902,  903,  903,  903,
-        0,    0,  903,    0,    0,    0,  903,  904,  904,  904,
-      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
-      904,  904,  904,  904,  904,  904,  904,  904,  905,  905,
-        0,  905,  905,  905,    0,  905,    0,  905,  905,  905,
-      905,    0,    0,  905,  905,  905,  905,  905,  905,  906,
-      906,    0,  906,  906,  906,    0,  906,    0,  906,  906,
-      906,  906,    0,    0,  906,  906,  906,  906,  906,  906,
-      909,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,  909,  909,    0,  909,  909,    0,  909,  911,  911,
-
-        0,  911,    0,    0,    0,  911,  912,    0,  912,  912,
-        0,  912,    0,    0,    0,  912,  915,  915,    0,    0,
-      915,    0,    0,    0,  915,  917,    0,    0,    0,    0,
-        0,    0,  917,    0,  917,  917,  917,  917,    0,    0,
-      917,  917,  917,  917,  917,  917,  920,  920,    0,  920,
-        0,    0,    0,  920,  921,    0,  921,  921,    0,  921,
-        0,    0,    0,  921,  925,  925,    0,  925,    0,    0,
-        0,  925,  926,    0,  926,    0,    0,  926,    0,    0,
-        0,  926,  927,  927,  927,  927,  927,  927,  927,  927,
-      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
-
-      927,  927,  927,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
-      813,  813,  813,  813
+      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
+      903,  903,  903,  903,  903,  903,  903,  903,  905,  905,
+
+        0,  905,    0,    0,    0,  905,  906,  906,    0,  906,
+        0,    0,    0,  906,  908,  908,  908,    0,  908,    0,
+        0,    0,  908,  909,  909,  909,  909,    0,  909,    0,
+        0,    0,  909,  910,  910,  910,  910,  910,  910,  910,
+      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
+      910,  910,  910,  910,  913,    0,    0,  913,  913,    0,
+      913,  914,    0,    0,    0,  914,  914,    0,  914,  914,
+      914,    0,    0,  914,  914,  915,  915,    0,  915,    0,
+        0,    0,  915,  916,    0,  916,  916,    0,  916,    0,
+        0,    0,  916,  919,  919,  919,    0,  919,    0,    0,
+
+        0,  919,  920,  920,  920,  920,    0,  920,    0,    0,
+        0,  920,  921,  921,    0,    0,  921,    0,    0,    0,
+      921,  922,  922,  922,  922,  922,  922,  922,  922,  922,
+      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
+      922,  922,  924,    0,    0,  924,  924,    0,  924,  925,
+        0,    0,    0,  925,  925,    0,  925,  925,  925,    0,
+        0,  925,  925,  928,  928,    0,  928,    0,    0,    0,
+      928,  929,    0,  929,  929,    0,  929,    0,    0,    0,
+      929,  931,  931,  931,    0,  931,    0,    0,    0,  931,
+      932,  932,  932,    0,    0,  932,    0,    0,    0,  932,
+
+      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
+      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
+      933,  934,  934,    0,  934,  934,  934,    0,  934,    0,
+      934,  934,  934,  934,    0,    0,  934,  934,  934,  934,
+      934,  934,  935,  935,    0,  935,  935,  935,    0,  935,
+        0,  935,  935,  935,  935,    0,    0,  935,  935,  935,
+      935,  935,  935,  938,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,  938,  938,    0,  938,  938,    0,
+      938,  940,  940,    0,  940,    0,    0,    0,  940,  941,
+        0,  941,  941,    0,  941,    0,    0,    0,  941,  944,
+
+      944,    0,    0,  944,    0,    0,    0,  944,  946,    0,
+        0,    0,    0,    0,    0,  946,    0,  946,  946,  946,
+      946,    0,    0,  946,  946,  946,  946,  946,  946,  949,
+      949,    0,  949,    0,    0,    0,  949,  950,    0,  950,
+      950,    0,  950,    0,    0,    0,  950,  953,  953,    0,
+      953,    0,    0,    0,  953,  954,    0,  954,    0,    0,
+      954,    0,    0,    0,  954,  955,  955,  955,  955,  955,
+      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
+      955,  955,  955,  955,  955,  955,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841
     } ;
 
 static yy_state_type yy_last_accepting_state;
 static char *yy_last_accepting_cpos;
 
+extern int sudoers_flex_debug;
+int sudoers_flex_debug = 0;
+
 /* The intent behind this definition is that it'll catch
  * any uses of REJECT which flex missed.
  */
@@ -1923,10 +2025,9 @@ static char *yy_last_accepting_cpos;
 #define yymore() yymore_used_but_not_detected
 #define YY_MORE_ADJ 0
 #define YY_RESTORE_YY_MORE_OFFSET
-char *yytext;
-#line 1 "toke.l"
-#define INITIAL 0
-#line 2 "toke.l"
+char *sudoerstext;
+#line 1 "/home/ben/src/sudo/plugins/sudoers/toke.l"
+#line 2 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 /*
  * Copyright (c) 1996, 1998-2005, 2007-2013
  *	Todd C. Miller <Todd.Miller@courtesan.com>
@@ -2037,20 +2138,64 @@ int (*trace_print)(const char *msg) = su
 #define	push_include(_p)	(_push_include((_p), false))
 #define	push_includedir(_p)	(_push_include((_p), true))
 #define YY_NO_INPUT 1
-#define YY_NO_UNPUT 1
-#define GOTDEFS 1
 
-#define GOTCMND 2
 
-#define STARTDEFS 3
 
-#define INDEFS 4
 
-#define INSTR 5
 
+
+#line 2147 "lex.sudoers.c"
+
+#define INITIAL 0
+#define GOTDEFS 1
+#define GOTCMND 2
+#define STARTDEFS 3
+#define INDEFS 4
+#define INSTR 5
 #define WANTDIGEST 6
 
-#line 2053 "lex.sudoers.c"
+#ifndef YY_NO_UNISTD_H
+/* Special case for "unistd.h", since it is non-ANSI. We include it way
+ * down here because we want the user's section 1 to have been scanned first.
+ * The user has a chance to override it with an option.
+ */
+#include <unistd.h>
+#endif
+
+#ifndef YY_EXTRA_TYPE
+#define YY_EXTRA_TYPE void *
+#endif
+
+static int yy_init_globals (void );
+
+/* Accessor methods to globals.
+   These are made visible to non-reentrant scanners for convenience. */
+
+int sudoerslex_destroy (void );
+
+int sudoersget_debug (void );
+
+void sudoersset_debug (int debug_flag  );
+
+YY_EXTRA_TYPE sudoersget_extra (void );
+
+void sudoersset_extra (YY_EXTRA_TYPE user_defined  );
+
+FILE *sudoersget_in (void );
+
+void sudoersset_in  (FILE * in_str  );
+
+FILE *sudoersget_out (void );
+
+void sudoersset_out  (FILE * out_str  );
+
+yy_size_t sudoersget_leng (void );
+
+char *sudoersget_text (void );
+
+int sudoersget_lineno (void );
+
+void sudoersset_lineno (int line_number  );
 
 /* Macros after this point can all be overridden by user definitions in
  * section 1.
@@ -2058,79 +2203,46 @@ int (*trace_print)(const char *msg) = su
 
 #ifndef YY_SKIP_YYWRAP
 #ifdef __cplusplus
-extern "C" int yywrap YY_PROTO(( void ));
+extern "C" int sudoerswrap (void );
 #else
-extern int yywrap YY_PROTO(( void ));
-#endif
+extern int sudoerswrap (void );
 #endif
-
-#ifndef YY_NO_UNPUT
-static void yyunput YY_PROTO(( int c, char *buf_ptr ));
 #endif
 
 #ifndef yytext_ptr
-static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+static void yy_flex_strncpy (char *,yyconst char *,int );
 #endif
 
 #ifdef YY_NEED_STRLEN
-static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+static int yy_flex_strlen (yyconst char * );
 #endif
 
 #ifndef YY_NO_INPUT
-#ifdef __cplusplus
-static int yyinput YY_PROTO(( void ));
-#else
-static int input YY_PROTO(( void ));
-#endif
-#endif
-
-#if defined(YY_STACK_USED) && YY_STACK_USED
-static int yy_start_stack_ptr = 0;
-static int yy_start_stack_depth = 0;
-static int *yy_start_stack = 0;
-#ifndef YY_NO_PUSH_STATE
-static void yy_push_state YY_PROTO(( int new_state ));
-#endif
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state YY_PROTO(( void ));
-#endif
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state YY_PROTO(( void ));
-#endif
 
+#ifdef __cplusplus
+static int yyinput (void );
 #else
-#define YY_NO_PUSH_STATE 1
-#define YY_NO_POP_STATE 1
-#define YY_NO_TOP_STATE 1
+static int input (void );
 #endif
 
-#ifdef YY_MALLOC_DECL
-YY_MALLOC_DECL
-#else
-#ifdef __STDC__
-#ifndef __cplusplus
-#include <stdlib.h>
-#endif
-#else
-/* Just try to get by without declaring the routines.  This will fail
- * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
- * or sizeof(void*) != sizeof(int).
- */
-#endif
 #endif
 
 /* Amount of stuff to slurp up with each read. */
 #ifndef YY_READ_BUF_SIZE
+#ifdef __ia64__
+/* On IA-64, the buffer size is 16k, not 8k */
+#define YY_READ_BUF_SIZE 16384
+#else
 #define YY_READ_BUF_SIZE 8192
+#endif /* __ia64__ */
 #endif
 
 /* Copy whatever the last rule matched to the standard output. */
-
 #ifndef ECHO
 /* This used to be an fputs(), but since the string might contain NUL's,
  * we now use fwrite().
  */
-#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#define ECHO do { if (fwrite( sudoerstext, sudoersleng, 1, sudoersout )) {} } while (0)
 #endif
 
 /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
@@ -2138,21 +2250,35 @@ YY_MALLOC_DECL
  */
 #ifndef YY_INPUT
 #define YY_INPUT(buf,result,max_size) \
-	if ( yy_current_buffer->yy_is_interactive ) \
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
 		{ \
-		int c = '*', n; \
+		int c = '*'; \
+		size_t n; \
 		for ( n = 0; n < max_size && \
-			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			     (c = getc( sudoersin )) != EOF && c != '\n'; ++n ) \
 			buf[n] = (char) c; \
 		if ( c == '\n' ) \
 			buf[n++] = (char) c; \
-		if ( c == EOF && ferror( yyin ) ) \
+		if ( c == EOF && ferror( sudoersin ) ) \
 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
 		result = n; \
 		} \
-	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
-		  && ferror( yyin ) ) \
-		YY_FATAL_ERROR( "input in flex scanner failed" );
+	else \
+		{ \
+		errno=0; \
+		while ( (result = fread(buf, 1, max_size, sudoersin))==0 && ferror(sudoersin)) \
+			{ \
+			if( errno != EINTR) \
+				{ \
+				YY_FATAL_ERROR( "input in flex scanner failed" ); \
+				break; \
+				} \
+			errno=0; \
+			clearerr(sudoersin); \
+			} \
+		}\
+\
+
 #endif
 
 /* No semi-colon after return; correct usage is to write "yyterminate();" -
@@ -2173,14 +2299,20 @@ YY_MALLOC_DECL
 #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
 #endif
 
+/* end tables serialization structures and prototypes */
+
 /* Default declaration of generated scanner - a define so the user can
  * easily add parameters.
  */
 #ifndef YY_DECL
-#define YY_DECL int yylex YY_PROTO(( void ))
-#endif
+#define YY_DECL_IS_OURS 1
+
+extern int sudoerslex (void);
+
+#define YY_DECL int sudoerslex (void)
+#endif /* !YY_DECL */
 
-/* Code executed at the beginning of each rule, after yytext and yyleng
+/* Code executed at the beginning of each rule, after sudoerstext and sudoersleng
  * have been set up.
  */
 #ifndef YY_USER_ACTION
@@ -2193,106 +2325,109 @@ YY_MALLOC_DECL
 #endif
 
 #define YY_RULE_SETUP \
-	if ( yyleng > 0 ) \
-		yy_current_buffer->yy_at_bol = \
-				(yytext[yyleng - 1] == '\n'); \
+	if ( sudoersleng > 0 ) \
+		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
+				(sudoerstext[sudoersleng - 1] == '\n'); \
 	YY_USER_ACTION
 
+/** The main scanner function which does all the work.
+ */
 YY_DECL
-	{
+{
 	register yy_state_type yy_current_state;
 	register char *yy_cp, *yy_bp;
 	register int yy_act;
-
-#line 137 "toke.l"
-
-#line 2209 "lex.sudoers.c"
-
-	if ( yy_init )
+    
+	if ( !(yy_init) )
 		{
-		yy_init = 0;
+		(yy_init) = 1;
 
 #ifdef YY_USER_INIT
 		YY_USER_INIT;
 #endif
 
-		if ( ! yy_start )
-			yy_start = 1;	/* first start state */
+		if ( ! (yy_start) )
+			(yy_start) = 1;	/* first start state */
 
-		if ( ! yyin )
-			yyin = stdin;
+		if ( ! sudoersin )
+			sudoersin = stdin;
 
-		if ( ! yyout )
-			yyout = stdout;
+		if ( ! sudoersout )
+			sudoersout = stdout;
 
-		if ( ! yy_current_buffer )
-			yy_current_buffer =
-				yy_create_buffer( yyin, YY_BUF_SIZE );
+		if ( ! YY_CURRENT_BUFFER ) {
+			sudoersensure_buffer_stack ();
+			YY_CURRENT_BUFFER_LVALUE =
+				sudoers_create_buffer(sudoersin,YY_BUF_SIZE );
+		}
 
-		yy_load_buffer_state();
+		sudoers_load_buffer_state( );
 		}
 
+	{
+#line 137 "/home/ben/src/sudo/plugins/sudoers/toke.l"
+
+#line 2370 "lex.sudoers.c"
+
 	while ( 1 )		/* loops until end-of-file is reached */
 		{
-		yy_cp = yy_c_buf_p;
+		yy_cp = (yy_c_buf_p);
 
-		/* Support of yytext. */
-		*yy_cp = yy_hold_char;
+		/* Support of sudoerstext. */
+		*yy_cp = (yy_hold_char);
 
 		/* yy_bp points to the position in yy_ch_buf of the start of
 		 * the current run.
 		 */
 		yy_bp = yy_cp;
 
-		yy_current_state = yy_start;
+		yy_current_state = (yy_start);
 		yy_current_state += YY_AT_BOL();
 yy_match:
 		do
 			{
-			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
 			if ( yy_accept[yy_current_state] )
 				{
-				yy_last_accepting_state = yy_current_state;
-				yy_last_accepting_cpos = yy_cp;
+				(yy_last_accepting_state) = yy_current_state;
+				(yy_last_accepting_cpos) = yy_cp;
 				}
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 814 )
+				if ( yy_current_state >= 842 )
 					yy_c = yy_meta[(unsigned int) yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 5604 );
+		while ( yy_base[yy_current_state] != 5587 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
 		if ( yy_act == 0 )
 			{ /* have to back up */
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
+			yy_cp = (yy_last_accepting_cpos);
+			yy_current_state = (yy_last_accepting_state);
 			yy_act = yy_accept[yy_current_state];
 			}
 
 		YY_DO_BEFORE_ACTION;
 
-
 do_action:	/* This label is used only to access EOF actions. */
 
-
 		switch ( yy_act )
 	{ /* beginning of action switch */
 			case 0: /* must back up */
 			/* undo the effects of YY_DO_BEFORE_ACTION */
-			*yy_cp = yy_hold_char;
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
+			*yy_cp = (yy_hold_char);
+			yy_cp = (yy_last_accepting_cpos);
+			yy_current_state = (yy_last_accepting_state);
 			goto yy_find_action;
 
 case 1:
 YY_RULE_SETUP
-#line 138 "toke.l"
+#line 138 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE(", ");
 			    LEXRETURN(',');
@@ -2300,12 +2435,12 @@ YY_RULE_SETUP
 	YY_BREAK
 case 2:
 YY_RULE_SETUP
-#line 143 "toke.l"
+#line 143 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 BEGIN STARTDEFS;
 	YY_BREAK
 case 3:
 YY_RULE_SETUP
-#line 145 "toke.l"
+#line 145 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    BEGIN INDEFS;
 			    LEXTRACE("DEFVAR ");
@@ -2317,7 +2452,7 @@ YY_RULE_SETUP
 
 case 4:
 YY_RULE_SETUP
-#line 154 "toke.l"
+#line 154 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    BEGIN STARTDEFS;
 			    LEXTRACE(", ");
@@ -2326,7 +2461,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 5:
 YY_RULE_SETUP
-#line 160 "toke.l"
+#line 160 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("= ");
 			    LEXRETURN('=');
@@ -2334,7 +2469,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 6:
 YY_RULE_SETUP
-#line 165 "toke.l"
+#line 165 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("+= ");
 			    LEXRETURN('+');
@@ -2342,7 +2477,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 7:
 YY_RULE_SETUP
-#line 170 "toke.l"
+#line 170 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("-= ");
 			    LEXRETURN('-');
@@ -2350,7 +2485,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 8:
 YY_RULE_SETUP
-#line 175 "toke.l"
+#line 175 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("BEGINSTR ");
 			    sudoerslval.string = NULL;
@@ -2360,7 +2495,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 9:
 YY_RULE_SETUP
-#line 182 "toke.l"
+#line 182 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("WORD(2) ");
 			    if (!fill(sudoerstext, sudoersleng))
@@ -2371,8 +2506,9 @@ YY_RULE_SETUP
 
 
 case 10:
+/* rule 10 can match eol */
 YY_RULE_SETUP
-#line 191 "toke.l"
+#line 191 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* Line continuation char followed by newline. */
 			    sudolineno++;
@@ -2381,7 +2517,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 11:
 YY_RULE_SETUP
-#line 197 "toke.l"
+#line 197 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("ENDSTR ");
 			    BEGIN prev_state;
@@ -2416,7 +2552,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 12:
 YY_RULE_SETUP
-#line 229 "toke.l"
+#line 229 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("BACKSLASH ");
 			    if (!append(sudoerstext, sudoersleng))
@@ -2425,7 +2561,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 13:
 YY_RULE_SETUP
-#line 235 "toke.l"
+#line 235 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("STRBODY ");
 			    if (!append(sudoerstext, sudoersleng))
@@ -2436,7 +2572,7 @@ YY_RULE_SETUP
 
 case 14:
 YY_RULE_SETUP
-#line 243 "toke.l"
+#line 243 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* quoted fnmatch glob char, pass verbatim */
 			    LEXTRACE("QUOTEDCHAR ");
@@ -2447,7 +2583,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 15:
 YY_RULE_SETUP
-#line 251 "toke.l"
+#line 251 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* quoted sudoers special char, strip backslash */
 			    LEXTRACE("QUOTEDCHAR ");
@@ -2457,8 +2593,9 @@ YY_RULE_SETUP
 			}
 	YY_BREAK
 case 16:
+/* rule 16 can match eol */
 YY_RULE_SETUP
-#line 259 "toke.l"
+#line 259 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    BEGIN INITIAL;
 			    yyless(0);
@@ -2467,7 +2604,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 17:
 YY_RULE_SETUP
-#line 265 "toke.l"
+#line 265 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("ARG ");
 			    if (!fill_args(sudoerstext, sudoersleng, sawspace))
@@ -2478,7 +2615,7 @@ YY_RULE_SETUP
 
 case 18:
 YY_RULE_SETUP
-#line 273 "toke.l"
+#line 273 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* Only return DIGEST if the length is correct. */
 			    if (sudoersleng == digest_len * 2) {
@@ -2494,7 +2631,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 19:
 YY_RULE_SETUP
-#line 286 "toke.l"
+#line 286 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* Only return DIGEST if the length is correct. */
 			    int len;
@@ -2517,8 +2654,9 @@ YY_RULE_SETUP
 			} /* base64 digest */
 	YY_BREAK
 case 20:
+/* rule 20 can match eol */
 YY_RULE_SETUP
-#line 307 "toke.l"
+#line 307 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    char *path;
 
@@ -2538,8 +2676,9 @@ YY_RULE_SETUP
 			}
 	YY_BREAK
 case 21:
+/* rule 21 can match eol */
 YY_RULE_SETUP
-#line 325 "toke.l"
+#line 325 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    char *path;
 
@@ -2563,7 +2702,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 22:
 YY_RULE_SETUP
-#line 346 "toke.l"
+#line 346 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    char deftype;
 			    int n;
@@ -2606,7 +2745,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 23:
 YY_RULE_SETUP
-#line 386 "toke.l"
+#line 386 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    int n;
 
@@ -2635,7 +2774,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 24:
 YY_RULE_SETUP
-#line 412 "toke.l"
+#line 412 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 				/* cmnd does not require passwd for this user */
 			    	LEXTRACE("NOPASSWD ");
@@ -2644,7 +2783,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 25:
 YY_RULE_SETUP
-#line 418 "toke.l"
+#line 418 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 				/* cmnd requires passwd for this user */
 			    	LEXTRACE("PASSWD ");
@@ -2653,7 +2792,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 26:
 YY_RULE_SETUP
-#line 424 "toke.l"
+#line 424 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("NOEXEC ");
 			    	LEXRETURN(NOEXEC);
@@ -2661,7 +2800,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 27:
 YY_RULE_SETUP
-#line 429 "toke.l"
+#line 429 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("EXEC ");
 			    	LEXRETURN(EXEC);
@@ -2669,7 +2808,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 28:
 YY_RULE_SETUP
-#line 434 "toke.l"
+#line 434 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("SETENV ");
 			    	LEXRETURN(SETENV);
@@ -2677,7 +2816,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 29:
 YY_RULE_SETUP
-#line 439 "toke.l"
+#line 439 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("NOSETENV ");
 			    	LEXRETURN(NOSETENV);
@@ -2685,7 +2824,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 30:
 YY_RULE_SETUP
-#line 444 "toke.l"
+#line 444 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("LOG_OUTPUT ");
 			    	LEXRETURN(LOG_OUTPUT);
@@ -2693,7 +2832,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 31:
 YY_RULE_SETUP
-#line 449 "toke.l"
+#line 449 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("NOLOG_OUTPUT ");
 			    	LEXRETURN(NOLOG_OUTPUT);
@@ -2701,7 +2840,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 32:
 YY_RULE_SETUP
-#line 454 "toke.l"
+#line 454 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("LOG_INPUT ");
 			    	LEXRETURN(LOG_INPUT);
@@ -2709,7 +2848,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 33:
 YY_RULE_SETUP
-#line 459 "toke.l"
+#line 459 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    	LEXTRACE("NOLOG_INPUT ");
 			    	LEXRETURN(NOLOG_INPUT);
@@ -2717,16 +2856,32 @@ YY_RULE_SETUP
 	YY_BREAK
 case 34:
 YY_RULE_SETUP
-#line 464 "toke.l"
+#line 464 "/home/ben/src/sudo/plugins/sudoers/toke.l"
+{
+			    	LEXTRACE("FOLLOW ");
+			    	LEXRETURN(FOLLOW);
+			}
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 469 "/home/ben/src/sudo/plugins/sudoers/toke.l"
+{
+			    	LEXTRACE("NOFOLLOW ");
+			    	LEXRETURN(NOFOLLOW);
+			}
+	YY_BREAK
+case 36:
+YY_RULE_SETUP
+#line 474 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* empty group or netgroup */
 			    LEXTRACE("ERROR ");
 			    LEXRETURN(ERROR);
 			}
 	YY_BREAK
-case 35:
+case 37:
 YY_RULE_SETUP
-#line 470 "toke.l"
+#line 480 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* netgroup */
 			    if (!fill(sudoerstext, sudoersleng))
@@ -2735,9 +2890,9 @@ YY_RULE_SETUP
 			    LEXRETURN(NETGROUP);
 			}
 	YY_BREAK
-case 36:
+case 38:
 YY_RULE_SETUP
-#line 478 "toke.l"
+#line 488 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* group */
 			    if (!fill(sudoerstext, sudoersleng))
@@ -2746,9 +2901,9 @@ YY_RULE_SETUP
 			    LEXRETURN(USERGROUP);
 			}
 	YY_BREAK
-case 37:
+case 39:
 YY_RULE_SETUP
-#line 486 "toke.l"
+#line 496 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (!fill(sudoerstext, sudoersleng))
 				yyterminate();
@@ -2756,9 +2911,9 @@ YY_RULE_SETUP
 			    LEXRETURN(NTWKADDR);
 			}
 	YY_BREAK
-case 38:
+case 40:
 YY_RULE_SETUP
-#line 493 "toke.l"
+#line 503 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (!fill(sudoerstext, sudoersleng))
 				yyterminate();
@@ -2766,9 +2921,9 @@ YY_RULE_SETUP
 			    LEXRETURN(NTWKADDR);
 			}
 	YY_BREAK
-case 39:
+case 41:
 YY_RULE_SETUP
-#line 500 "toke.l"
+#line 510 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (!ipv6_valid(sudoerstext)) {
 				LEXTRACE("ERROR ");
@@ -2780,9 +2935,9 @@ YY_RULE_SETUP
 			    LEXRETURN(NTWKADDR);
 			}
 	YY_BREAK
-case 40:
+case 42:
 YY_RULE_SETUP
-#line 511 "toke.l"
+#line 521 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (!ipv6_valid(sudoerstext)) {
 				LEXTRACE("ERROR ");
@@ -2794,18 +2949,18 @@ YY_RULE_SETUP
 			    LEXRETURN(NTWKADDR);
 			}
 	YY_BREAK
-case 41:
+case 43:
 YY_RULE_SETUP
-#line 522 "toke.l"
+#line 532 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("ALL ");
 			    LEXRETURN(ALL);
 
 			}
 	YY_BREAK
-case 42:
+case 44:
 YY_RULE_SETUP
-#line 528 "toke.l"
+#line 538 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 #ifdef HAVE_SELINUX
 			    LEXTRACE("ROLE ");
@@ -2815,9 +2970,9 @@ YY_RULE_SETUP
 #endif
 			}
 	YY_BREAK
-case 43:
+case 45:
 YY_RULE_SETUP
-#line 537 "toke.l"
+#line 547 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 #ifdef HAVE_SELINUX
 			    LEXTRACE("TYPE ");
@@ -2827,9 +2982,9 @@ YY_RULE_SETUP
 #endif
 			}
 	YY_BREAK
-case 44:
+case 46:
 YY_RULE_SETUP
-#line 545 "toke.l"
+#line 555 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 #ifdef HAVE_PRIV_SET
 			    LEXTRACE("PRIVS ");
@@ -2839,9 +2994,9 @@ YY_RULE_SETUP
 #endif
 			}
 	YY_BREAK
-case 45:
+case 47:
 YY_RULE_SETUP
-#line 554 "toke.l"
+#line 564 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 #ifdef HAVE_PRIV_SET
 			    LEXTRACE("LIMITPRIVS ");
@@ -2851,9 +3006,9 @@ YY_RULE_SETUP
 #endif
 			}
 	YY_BREAK
-case 46:
+case 48:
 YY_RULE_SETUP
-#line 563 "toke.l"
+#line 573 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			got_alias:
 			    if (!fill(sudoerstext, sudoersleng))
@@ -2862,9 +3017,9 @@ YY_RULE_SETUP
 			    LEXRETURN(ALIAS);
 			}
 	YY_BREAK
-case 47:
+case 49:
 YY_RULE_SETUP
-#line 571 "toke.l"
+#line 581 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* XXX - no way to specify digest for command */
 			    /* no command args allowed for Defaults!/path */
@@ -2874,9 +3029,9 @@ YY_RULE_SETUP
 			    LEXRETURN(COMMAND);
 			}
 	YY_BREAK
-case 48:
+case 50:
 YY_RULE_SETUP
-#line 580 "toke.l"
+#line 590 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    digest_len = SHA224_DIGEST_LENGTH;
 			    BEGIN WANTDIGEST;
@@ -2884,9 +3039,9 @@ YY_RULE_SETUP
 			    LEXRETURN(SHA224);
 			}
 	YY_BREAK
-case 49:
+case 51:
 YY_RULE_SETUP
-#line 587 "toke.l"
+#line 597 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    digest_len = SHA256_DIGEST_LENGTH;
 			    BEGIN WANTDIGEST;
@@ -2894,9 +3049,9 @@ YY_RULE_SETUP
 			    LEXRETURN(SHA256);
 			}
 	YY_BREAK
-case 50:
+case 52:
 YY_RULE_SETUP
-#line 594 "toke.l"
+#line 604 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    digest_len = SHA384_DIGEST_LENGTH;
 			    BEGIN WANTDIGEST;
@@ -2904,9 +3059,9 @@ YY_RULE_SETUP
 			    LEXRETURN(SHA384);
 			}
 	YY_BREAK
-case 51:
+case 53:
 YY_RULE_SETUP
-#line 601 "toke.l"
+#line 611 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    digest_len = SHA512_DIGEST_LENGTH;
 			    BEGIN WANTDIGEST;
@@ -2914,9 +3069,9 @@ YY_RULE_SETUP
 			    LEXRETURN(SHA512);
 			}
 	YY_BREAK
-case 52:
+case 54:
 YY_RULE_SETUP
-#line 608 "toke.l"
+#line 618 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    BEGIN GOTCMND;
 			    LEXTRACE("COMMAND ");
@@ -2924,9 +3079,9 @@ YY_RULE_SETUP
 				yyterminate();
 			}			/* sudo -e */
 	YY_BREAK
-case 53:
+case 55:
 YY_RULE_SETUP
-#line 615 "toke.l"
+#line 625 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* directories can't have args... */
 			    if (sudoerstext[sudoersleng - 1] == '/') {
@@ -2942,9 +3097,9 @@ YY_RULE_SETUP
 			    }
 			}			/* a pathname */
 	YY_BREAK
-case 54:
+case 56:
 YY_RULE_SETUP
-#line 630 "toke.l"
+#line 640 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("BEGINSTR ");
 			    sudoerslval.string = NULL;
@@ -2952,9 +3107,9 @@ YY_RULE_SETUP
 			    BEGIN INSTR;
 			}
 	YY_BREAK
-case 55:
+case 57:
 YY_RULE_SETUP
-#line 637 "toke.l"
+#line 647 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    /* a word */
 			    if (!fill(sudoerstext, sudoersleng))
@@ -2963,49 +3118,49 @@ YY_RULE_SETUP
 			    LEXRETURN(WORD);
 			}
 	YY_BREAK
-case 56:
+case 58:
 YY_RULE_SETUP
-#line 645 "toke.l"
+#line 655 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("( ");
 			    LEXRETURN('(');
 			}
 	YY_BREAK
-case 57:
+case 59:
 YY_RULE_SETUP
-#line 650 "toke.l"
+#line 660 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE(") ");
 			    LEXRETURN(')');
 			}
 	YY_BREAK
-case 58:
+case 60:
 YY_RULE_SETUP
-#line 655 "toke.l"
+#line 665 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE(", ");
 			    LEXRETURN(',');
 			}			/* return ',' */
 	YY_BREAK
-case 59:
+case 61:
 YY_RULE_SETUP
-#line 660 "toke.l"
+#line 670 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("= ");
 			    LEXRETURN('=');
 			}			/* return '=' */
 	YY_BREAK
-case 60:
+case 62:
 YY_RULE_SETUP
-#line 665 "toke.l"
+#line 675 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE(": ");
 			    LEXRETURN(':');
 			}			/* return ':' */
 	YY_BREAK
-case 61:
+case 63:
 YY_RULE_SETUP
-#line 670 "toke.l"
+#line 680 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (sudoersleng & 1) {
 				LEXTRACE("!");
@@ -3013,9 +3168,10 @@ YY_RULE_SETUP
 			    }
 			}
 	YY_BREAK
-case 62:
+case 64:
+/* rule 64 can match eol */
 YY_RULE_SETUP
-#line 677 "toke.l"
+#line 687 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (YY_START == INSTR) {
 				LEXTRACE("ERROR ");
@@ -3028,32 +3184,34 @@ YY_RULE_SETUP
 			    LEXRETURN(COMMENT);
 			}			/* return newline */
 	YY_BREAK
-case 63:
+case 65:
 YY_RULE_SETUP
-#line 689 "toke.l"
+#line 699 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {			/* throw away space/tabs */
 			    sawspace = true;	/* but remember for fill_args */
 			}
 	YY_BREAK
-case 64:
+case 66:
+/* rule 66 can match eol */
 YY_RULE_SETUP
-#line 693 "toke.l"
+#line 703 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    sawspace = true;	/* remember for fill_args */
 			    sudolineno++;
 			    continued = true;
 			}			/* throw away EOL after \ */
 	YY_BREAK
-case 65:
+case 67:
+/* rule 67 can match eol */
 YY_RULE_SETUP
-#line 699 "toke.l"
+#line 709 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (sudoerstext[sudoersleng - 1] == '\n') {
 				/* comment ending in a newline */
 				BEGIN INITIAL;
 				sudolineno++;
 				continued = false;
-			    } else if (!feof(yyin)) {
+			    } else if (!feof(sudoersin)) {
 				LEXTRACE("ERROR ");
 				LEXRETURN(ERROR);
 			    }
@@ -3061,9 +3219,9 @@ YY_RULE_SETUP
 			    LEXRETURN(COMMENT);
 			}			/* comment, not uid/gid */
 	YY_BREAK
-case 66:
+case 68:
 YY_RULE_SETUP
-#line 713 "toke.l"
+#line 723 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    LEXTRACE("ERROR ");
 			    LEXRETURN(ERROR);
@@ -3076,7 +3234,7 @@ case YY_STATE_EOF(STARTDEFS):
 case YY_STATE_EOF(INDEFS):
 case YY_STATE_EOF(INSTR):
 case YY_STATE_EOF(WANTDIGEST):
-#line 718 "toke.l"
+#line 728 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 {
 			    if (YY_START != INITIAL) {
 			    	BEGIN INITIAL;
@@ -3087,36 +3245,36 @@ case YY_STATE_EOF(WANTDIGEST):
 				yyterminate();
 			}
 	YY_BREAK
-case 67:
+case 69:
 YY_RULE_SETUP
-#line 728 "toke.l"
+#line 738 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 ECHO;
 	YY_BREAK
-#line 3095 "lex.sudoers.c"
+#line 3253 "lex.sudoers.c"
 
 	case YY_END_OF_BUFFER:
 		{
 		/* Amount of text matched not including the EOB char. */
-		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
 
 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
-		*yy_cp = yy_hold_char;
+		*yy_cp = (yy_hold_char);
 		YY_RESTORE_YY_MORE_OFFSET
 
-		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
 			{
 			/* We're scanning a new file or input source.  It's
 			 * possible that this happened because the user
-			 * just pointed yyin at a new source and called
-			 * yylex().  If so, then we have to assure
-			 * consistency between yy_current_buffer and our
+			 * just pointed sudoersin at a new source and called
+			 * sudoerslex().  If so, then we have to assure
+			 * consistency between YY_CURRENT_BUFFER and our
 			 * globals.  Here is the right place to do so, because
 			 * this is the first action (other than possibly a
 			 * back-up) that will match for the new input source.
 			 */
-			yy_n_chars = yy_current_buffer->yy_n_chars;
-			yy_current_buffer->yy_input_file = yyin;
-			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
+			YY_CURRENT_BUFFER_LVALUE->yy_input_file = sudoersin;
+			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
 			}
 
 		/* Note that here we test for yy_c_buf_p "<=" to the position
@@ -3126,13 +3284,13 @@ ECHO;
 		 * end-of-buffer state).  Contrast this with the test
 		 * in input().
 		 */
-		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
 			{ /* This was really a NUL. */
 			yy_state_type yy_next_state;
 
-			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
 
-			yy_current_state = yy_get_previous_state();
+			yy_current_state = yy_get_previous_state(  );
 
 			/* Okay, we're now positioned to make the NUL
 			 * transition.  We couldn't have
@@ -3145,41 +3303,41 @@ ECHO;
 
 			yy_next_state = yy_try_NUL_trans( yy_current_state );
 
-			yy_bp = yytext_ptr + YY_MORE_ADJ;
+			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
 
 			if ( yy_next_state )
 				{
 				/* Consume the NUL. */
-				yy_cp = ++yy_c_buf_p;
+				yy_cp = ++(yy_c_buf_p);
 				yy_current_state = yy_next_state;
 				goto yy_match;
 				}
 
 			else
 				{
-				yy_cp = yy_c_buf_p;
+				yy_cp = (yy_c_buf_p);
 				goto yy_find_action;
 				}
 			}
 
-		else switch ( yy_get_next_buffer() )
+		else switch ( yy_get_next_buffer(  ) )
 			{
 			case EOB_ACT_END_OF_FILE:
 				{
-				yy_did_buffer_switch_on_eof = 0;
+				(yy_did_buffer_switch_on_eof) = 0;
 
-				if ( yywrap() )
+				if ( sudoerswrap( ) )
 					{
 					/* Note: because we've taken care in
 					 * yy_get_next_buffer() to have set up
-					 * yytext, we can now set up
+					 * sudoerstext, we can now set up
 					 * yy_c_buf_p so that if some total
 					 * hoser (like flex itself) wants to
 					 * call the scanner after we return the
 					 * YY_NULL, it'll still work - another
 					 * YY_NULL will get returned.
 					 */
-					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
 
 					yy_act = YY_STATE_EOF(YY_START);
 					goto do_action;
@@ -3187,30 +3345,30 @@ ECHO;
 
 				else
 					{
-					if ( ! yy_did_buffer_switch_on_eof )
+					if ( ! (yy_did_buffer_switch_on_eof) )
 						YY_NEW_FILE;
 					}
 				break;
 				}
 
 			case EOB_ACT_CONTINUE_SCAN:
-				yy_c_buf_p =
-					yytext_ptr + yy_amount_of_matched_text;
+				(yy_c_buf_p) =
+					(yytext_ptr) + yy_amount_of_matched_text;
 
-				yy_current_state = yy_get_previous_state();
+				yy_current_state = yy_get_previous_state(  );
 
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				yy_cp = (yy_c_buf_p);
+				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
 				goto yy_match;
 
 			case EOB_ACT_LAST_MATCH:
-				yy_c_buf_p =
-				&yy_current_buffer->yy_ch_buf[yy_n_chars];
+				(yy_c_buf_p) =
+				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
 
-				yy_current_state = yy_get_previous_state();
+				yy_current_state = yy_get_previous_state(  );
 
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				yy_cp = (yy_c_buf_p);
+				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
 				goto yy_find_action;
 			}
 		break;
@@ -3221,8 +3379,8 @@ ECHO;
 			"fatal flex scanner internal error--no action found" );
 	} /* end of action switch */
 		} /* end of scanning one token */
-	} /* end of yylex */
-
+	} /* end of user's declarations */
+} /* end of sudoerslex */
 
 /* yy_get_next_buffer - try to read in a new buffer
  *
@@ -3231,21 +3389,20 @@ ECHO;
  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
  *	EOB_ACT_END_OF_FILE - end of file
  */
-
-static int yy_get_next_buffer YY_PROTO(( void ))
-	{
-	register char *dest = yy_current_buffer->yy_ch_buf;
-	register char *source = yytext_ptr;
+static int yy_get_next_buffer (void)
+{
+    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
+	register char *source = (yytext_ptr);
 	register int number_to_move, i;
 	int ret_val;
 
-	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
+	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
 		YY_FATAL_ERROR(
 		"fatal flex scanner internal error--end of buffer missed" );
 
-	if ( yy_current_buffer->yy_fill_buffer == 0 )
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
 		{ /* Don't try to fill the buffer, so this is an EOF. */
-		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
 			{
 			/* We matched a single character, the EOB, so
 			 * treat this as a final EOF.
@@ -3265,38 +3422,34 @@ static int yy_get_next_buffer YY_PROTO((
 	/* Try to read more data. */
 
 	/* First move last chars to start of buffer. */
-	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
 
 	for ( i = 0; i < number_to_move; ++i )
 		*(dest++) = *(source++);
 
-	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
 		/* don't do the read, it's not guaranteed to return an EOF,
 		 * just force an EOF
 		 */
-		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
 
 	else
 		{
-		int num_to_read =
-			yy_current_buffer->yy_buf_size - number_to_move - 1;
+			yy_size_t num_to_read =
+			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
 
 		while ( num_to_read <= 0 )
 			{ /* Not enough room in the buffer - grow it. */
-#ifdef YY_USES_REJECT
-			YY_FATAL_ERROR(
-"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
-#else
 
 			/* just a shorter name for the current buffer */
-			YY_BUFFER_STATE b = yy_current_buffer;
+			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
 
 			int yy_c_buf_p_offset =
-				(int) (yy_c_buf_p - b->yy_ch_buf);
+				(int) ((yy_c_buf_p) - b->yy_ch_buf);
 
 			if ( b->yy_is_our_buffer )
 				{
-				int new_size = b->yy_buf_size * 2;
+				yy_size_t new_size = b->yy_buf_size * 2;
 
 				if ( new_size <= 0 )
 					b->yy_buf_size += b->yy_buf_size / 8;
@@ -3305,8 +3458,7 @@ static int yy_get_next_buffer YY_PROTO((
 
 				b->yy_ch_buf = (char *)
 					/* Include room in for 2 EOB chars. */
-					yy_flex_realloc( (void *) b->yy_ch_buf,
-							 b->yy_buf_size + 2 );
+					sudoersrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
 				}
 			else
 				/* Can't grow it, we don't own it. */
@@ -3316,35 +3468,35 @@ static int yy_get_next_buffer YY_PROTO((
 				YY_FATAL_ERROR(
 				"fatal error - scanner input buffer overflow" );
 
-			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
 
-			num_to_read = yy_current_buffer->yy_buf_size -
+			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
 						number_to_move - 1;
-#endif
+
 			}
 
 		if ( num_to_read > YY_READ_BUF_SIZE )
 			num_to_read = YY_READ_BUF_SIZE;
 
 		/* Read in more data. */
-		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
-			yy_n_chars, num_to_read );
+		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
+			(yy_n_chars), num_to_read );
 
-		yy_current_buffer->yy_n_chars = yy_n_chars;
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
 		}
 
-	if ( yy_n_chars == 0 )
+	if ( (yy_n_chars) == 0 )
 		{
 		if ( number_to_move == YY_MORE_ADJ )
 			{
 			ret_val = EOB_ACT_END_OF_FILE;
-			yyrestart( yyin );
+			sudoersrestart(sudoersin  );
 			}
 
 		else
 			{
 			ret_val = EOB_ACT_LAST_MATCH;
-			yy_current_buffer->yy_buffer_status =
+			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
 				YY_BUFFER_EOF_PENDING;
 			}
 		}
@@ -3352,154 +3504,109 @@ static int yy_get_next_buffer YY_PROTO((
 	else
 		ret_val = EOB_ACT_CONTINUE_SCAN;
 
-	yy_n_chars += number_to_move;
-	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
-	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
+	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
+		/* Extend the array by 50%, plus the number we really need. */
+		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
+		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) sudoersrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
+		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
+			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
+	}
 
-	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+	(yy_n_chars) += number_to_move;
+	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
+	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
 
-	return ret_val;
-	}
+	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
 
+	return ret_val;
+}
 
 /* yy_get_previous_state - get the state just before the EOB char was reached */
 
-static yy_state_type yy_get_previous_state YY_PROTO(( void ))
-	{
+    static yy_state_type yy_get_previous_state (void)
+{
 	register yy_state_type yy_current_state;
 	register char *yy_cp;
-
-	yy_current_state = yy_start;
+    
+	yy_current_state = (yy_start);
 	yy_current_state += YY_AT_BOL();
 
-	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
 		{
 		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
 		if ( yy_accept[yy_current_state] )
 			{
-			yy_last_accepting_state = yy_current_state;
-			yy_last_accepting_cpos = yy_cp;
+			(yy_last_accepting_state) = yy_current_state;
+			(yy_last_accepting_cpos) = yy_cp;
 			}
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 814 )
+			if ( yy_current_state >= 842 )
 				yy_c = yy_meta[(unsigned int) yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
 		}
 
 	return yy_current_state;
-	}
-
+}
 
 /* yy_try_NUL_trans - try to make a transition on the NUL character
  *
  * synopsis
  *	next_state = yy_try_NUL_trans( current_state );
  */
-
-#ifdef YY_USE_PROTOS
-static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
-#else
-static yy_state_type yy_try_NUL_trans( yy_current_state )
-yy_state_type yy_current_state;
-#endif
-	{
+    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
+{
 	register int yy_is_jam;
-	register char *yy_cp = yy_c_buf_p;
+    	register char *yy_cp = (yy_c_buf_p);
 
 	register YY_CHAR yy_c = 1;
 	if ( yy_accept[yy_current_state] )
 		{
-		yy_last_accepting_state = yy_current_state;
-		yy_last_accepting_cpos = yy_cp;
+		(yy_last_accepting_state) = yy_current_state;
+		(yy_last_accepting_cpos) = yy_cp;
 		}
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 814 )
+		if ( yy_current_state >= 842 )
 			yy_c = yy_meta[(unsigned int) yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-	yy_is_jam = (yy_current_state == 813);
-
-	return yy_is_jam ? 0 : yy_current_state;
-	}
-
-
-#ifndef YY_NO_UNPUT
-#ifdef YY_USE_PROTOS
-static void yyunput( int c, register char *yy_bp )
-#else
-static void yyunput( c, yy_bp )
-int c;
-register char *yy_bp;
-#endif
-	{
-	register char *yy_cp = yy_c_buf_p;
-
-	/* undo effects of setting up yytext */
-	*yy_cp = yy_hold_char;
-
-	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-		{ /* need to shift things up to make room */
-		/* +2 for EOB chars. */
-		register int number_to_move = yy_n_chars + 2;
-		register char *dest = &yy_current_buffer->yy_ch_buf[
-					yy_current_buffer->yy_buf_size + 2];
-		register char *source =
-				&yy_current_buffer->yy_ch_buf[number_to_move];
-
-		while ( source > yy_current_buffer->yy_ch_buf )
-			*--dest = *--source;
-
-		yy_cp += (int) (dest - source);
-		yy_bp += (int) (dest - source);
-		yy_current_buffer->yy_n_chars =
-			yy_n_chars = yy_current_buffer->yy_buf_size;
-
-		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-			YY_FATAL_ERROR( "flex scanner push-back overflow" );
-		}
-
-	*--yy_cp = (char) c;
-
-
-	yytext_ptr = yy_bp;
-	yy_hold_char = *yy_cp;
-	yy_c_buf_p = yy_cp;
-	}
-#endif	/* ifndef YY_NO_UNPUT */
+	yy_is_jam = (yy_current_state == 841);
 
+		return yy_is_jam ? 0 : yy_current_state;
+}
 
 #ifndef YY_NO_INPUT
 #ifdef __cplusplus
-static int yyinput YY_PROTO(( void ))
+    static int yyinput (void)
 #else
-static int input YY_PROTO(( void ))
+    static int input  (void)
 #endif
-	{
-	int c;
 
-	*yy_c_buf_p = yy_hold_char;
+{
+	int c;
+    
+	*(yy_c_buf_p) = (yy_hold_char);
 
-	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
 		{
 		/* yy_c_buf_p now points to the character we want to return.
 		 * If this occurs *before* the EOB characters, then it's a
 		 * valid NUL; if not, then we've hit the end of the buffer.
 		 */
-		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
 			/* This was really a NUL. */
-			*yy_c_buf_p = '\0';
+			*(yy_c_buf_p) = '\0';
 
 		else
 			{ /* need more input */
-			int offset = yy_c_buf_p - yytext_ptr;
-			++yy_c_buf_p;
+			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
+			++(yy_c_buf_p);
 
-			switch ( yy_get_next_buffer() )
+			switch ( yy_get_next_buffer(  ) )
 				{
 				case EOB_ACT_LAST_MATCH:
 					/* This happens because yy_g_n_b()
@@ -3513,16 +3620,16 @@ static int input YY_PROTO(( void ))
 					 */
 
 					/* Reset buffer status. */
-					yyrestart( yyin );
+					sudoersrestart(sudoersin );
 
-					/* fall through */
+					/*FALLTHROUGH*/
 
 				case EOB_ACT_END_OF_FILE:
 					{
-					if ( yywrap() )
+					if ( sudoerswrap( ) )
 						return EOF;
 
-					if ( ! yy_did_buffer_switch_on_eof )
+					if ( ! (yy_did_buffer_switch_on_eof) )
 						YY_NEW_FILE;
 #ifdef __cplusplus
 					return yyinput();
@@ -3532,177 +3639,167 @@ static int input YY_PROTO(( void ))
 					}
 
 				case EOB_ACT_CONTINUE_SCAN:
-					yy_c_buf_p = yytext_ptr + offset;
+					(yy_c_buf_p) = (yytext_ptr) + offset;
 					break;
 				}
 			}
 		}
 
-	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
-	*yy_c_buf_p = '\0';	/* preserve yytext */
-	yy_hold_char = *++yy_c_buf_p;
+	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
+	*(yy_c_buf_p) = '\0';	/* preserve sudoerstext */
+	(yy_hold_char) = *++(yy_c_buf_p);
 
-	yy_current_buffer->yy_at_bol = (c == '\n');
+	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
 
 	return c;
-	}
+}
 #endif	/* ifndef YY_NO_INPUT */
 
-
-#ifdef YY_USE_PROTOS
-void yyrestart( FILE *input_file )
-#else
-void yyrestart( input_file )
-FILE *input_file;
-#endif
-	{
-	if ( ! yy_current_buffer )
-		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
-
-	yy_init_buffer( yy_current_buffer, input_file );
-	yy_load_buffer_state();
+/** Immediately switch to a different input stream.
+ * @param input_file A readable stream.
+ * 
+ * @note This function does not reset the start condition to @c INITIAL .
+ */
+    void sudoersrestart  (FILE * input_file )
+{
+    
+	if ( ! YY_CURRENT_BUFFER ){
+        sudoersensure_buffer_stack ();
+		YY_CURRENT_BUFFER_LVALUE =
+            sudoers_create_buffer(sudoersin,YY_BUF_SIZE );
 	}
 
+	sudoers_init_buffer(YY_CURRENT_BUFFER,input_file );
+	sudoers_load_buffer_state( );
+}
 
-#ifdef YY_USE_PROTOS
-void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
-#else
-void yy_switch_to_buffer( new_buffer )
-YY_BUFFER_STATE new_buffer;
-#endif
-	{
-	if ( yy_current_buffer == new_buffer )
+/** Switch to a different input buffer.
+ * @param new_buffer The new input buffer.
+ * 
+ */
+    void sudoers_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
+{
+    
+	/* TODO. We should be able to replace this entire function body
+	 * with
+	 *		sudoerspop_buffer_state();
+	 *		sudoerspush_buffer_state(new_buffer);
+     */
+	sudoersensure_buffer_stack ();
+	if ( YY_CURRENT_BUFFER == new_buffer )
 		return;
 
-	if ( yy_current_buffer )
+	if ( YY_CURRENT_BUFFER )
 		{
 		/* Flush out information for old buffer. */
-		*yy_c_buf_p = yy_hold_char;
-		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
-		yy_current_buffer->yy_n_chars = yy_n_chars;
+		*(yy_c_buf_p) = (yy_hold_char);
+		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
 		}
 
-	yy_current_buffer = new_buffer;
-	yy_load_buffer_state();
+	YY_CURRENT_BUFFER_LVALUE = new_buffer;
+	sudoers_load_buffer_state( );
 
 	/* We don't actually know whether we did this switch during
-	 * EOF (yywrap()) processing, but the only time this flag
-	 * is looked at is after yywrap() is called, so it's safe
+	 * EOF (sudoerswrap()) processing, but the only time this flag
+	 * is looked at is after sudoerswrap() is called, so it's safe
 	 * to go ahead and always set it.
 	 */
-	yy_did_buffer_switch_on_eof = 1;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_load_buffer_state( void )
-#else
-void yy_load_buffer_state()
-#endif
-	{
-	yy_n_chars = yy_current_buffer->yy_n_chars;
-	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
-	yyin = yy_current_buffer->yy_input_file;
-	yy_hold_char = *yy_c_buf_p;
-	}
+	(yy_did_buffer_switch_on_eof) = 1;
+}
 
+static void sudoers_load_buffer_state  (void)
+{
+    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
+	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
+	sudoersin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
+	(yy_hold_char) = *(yy_c_buf_p);
+}
 
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
-#else
-YY_BUFFER_STATE yy_create_buffer( file, size )
-FILE *file;
-int size;
-#endif
-	{
+/** Allocate and initialize an input buffer state.
+ * @param file A readable stream.
+ * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
+ * 
+ * @return the allocated buffer state.
+ */
+    YY_BUFFER_STATE sudoers_create_buffer  (FILE * file, int  size )
+{
 	YY_BUFFER_STATE b;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+    
+	b = (YY_BUFFER_STATE) sudoersalloc(sizeof( struct yy_buffer_state )  );
 	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+		YY_FATAL_ERROR( "out of dynamic memory in sudoers_create_buffer()" );
 
 	b->yy_buf_size = size;
 
 	/* yy_ch_buf has to be 2 characters longer than the size given because
 	 * we need to put in 2 end-of-buffer characters.
 	 */
-	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	b->yy_ch_buf = (char *) sudoersalloc(b->yy_buf_size + 2  );
 	if ( ! b->yy_ch_buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+		YY_FATAL_ERROR( "out of dynamic memory in sudoers_create_buffer()" );
 
 	b->yy_is_our_buffer = 1;
 
-	yy_init_buffer( b, file );
+	sudoers_init_buffer(b,file );
 
 	return b;
-	}
-
+}
 
-#ifdef YY_USE_PROTOS
-void yy_delete_buffer( YY_BUFFER_STATE b )
-#else
-void yy_delete_buffer( b )
-YY_BUFFER_STATE b;
-#endif
-	{
+/** Destroy the buffer.
+ * @param b a buffer created with sudoers_create_buffer()
+ * 
+ */
+    void sudoers_delete_buffer (YY_BUFFER_STATE  b )
+{
+    
 	if ( ! b )
 		return;
 
-	if ( b == yy_current_buffer )
-		yy_current_buffer = (YY_BUFFER_STATE) 0;
+	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
+		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
 
 	if ( b->yy_is_our_buffer )
-		yy_flex_free( (void *) b->yy_ch_buf );
+		sudoersfree((void *) b->yy_ch_buf  );
 
-	yy_flex_free( (void *) b );
-	}
-
-
-#ifndef YY_ALWAYS_INTERACTIVE
-#ifndef YY_NEVER_INTERACTIVE
-#include <unistd.h>
-#endif
-#endif
-
-#ifdef YY_USE_PROTOS
-void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
-#else
-void yy_init_buffer( b, file )
-YY_BUFFER_STATE b;
-FILE *file;
-#endif
+	sudoersfree((void *) b  );
+}
 
+/* Initializes or reinitializes a buffer.
+ * This function is sometimes called more than once on the same buffer,
+ * such as during a sudoersrestart() or at EOF.
+ */
+    static void sudoers_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
 
-	{
+{
 	int oerrno = errno;
-
-	yy_flush_buffer( b );
+    
+	sudoers_flush_buffer(b );
 
 	b->yy_input_file = file;
 	b->yy_fill_buffer = 1;
 
-#if defined(YY_ALWAYS_INTERACTIVE) && YY_ALWAYS_INTERACTIVE
-	b->yy_is_interactive = 1;
-#else
-#if defined(YY_NEVER_INTERACTIVE) && YY_NEVER_INTERACTIVE
-	b->yy_is_interactive = 0;
-#else
-	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
-#endif
-#endif
-	errno = oerrno;
-	}
-
+    /* If b is the current buffer, then sudoers_init_buffer was _probably_
+     * called from sudoersrestart() or through yy_get_next_buffer.
+     * In that case, we don't want to reset the lineno or column.
+     */
+    if (b != YY_CURRENT_BUFFER){
+        b->yy_bs_lineno = 1;
+        b->yy_bs_column = 0;
+    }
 
-#ifdef YY_USE_PROTOS
-void yy_flush_buffer( YY_BUFFER_STATE b )
-#else
-void yy_flush_buffer( b )
-YY_BUFFER_STATE b;
-#endif
+        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+    
+	errno = oerrno;
+}
 
-	{
-	if ( ! b )
+/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
+ * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
+ * 
+ */
+    void sudoers_flush_buffer (YY_BUFFER_STATE  b )
+{
+    	if ( ! b )
 		return;
 
 	b->yy_n_chars = 0;
@@ -3719,31 +3816,127 @@ YY_BUFFER_STATE b;
 	b->yy_at_bol = 1;
 	b->yy_buffer_status = YY_BUFFER_NEW;
 
-	if ( b == yy_current_buffer )
-		yy_load_buffer_state();
+	if ( b == YY_CURRENT_BUFFER )
+		sudoers_load_buffer_state( );
+}
+
+/** Pushes the new state onto the stack. The new state becomes
+ *  the current state. This function will allocate the stack
+ *  if necessary.
+ *  @param new_buffer The new state.
+ *  
+ */
+void sudoerspush_buffer_state (YY_BUFFER_STATE new_buffer )
+{
+    	if (new_buffer == NULL)
+		return;
+
+	sudoersensure_buffer_stack();
+
+	/* This block is copied from sudoers_switch_to_buffer. */
+	if ( YY_CURRENT_BUFFER )
+		{
+		/* Flush out information for old buffer. */
+		*(yy_c_buf_p) = (yy_hold_char);
+		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	/* Only push if top exists. Otherwise, replace top. */
+	if (YY_CURRENT_BUFFER)
+		(yy_buffer_stack_top)++;
+	YY_CURRENT_BUFFER_LVALUE = new_buffer;
+
+	/* copied from sudoers_switch_to_buffer. */
+	sudoers_load_buffer_state( );
+	(yy_did_buffer_switch_on_eof) = 1;
+}
+
+/** Removes and deletes the top of the stack, if present.
+ *  The next element becomes the new top.
+ *  
+ */
+void sudoerspop_buffer_state (void)
+{
+    	if (!YY_CURRENT_BUFFER)
+		return;
+
+	sudoers_delete_buffer(YY_CURRENT_BUFFER );
+	YY_CURRENT_BUFFER_LVALUE = NULL;
+	if ((yy_buffer_stack_top) > 0)
+		--(yy_buffer_stack_top);
+
+	if (YY_CURRENT_BUFFER) {
+		sudoers_load_buffer_state( );
+		(yy_did_buffer_switch_on_eof) = 1;
 	}
+}
 
+/* Allocates the stack if it does not exist.
+ *  Guarantees space for at least one push.
+ */
+static void sudoersensure_buffer_stack (void)
+{
+	yy_size_t num_to_alloc;
+    
+	if (!(yy_buffer_stack)) {
+
+		/* First allocation is just for 2 elements, since we don't know if this
+		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
+		 * immediate realloc on the next call.
+         */
+		num_to_alloc = 1;
+		(yy_buffer_stack) = (struct yy_buffer_state**)sudoersalloc
+								(num_to_alloc * sizeof(struct yy_buffer_state*)
+								);
+		if ( ! (yy_buffer_stack) )
+			YY_FATAL_ERROR( "out of dynamic memory in sudoersensure_buffer_stack()" );
+								  
+		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
+				
+		(yy_buffer_stack_max) = num_to_alloc;
+		(yy_buffer_stack_top) = 0;
+		return;
+	}
 
-#ifndef YY_NO_SCAN_BUFFER
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
-#else
-YY_BUFFER_STATE yy_scan_buffer( base, size )
-char *base;
-yy_size_t size;
-#endif
-	{
-	YY_BUFFER_STATE b;
+	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
+
+		/* Increase the buffer to prepare for a possible push. */
+		int grow_size = 8 /* arbitrary grow size */;
+
+		num_to_alloc = (yy_buffer_stack_max) + grow_size;
+		(yy_buffer_stack) = (struct yy_buffer_state**)sudoersrealloc
+								((yy_buffer_stack),
+								num_to_alloc * sizeof(struct yy_buffer_state*)
+								);
+		if ( ! (yy_buffer_stack) )
+			YY_FATAL_ERROR( "out of dynamic memory in sudoersensure_buffer_stack()" );
+
+		/* zero only the new slots.*/
+		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
+		(yy_buffer_stack_max) = num_to_alloc;
+	}
+}
 
+/** Setup the input buffer state to scan directly from a user-specified character buffer.
+ * @param base the character buffer
+ * @param size the size in bytes of the character buffer
+ * 
+ * @return the newly allocated buffer state object. 
+ */
+YY_BUFFER_STATE sudoers_scan_buffer  (char * base, yy_size_t  size )
+{
+	YY_BUFFER_STATE b;
+    
 	if ( size < 2 ||
 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
 		/* They forgot to leave room for the EOB's. */
 		return 0;
 
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	b = (YY_BUFFER_STATE) sudoersalloc(sizeof( struct yy_buffer_state )  );
 	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+		YY_FATAL_ERROR( "out of dynamic memory in sudoers_scan_buffer()" );
 
 	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
 	b->yy_buf_pos = b->yy_ch_buf = base;
@@ -3755,58 +3948,53 @@ yy_size_t size;
 	b->yy_fill_buffer = 0;
 	b->yy_buffer_status = YY_BUFFER_NEW;
 
-	yy_switch_to_buffer( b );
+	sudoers_switch_to_buffer(b  );
 
 	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_STRING
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
-#else
-YY_BUFFER_STATE yy_scan_string( yy_str )
-yyconst char *yy_str;
-#endif
-	{
-	int len;
-	for ( len = 0; yy_str[len]; ++len )
-		;
-
-	return yy_scan_bytes( yy_str, len );
-	}
-#endif
+}
 
+/** Setup the input buffer state to scan a string. The next call to sudoerslex() will
+ * scan from a @e copy of @a str.
+ * @param yystr a NUL-terminated string to scan
+ * 
+ * @return the newly allocated buffer state object.
+ * @note If you want to scan bytes that may contain NUL values, then use
+ *       sudoers_scan_bytes() instead.
+ */
+YY_BUFFER_STATE sudoers_scan_string (yyconst char * yystr )
+{
+    
+	return sudoers_scan_bytes(yystr,strlen(yystr) );
+}
 
-#ifndef YY_NO_SCAN_BYTES
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
-#else
-YY_BUFFER_STATE yy_scan_bytes( bytes, len )
-yyconst char *bytes;
-int len;
-#endif
-	{
+/** Setup the input buffer state to scan the given bytes. The next call to sudoerslex() will
+ * scan from a @e copy of @a bytes.
+ * @param yybytes the byte buffer to scan
+ * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
+ * 
+ * @return the newly allocated buffer state object.
+ */
+YY_BUFFER_STATE sudoers_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
+{
 	YY_BUFFER_STATE b;
 	char *buf;
 	yy_size_t n;
-	int i;
-
+	yy_size_t i;
+    
 	/* Get memory for full buffer, including space for trailing EOB's. */
-	n = len + 2;
-	buf = (char *) yy_flex_alloc( n );
+	n = _yybytes_len + 2;
+	buf = (char *) sudoersalloc(n  );
 	if ( ! buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+		YY_FATAL_ERROR( "out of dynamic memory in sudoers_scan_bytes()" );
 
-	for ( i = 0; i < len; ++i )
-		buf[i] = bytes[i];
+	for ( i = 0; i < _yybytes_len; ++i )
+		buf[i] = yybytes[i];
 
-	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
 
-	b = yy_scan_buffer( buf, n );
+	b = sudoers_scan_buffer(buf,n );
 	if ( ! b )
-		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+		YY_FATAL_ERROR( "bad buffer in sudoers_scan_bytes()" );
 
 	/* It's okay to grow etc. this buffer, and we should throw it
 	 * away when we're done.
@@ -3814,148 +4002,196 @@ int len;
 	b->yy_is_our_buffer = 1;
 
 	return b;
-	}
+}
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
 #endif
 
+static void yy_fatal_error (yyconst char* msg )
+{
+    	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+}
 
-#ifndef YY_NO_PUSH_STATE
-#ifdef YY_USE_PROTOS
-static void yy_push_state( int new_state )
-#else
-static void yy_push_state( new_state )
-int new_state;
-#endif
-	{
-	if ( yy_start_stack_ptr >= yy_start_stack_depth )
-		{
-		yy_size_t new_size;
+/* Redefine yyless() so it works in section 3 code. */
 
-		yy_start_stack_depth += YY_START_STACK_INCR;
-		new_size = yy_start_stack_depth * sizeof( int );
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up sudoerstext. */ \
+        int yyless_macro_arg = (n); \
+        YY_LESS_LINENO(yyless_macro_arg);\
+		sudoerstext[sudoersleng] = (yy_hold_char); \
+		(yy_c_buf_p) = sudoerstext + yyless_macro_arg; \
+		(yy_hold_char) = *(yy_c_buf_p); \
+		*(yy_c_buf_p) = '\0'; \
+		sudoersleng = yyless_macro_arg; \
+		} \
+	while ( 0 )
 
-		if ( ! yy_start_stack )
-			yy_start_stack = (int *) yy_flex_alloc( new_size );
+/* Accessor  methods (get/set functions) to struct members. */
 
-		else
-			yy_start_stack = (int *) yy_flex_realloc(
-					(void *) yy_start_stack, new_size );
+/** Get the current line number.
+ * 
+ */
+int sudoersget_lineno  (void)
+{
+        
+    return sudoerslineno;
+}
 
-		if ( ! yy_start_stack )
-			YY_FATAL_ERROR(
-			"out of memory expanding start-condition stack" );
-		}
+/** Get the input stream.
+ * 
+ */
+FILE *sudoersget_in  (void)
+{
+        return sudoersin;
+}
 
-	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+/** Get the output stream.
+ * 
+ */
+FILE *sudoersget_out  (void)
+{
+        return sudoersout;
+}
 
-	BEGIN(new_state);
-	}
-#endif
+/** Get the length of the current token.
+ * 
+ */
+yy_size_t sudoersget_leng  (void)
+{
+        return sudoersleng;
+}
 
+/** Get the current token.
+ * 
+ */
 
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state YY_PROTO(( void ))
-	{
-	if ( --yy_start_stack_ptr < 0 )
-		YY_FATAL_ERROR( "start-condition stack underflow" );
+char *sudoersget_text  (void)
+{
+        return sudoerstext;
+}
 
-	BEGIN(yy_start_stack[yy_start_stack_ptr]);
-	}
-#endif
+/** Set the current line number.
+ * @param line_number
+ * 
+ */
+void sudoersset_lineno (int  line_number )
+{
+    
+    sudoerslineno = line_number;
+}
 
+/** Set the input stream. This does not discard the current
+ * input buffer.
+ * @param in_str A readable stream.
+ * 
+ * @see sudoers_switch_to_buffer
+ */
+void sudoersset_in (FILE *  in_str )
+{
+        sudoersin = in_str ;
+}
 
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state YY_PROTO(( void ))
-	{
-	return yy_start_stack[yy_start_stack_ptr - 1];
-	}
-#endif
+void sudoersset_out (FILE *  out_str )
+{
+        sudoersout = out_str ;
+}
 
-#ifndef YY_EXIT_FAILURE
-#define YY_EXIT_FAILURE 2
-#endif
+int sudoersget_debug  (void)
+{
+        return sudoers_flex_debug;
+}
 
-#ifdef YY_USE_PROTOS
-static void yy_fatal_error( yyconst char msg[] )
+void sudoersset_debug (int  bdebug )
+{
+        sudoers_flex_debug = bdebug ;
+}
+
+static int yy_init_globals (void)
+{
+        /* Initialization is the same as for the non-reentrant scanner.
+     * This function is called from sudoerslex_destroy(), so don't allocate here.
+     */
+
+    (yy_buffer_stack) = 0;
+    (yy_buffer_stack_top) = 0;
+    (yy_buffer_stack_max) = 0;
+    (yy_c_buf_p) = (char *) 0;
+    (yy_init) = 0;
+    (yy_start) = 0;
+
+/* Defined in main.c */
+#ifdef YY_STDINIT
+    sudoersin = stdin;
+    sudoersout = stdout;
 #else
-static void yy_fatal_error( msg )
-char msg[];
+    sudoersin = (FILE *) 0;
+    sudoersout = (FILE *) 0;
 #endif
-	{
-	(void) fprintf( stderr, "%s\n", msg );
-	exit( YY_EXIT_FAILURE );
-	}
-
 
+    /* For future reference: Set errno on error, since we are called by
+     * sudoerslex_init()
+     */
+    return 0;
+}
 
-/* Redefine yyless() so it works in section 3 code. */
-
-#undef yyless
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		yytext[yyleng] = yy_hold_char; \
-		yy_c_buf_p = yytext + n; \
-		yy_hold_char = *yy_c_buf_p; \
-		*yy_c_buf_p = '\0'; \
-		yyleng = n; \
-		} \
-	while ( 0 )
+/* sudoerslex_destroy is for both reentrant and non-reentrant scanners. */
+int sudoerslex_destroy  (void)
+{
+    
+    /* Pop the buffer stack, destroying each element. */
+	while(YY_CURRENT_BUFFER){
+		sudoers_delete_buffer(YY_CURRENT_BUFFER  );
+		YY_CURRENT_BUFFER_LVALUE = NULL;
+		sudoerspop_buffer_state();
+	}
+
+	/* Destroy the stack itself. */
+	sudoersfree((yy_buffer_stack) );
+	(yy_buffer_stack) = NULL;
+
+    /* Reset the globals. This is important in a non-reentrant scanner so the next time
+     * sudoerslex() is called, initialization will occur. */
+    yy_init_globals( );
 
+    return 0;
+}
 
-/* Internal utility routines. */
+/*
+ * Internal utility routines.
+ */
 
 #ifndef yytext_ptr
-#ifdef YY_USE_PROTOS
-static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
-#else
-static void yy_flex_strncpy( s1, s2, n )
-char *s1;
-yyconst char *s2;
-int n;
-#endif
-	{
+static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
+{
 	register int i;
 	for ( i = 0; i < n; ++i )
 		s1[i] = s2[i];
-	}
+}
 #endif
 
 #ifdef YY_NEED_STRLEN
-#ifdef YY_USE_PROTOS
-static int yy_flex_strlen( yyconst char *s )
-#else
-static int yy_flex_strlen( s )
-yyconst char *s;
-#endif
-	{
+static int yy_flex_strlen (yyconst char * s )
+{
 	register int n;
 	for ( n = 0; s[n]; ++n )
 		;
 
 	return n;
-	}
+}
 #endif
 
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_alloc( yy_size_t size )
-#else
-static void *yy_flex_alloc( size )
-yy_size_t size;
-#endif
-	{
+void *sudoersalloc (yy_size_t  size )
+{
 	return (void *) malloc( size );
-	}
+}
 
-#ifdef YY_USE_PROTOS
-static void *yy_flex_realloc( void *ptr, yy_size_t size )
-#else
-static void *yy_flex_realloc( ptr, size )
-void *ptr;
-yy_size_t size;
-#endif
-	{
+void *sudoersrealloc  (void * ptr, yy_size_t  size )
+{
 	/* The cast to (char *) in the following accommodates both
 	 * implementations that use char* generic pointers, and those
 	 * that use void* generic pointers.  It works with the latter
@@ -3964,26 +4200,17 @@ yy_size_t size;
 	 * as though doing an assignment.
 	 */
 	return (void *) realloc( (char *) ptr, size );
-	}
+}
 
-#ifdef YY_USE_PROTOS
-static void yy_flex_free( void *ptr )
-#else
-static void yy_flex_free( ptr )
-void *ptr;
-#endif
-	{
-	free( ptr );
-	}
+void sudoersfree (void * ptr )
+{
+	free( (char *) ptr );	/* see sudoersrealloc() for (char *) cast */
+}
+
+#define YYTABLES_NAME "yytables"
+
+#line 737 "/home/ben/src/sudo/plugins/sudoers/toke.l"
 
-#if defined(YY_MAIN) && YY_MAIN
-int main()
-	{
-	yylex();
-	return 0;
-	}
-#endif
-#line 728 "toke.l"
 
 struct path_list {
     SLIST_ENTRY(path_list) entries;
@@ -4370,3 +4597,4 @@ sudoers_trace_print(const char *msg)
     return 0;
 }
 #endif /* TRACELEXER */
+
